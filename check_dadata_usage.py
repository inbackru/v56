#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è DaData API
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ç–µ–∫—É—â–∏–π –ø–ª–∞–Ω –∏ –æ—Å—Ç–∞–≤—à–∏–π—Å—è –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤
"""

import os
import sys
import logging
from datetime import datetime
from services.dadata_client import get_dadata_client

logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)


def check_api_plan():
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ç–µ–∫—É—â–∏–π –ø–ª–∞–Ω DaData API
    
    FREE –ø–ª–∞–Ω: 10,000 –∑–∞–ø—Ä–æ—Å–æ–≤/–¥–µ–Ω—å
    PRO –ø–ª–∞–Ω: –±–æ–ª—å—à–µ –ª–∏–º–∏—Ç—ã
    """
    try:
        client = get_dadata_client()
        
        # –î–µ–ª–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–ª–∞–Ω–µ
        test_address = "–ú–æ—Å–∫–≤–∞, –ö—Ä–∞—Å–Ω–∞—è –ø–ª–æ—â–∞–¥—å, 1"
        result = client.suggest_address(test_address, count=1)
        
        # DaData –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–ª–∞–Ω –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ X-Plan
        plan = client.last_response_plan if hasattr(client, 'last_response_plan') else 'FREE'
        
        logger.info("=" * 80)
        logger.info("üìä –ú–û–ù–ò–¢–û–†–ò–ù–ì DaData API")
        logger.info("=" * 80)
        logger.info(f"üìÖ –î–∞—Ç–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        logger.info(f"üîë API Key: {'‚úÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω' if os.environ.get('DADATA_API_KEY') else '‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}")
        logger.info(f"üéØ –ü–ª–∞–Ω: {plan}")
        
        if plan == 'FREE':
            logger.info("üìâ –õ–∏–º–∏—Ç: 10,000 –∑–∞–ø—Ä–æ—Å–æ–≤/–¥–µ–Ω—å")
            logger.warning("‚ö†Ô∏è  FREE –ø–ª–∞–Ω –∏–º–µ–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è:")
            logger.warning("   - 10,000 –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –¥–µ–Ω—å")
            logger.warning("   - –°–±—Ä–æ—Å –ª–∏–º–∏—Ç–∞ –≤ 00:00 UTC+3 (–ú–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è)")
            logger.warning("   - –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –º–æ–Ω–∏—Ç–æ—Ä–∏—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ")
        elif plan == 'PRO':
            logger.info("‚úÖ PRO –ø–ª–∞–Ω - —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –ª–∏–º–∏—Ç—ã")
        
        logger.info("=" * 80)
        logger.info("")
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é
        logger.info("üí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
        logger.info("   1. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ batch –æ–±–æ–≥–∞—â–µ–Ω–∏–µ —Å —Ä–∞–∑—É–º–Ω—ã–º batch_size (20-50)")
        logger.info("   2. –í–∫–ª—é—á–∞–π—Ç–µ dry-run —Ä–µ–∂–∏–º –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–µ—Ä–µ–¥ —Ä–µ–∞–ª—å–Ω—ã–º–∏ –∑–∞–ø—Ä–æ—Å–∞–º–∏")
        logger.info("   3. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ DaData (TTL: 3600s)")
        logger.info("   4. –ò–∑–±–µ–≥–∞–π—Ç–µ –æ–±–æ–≥–∞—â–µ–Ω–∏—è –Ω–µ–ø–æ–ª–Ω—ã—Ö –∞–¥—Ä–µ—Å–æ–≤ (–ñ–ö –Ω–∞–∑–≤–∞–Ω–∏—è)")
        logger.info("")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        try:
            from app import app, db
            from models import Property
            
            with app.app_context():
                total_properties = Property.query.count()
                enriched_properties = Property.query.filter(
                    Property.parsed_area.isnot(None),
                    Property.parsed_settlement.isnot(None),
                    Property.parsed_house.isnot(None)
                ).count()
                
                logger.info("üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ë–ê–ó–´ –î–ê–ù–ù–´–•:")
                logger.info(f"   –í—Å–µ–≥–æ –æ–±—ä–µ–∫—Ç–æ–≤: {total_properties}")
                logger.info(f"   –ü–æ–ª–Ω–æ—Å—Ç—å—é –æ–±–æ–≥–∞—â–µ–Ω–æ: {enriched_properties} ({enriched_properties/total_properties*100:.1f}%)")
                logger.info(f"   –¢—Ä–µ–±—É–µ—Ç –æ–±–æ–≥–∞—â–µ–Ω–∏—è: {total_properties - enriched_properties}")
                logger.info("")
                
        except Exception as e:
            logger.debug(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ë–î: {e}")
        
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ API: {e}")
        logger.error("   –ü—Ä–æ–≤–µ—Ä—å—Ç–µ:")
        logger.error("   1. –ù–∞–ª–∏—á–∏–µ DADATA_API_KEY –∏ DADATA_SECRET_KEY –≤ .env")
        logger.error("   2. –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –∫–ª—é—á–µ–π")
        logger.error("   3. –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É")
        return False


def estimate_enrichment_cost(num_properties: int = None):
    """
    –û—Ü–µ–Ω–∏–≤–∞–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç—å –æ–±–æ–≥–∞—â–µ–Ω–∏—è –≤ –∑–∞–ø—Ä–æ—Å–∞—Ö API
    
    Args:
        num_properties: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—ä–µ–∫—Ç–æ–≤ –¥–ª—è –æ–±–æ–≥–∞—â–µ–Ω–∏—è (None = –≤—Å–µ –Ω–µ–æ–±–æ–≥–∞—â–µ–Ω–Ω—ã–µ)
    """
    try:
        from app import app, db
        from models import Property
        
        with app.app_context():
            if num_properties is None:
                # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –Ω–µ–æ–±–æ–≥–∞—â–µ–Ω–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã
                num_properties = Property.query.filter(
                    Property.parsed_area.is_(None)
                ).count()
            
            logger.info("=" * 80)
            logger.info("üí∞ –û–¶–ï–ù–ö–ê –°–¢–û–ò–ú–û–°–¢–ò –û–ë–û–ì–ê–©–ï–ù–ò–Ø")
            logger.info("=" * 80)
            logger.info(f"üì¶ –û–±—ä–µ–∫—Ç–æ–≤ –¥–ª—è –æ–±–æ–≥–∞—â–µ–Ω–∏—è: {num_properties}")
            logger.info(f"üì° –ó–∞–ø—Ä–æ—Å–æ–≤ –∫ API: ~{num_properties} (1 –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ–±—ä–µ–∫—Ç)")
            
            # –†–∞—Å—á–µ—Ç –¥–ª—è FREE –ø–ª–∞–Ω–∞
            days_needed = (num_properties // 10000) + (1 if num_properties % 10000 > 0 else 0)
            
            if days_needed > 1:
                logger.warning(f"‚è±Ô∏è  –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: ~{days_needed} –¥–Ω–µ–π (FREE –ø–ª–∞–Ω: 10,000/–¥–µ–Ω—å)")
                logger.warning(f"   –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –ø–∞—Ä—Ç–∏—è–º–∏ –ø–æ 10,000 –æ–±—ä–µ–∫—Ç–æ–≤")
            else:
                logger.info(f"‚úÖ –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: <1 –¥–Ω—è (–≤ –ø—Ä–µ–¥–µ–ª–∞—Ö FREE –ª–∏–º–∏—Ç–∞)")
            
            logger.info("=" * 80)
            logger.info("")
            
            # –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞
            logger.info("üöÄ –ö–û–ú–ê–ù–î–ê –î–õ–Ø –ó–ê–ü–£–°–ö–ê:")
            if num_properties <= 10000:
                logger.info(f"   python backfill_address_fields.py --batch-size 20")
            else:
                logger.info(f"   python backfill_address_fields.py --batch-size 20 --limit 10000")
            logger.info("")
            logger.info("üß™ –¢–ï–°–¢–û–í–´–ô –ó–ê–ü–£–°–ö (DRY-RUN):")
            logger.info(f"   python backfill_address_fields.py --batch-size 20 --limit 10 --dry-run")
            logger.info("")
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ü–µ–Ω–∫–µ —Å—Ç–æ–∏–º–æ—Å—Ç–∏: {e}")


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    logger.info("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è DaData API...")
    logger.info("")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º API –ø–ª–∞–Ω
    if not check_api_plan():
        sys.exit(1)
    
    # –û—Ü–µ–Ω–∏–≤–∞–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –æ–±–æ–≥–∞—â–µ–Ω–∏—è
    estimate_enrichment_cost()
    
    logger.info("‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    logger.info("")


if __name__ == '__main__':
    main()
