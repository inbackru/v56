"""
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ nearby –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ñ–ö –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –ø–∞—Ä—Å–µ—Ä–æ–º
"""
import json
import time
from datetime import datetime, timedelta
from app import app, db, ResidentialComplex
import nearby_places


def find_complexes_needing_update(limit=10):
    """
    –ù–∞–π—Ç–∏ –ñ–ö –∫–æ—Ç–æ—Ä—ã–º –Ω—É–∂–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ nearby –¥–∞–Ω–Ω—ã—Ö
    
    Returns:
        List[ResidentialComplex]: –ñ–ö —Ç—Ä–µ–±—É—é—â–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    """
    with app.app_context():
        # –ö—Ä–∏—Ç–µ—Ä–∏–∏ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:
        # 1. –ï—Å—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã (latitude –∏ longitude)
        # 2. –ù–µ—Ç nearby –¥–∞–Ω–Ω—ã—Ö –ò–õ–ò –¥–∞–Ω–Ω—ã–µ —Å—Ç–∞—Ä—à–µ 6 –º–µ—Å—è—Ü–µ–≤
        
        six_months_ago = datetime.utcnow() - timedelta(days=180)
        
        complexes = db.session.query(ResidentialComplex).filter(
            ResidentialComplex.latitude.isnot(None),
            ResidentialComplex.longitude.isnot(None),
            db.or_(
                ResidentialComplex.nearby.is_(None),  # –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö
                ResidentialComplex.nearby_updated_at.is_(None),  # –ù–µ—Ç –¥–∞—Ç—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
                ResidentialComplex.nearby_updated_at < six_months_ago  # –£—Å—Ç–∞—Ä–µ–≤—à–∏–µ –¥–∞–Ω–Ω—ã–µ
            )
        ).limit(limit).all()
        
        return complexes


def update_nearby_for_complex(complex):
    """
    –û–±–Ω–æ–≤–∏—Ç—å nearby –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–¥–Ω–æ–≥–æ –ñ–ö
    
    Args:
        complex: –æ–±—ä–µ–∫—Ç ResidentialComplex
    
    Returns:
        dict: –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    """
    result = {
        'complex_id': complex.id,
        'complex_name': complex.name,
        'success': False,
        'objects_found': 0,
        'error': None
    }
    
    try:
        print(f"üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ nearby –¥–ª—è –ñ–ö: {complex.name}")
        print(f"   –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: {complex.latitude}, {complex.longitude}")
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ OpenStreetMap
        nearby_data = nearby_places.fetch_nearby_places(
            latitude=float(complex.latitude),
            longitude=float(complex.longitude),
            radius_meters=3000  # 3 –∫–º –¥–ª—è –ª—É—á—à–µ–≥–æ –ø–æ–∫—Ä—ã—Ç–∏—è
        )
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã
        total_objects = sum(
            len(nearby_data.get(cat, [])) 
            for cat in ['transport', 'shopping', 'education', 'healthcare', 'sport', 'leisure']
        )
        
        if total_objects > 0:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
            # –í–ê–ñ–ù–û: Re-query –æ–±—ä–µ–∫—Ç —á—Ç–æ–±—ã –æ–Ω –±—ã–ª –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω –∫ —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏
            with app.app_context():
                complex_in_session = db.session.query(ResidentialComplex).get(complex.id)
                if complex_in_session:
                    complex_in_session.nearby = json.dumps(nearby_data, ensure_ascii=False)
                    complex_in_session.nearby_updated_at = datetime.utcnow()
                    db.session.commit()
                    
                    result['success'] = True
                    result['objects_found'] = total_objects
                else:
                    # –†–µ–¥–∫–∏–π —Å–ª—É—á–∞–π: –æ–±—ä–µ–∫—Ç –±—ã–ª —É–¥–∞–ª–µ–Ω –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
                    result['error'] = 'Complex not found in database'
                    print(f"   ‚ö†Ô∏è  –ñ–ö –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î (–≤–æ–∑–º–æ–∂–Ω–æ —É–¥–∞–ª–µ–Ω)")
                    return result
            
            
            print(f"   ‚úÖ –ù–∞–π–¥–µ–Ω–æ {total_objects} –æ–±—ä–µ–∫—Ç–æ–≤")
            print(f"      –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç: {len(nearby_data.get('transport', []))}")
            print(f"      –¢–æ—Ä–≥–æ–≤–ª—è: {len(nearby_data.get('shopping', []))}")
            print(f"      –û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ: {len(nearby_data.get('education', []))}")
            print(f"      –ó–¥—Ä–∞–≤–æ–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ: {len(nearby_data.get('healthcare', []))}")
            print(f"      –°–ø–æ—Ä—Ç: {len(nearby_data.get('sport', []))}")
            print(f"      –î–æ—Å—É–≥: {len(nearby_data.get('leisure', []))}")
        else:
            result['error'] = 'No objects found'
            print(f"   ‚ö†Ô∏è  –û–±—ä–µ–∫—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ —Ä–∞–¥–∏—É—Å–µ 3 –∫–º")
        
    except Exception as e:
        result['error'] = str(e)
        print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")
    
    return result


def process_batch(batch_size=5, delay_between=2):
    """
    –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –ø–∞–∫–µ—Ç –ñ–ö
    
    Args:
        batch_size: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ñ–ö –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
        delay_between: –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ (—Å–µ–∫—É–Ω–¥—ã)
    
    Returns:
        dict: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏
    """
    print("="*70)
    print("  –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ nearby –¥–∞–Ω–Ω—ã—Ö")
    print("="*70)
    print()
    
    # –ù–∞—Ö–æ–¥–∏–º –ñ–ö —Ç—Ä–µ–±—É—é—â–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    complexes = find_complexes_needing_update(limit=batch_size)
    
    if not complexes:
        print("‚úÖ –í—Å–µ –ñ–ö —É–∂–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!")
        return {
            'total': 0,
            'success': 0,
            'failed': 0,
            'objects_total': 0
        }
    
    print(f"üìä –ù–∞–π–¥–µ–Ω–æ –ñ–ö –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {len(complexes)}")
    print()
    
    stats = {
        'total': len(complexes),
        'success': 0,
        'failed': 0,
        'objects_total': 0,
        'results': []
    }
    
    for i, complex in enumerate(complexes, 1):
        print(f"[{i}/{len(complexes)}] –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º: {complex.name}")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º
        result = update_nearby_for_complex(complex)
        stats['results'].append(result)
        
        if result['success']:
            stats['success'] += 1
            stats['objects_total'] += result['objects_found']
        else:
            stats['failed'] += 1
        
        # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ —á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ–≥—Ä—É–∂–∞—Ç—å API
        if i < len(complexes):
            print(f"   ‚è±Ô∏è  –ü–∞—É–∑–∞ {delay_between} —Å–µ–∫...")
            time.sleep(delay_between)
        
        print()
    
    # –ò—Ç–æ–≥–∏
    print("="*70)
    print("  –ò—Ç–æ–≥–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏")
    print("="*70)
    print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ: {stats['success']}")
    print(f"‚ùå –û—à–∏–±–æ–∫: {stats['failed']}")
    print(f"üìä –í—Å–µ–≥–æ –æ–±—ä–µ–∫—Ç–æ–≤ –Ω–∞–π–¥–µ–Ω–æ: {stats['objects_total']}")
    print()
    
    return stats


def update_all_outdated(max_complexes=100, batch_size=5):
    """
    –û–±–Ω–æ–≤–∏—Ç—å –≤—Å–µ —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ –ñ–ö –ø–æ—Ä—Ü–∏—è–º–∏
    
    Args:
        max_complexes: –ú–∞–∫—Å–∏–º—É–º –ñ–ö –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        batch_size: –†–∞–∑–º–µ—Ä –ø–æ—Ä—Ü–∏–∏
    """
    total_stats = {
        'batches': 0,
        'success': 0,
        'failed': 0,
        'objects_total': 0
    }
    
    processed = 0
    
    while processed < max_complexes:
        print(f"\n{'='*70}")
        print(f"  –ü–æ—Ä—Ü–∏—è {total_stats['batches'] + 1}")
        print(f"{'='*70}\n")
        
        stats = process_batch(batch_size=batch_size, delay_between=3)
        
        if stats['total'] == 0:
            # –ë–æ–ª—å—à–µ –Ω–µ—Ç –ñ–ö –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            break
        
        total_stats['batches'] += 1
        total_stats['success'] += stats['success']
        total_stats['failed'] += stats['failed']
        total_stats['objects_total'] += stats['objects_total']
        
        processed += stats['total']
        
        if stats['total'] < batch_size:
            # –ü–æ—Å–ª–µ–¥–Ω—è—è –ø–æ—Ä—Ü–∏—è
            break
    
    # –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
    print("\n" + "="*70)
    print("  –§–ò–ù–ê–õ–¨–ù–´–ô –û–¢–ß–ï–¢")
    print("="*70)
    print(f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –ø–æ—Ä—Ü–∏–π: {total_stats['batches']}")
    print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ: {total_stats['success']} –ñ–ö")
    print(f"‚ùå –û—à–∏–±–æ–∫: {total_stats['failed']} –ñ–ö")
    print(f"üìä –í—Å–µ–≥–æ –æ–±—ä–µ–∫—Ç–æ–≤: {total_stats['objects_total']}")
    print("="*70 + "\n")
    
    return total_stats


# –î–ª—è –∑–∞–ø—É—Å–∫–∞ –≤—Ä—É—á–Ω—É—é
if __name__ == "__main__":
    import sys
    
    if len(sys.argv) > 1 and sys.argv[1] == '--all':
        # –û–±–Ω–æ–≤–∏—Ç—å –≤—Å–µ
        print("–†–µ–∂–∏–º: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Å–µ—Ö —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –ñ–ö")
        update_all_outdated(max_complexes=100, batch_size=5)
    else:
        # –û–±–Ω–æ–≤–∏—Ç—å –æ–¥–Ω—É –ø–æ—Ä—Ü–∏—é
        print("–†–µ–∂–∏–º: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–¥–Ω–æ–π –ø–æ—Ä—Ü–∏–∏ (5 –ñ–ö)")
        print("–î–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤—Å–µ—Ö –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ: python nearby_auto_updater.py --all")
        print()
        process_batch(batch_size=5, delay_between=2)
