#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç —Ä–∞–π–æ–Ω–æ–≤ –∏ —É–ª–∏—Ü –ö—Ä–∞—Å–Ω–æ–¥–∞—Ä–∞ —á–µ—Ä–µ–∑ Nominatim API
–°–æ–±–ª—é–¥–∞–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ: 1 –∑–∞–ø—Ä–æ—Å –≤ —Å–µ–∫—É–Ω–¥—É
"""

import requests
import time
import json
from datetime import datetime
from app import app, db
from models import District, Street

# Nominatim API settings
NOMINATIM_BASE_URL = "https://nominatim.openstreetmap.org/search"
REQUEST_DELAY = 1.0  # 1 —Å–µ–∫—É–Ω–¥–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
TIMEOUT = 10  # —Ç–∞–π–º–∞—É—Ç –¥–ª—è HTTP –∑–∞–ø—Ä–æ—Å–æ–≤

# User Agent –¥–ª—è Nominatim (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä)
USER_AGENT = "InBack Real Estate App / 1.0 (https://inback.ru; info@inback.ru)"

# –°–ø–∏—Å–æ–∫ —Ä–∞–π–æ–Ω–æ–≤ –ö—Ä–∞—Å–Ω–æ–¥–∞—Ä–∞ (–∏–∑ app.py)
KRASNODAR_DISTRICTS = [
    ('–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π', 'tsentralnyy'),
    ('–ó–∞–ø–∞–¥–Ω—ã–π', 'zapadny'), 
    ('–ö–∞—Ä–∞—Å—É–Ω—Å–∫–∏–π', 'karasunsky'),
    ('–ü—Ä–∏–∫—É–±–∞–Ω—Å–∫–∏–π', 'prikubansky'),
    ('–§–µ—Å—Ç–∏–≤–∞–ª—å–Ω—ã–π', 'festivalny'),
    ('–Æ–±–∏–ª–µ–π–Ω—ã–π', 'yubileynyy'),
    ('–ì–∏–¥—Ä–æ—Å—Ç—Ä–æ–∏—Ç–µ–ª–µ–π', 'gidrostroitelei'),
    ('–°–æ–ª–Ω–µ—á–Ω—ã–π', 'solnechny'),
    ('–ü–∞–Ω–æ—Ä–∞–º–∞', 'panorama'),
    ('–ú—É–∑—ã–∫–∞–ª—å–Ω—ã–π', 'muzykalnyy'),
    ('9-–π –∫–∏–ª–æ–º–µ—Ç—Ä', '9-y-kilometr'),
    ('40 –ª–µ—Ç –ü–æ–±–µ–¥—ã', '40-let-pobedy'),
    ('–ê–≤–∏–∞–≥–æ—Ä–æ–¥–æ–∫', 'aviagorodok'),
    ('–ê–≤—Ä–æ—Ä–∞', 'avrora'),
    ('–ë–∞—Å–∫–µ—Ç –•–æ–ª–ª', 'basket-hall'),
    ('–ë–µ—Ä–µ–∑–æ–≤—ã–π', 'berezovy'),
    ('–ö–æ–º—Å–æ–º–æ–ª—å—Å–∫–∏–π', 'komsomolsky')
]

def get_coordinates(location_name, location_type="district"):
    """
    –ü–æ–ª—É—á–∏—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ª–æ–∫–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ Nominatim API
    
    Args:
        location_name (str): –ù–∞–∑–≤–∞–Ω–∏–µ –ª–æ–∫–∞—Ü–∏–∏
        location_type (str): –¢–∏–ø –ª–æ–∫–∞—Ü–∏–∏ ("district" –∏–ª–∏ "street")
    
    Returns:
        dict: {"lat": float, "lon": float} –∏–ª–∏ None –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
    """
    print(f"üîç –ü–æ–∏—Å–∫ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –¥–ª—è: {location_name} ({location_type})")
    
    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞
    if location_type == "district":
        query = f"{location_name} —Ä–∞–π–æ–Ω –ö—Ä–∞—Å–Ω–æ–¥–∞—Ä"
        # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –ø–æ–∏—Å–∫–∞
        alternative_queries = [
            f"{location_name} –º–∏–∫—Ä–æ—Ä–∞–π–æ–Ω –ö—Ä–∞—Å–Ω–æ–¥–∞—Ä",
            f"{location_name} –ö—Ä–∞—Å–Ω–æ–¥–∞—Ä",
            f"–ö—Ä–∞—Å–Ω–æ–¥–∞—Ä {location_name}"
        ]
    else:  # street
        query = f"{location_name} —É–ª–∏—Ü–∞ –ö—Ä–∞—Å–Ω–æ–¥–∞—Ä"
        alternative_queries = [
            f"—É–ª–∏—Ü–∞ {location_name} –ö—Ä–∞—Å–Ω–æ–¥–∞—Ä",
            f"{location_name} –ö—Ä–∞—Å–Ω–æ–¥–∞—Ä –ö—Ä–∞—Å–Ω–æ–¥–∞—Ä—Å–∫–∏–π –∫—Ä–∞–π"
        ]
    
    # –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–∏—Å–∫–∞ —Å –æ—Å–Ω–æ–≤–Ω—ã–º –∑–∞–ø—Ä–æ—Å–æ–º
    coords = _search_nominatim(query)
    if coords:
        return coords
    
    # –ü–æ–ø—ã—Ç–∫–∞ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
    for alt_query in alternative_queries:
        print(f"  üìã –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –∑–∞–ø—Ä–æ—Å: {alt_query}")
        time.sleep(REQUEST_DELAY)  # –ñ–¥–µ–º –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –∑–∞–ø—Ä–æ—Å–æ–º
        coords = _search_nominatim(alt_query)
        if coords:
            return coords
    
    print(f"  ‚ùå –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è: {location_name}")
    return None

def _search_nominatim(query):
    """
    –í—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å –∫ Nominatim API
    
    Args:
        query (str): –ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
    
    Returns:
        dict: {"lat": float, "lon": float} –∏–ª–∏ None
    """
    params = {
        'q': query,
        'format': 'json',
        'limit': 5,  # –ü–æ–ª—É—á–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ª—É—á—à–µ–≥–æ
        'countrycodes': 'ru',  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –ø–æ–∏—Å–∫ –†–æ—Å—Å–∏–µ–π
        'addressdetails': 1,
        'bounded': 1,
        'viewbox': '38.8,44.9,39.1,45.1',  # –ü—Ä–∏–º–µ—Ä–Ω—ã–µ –≥—Ä–∞–Ω–∏—Ü—ã –ö—Ä–∞—Å–Ω–æ–¥–∞—Ä–∞
    }
    
    headers = {
        'User-Agent': USER_AGENT
    }
    
    try:
        response = requests.get(
            NOMINATIM_BASE_URL,
            params=params,
            headers=headers,
            timeout=TIMEOUT
        )
        response.raise_for_status()
        
        results = response.json()
        
        if not results:
            return None
        
        # –í—ã–±–∏—Ä–∞–µ–º –ª—É—á—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        best_result = None
        for result in results:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∫ –ö—Ä–∞—Å–Ω–æ–¥–∞—Ä—É
            address = result.get('address', {})
            city = address.get('city', '').lower()
            town = address.get('town', '').lower()
            
            if '–∫—Ä–∞—Å–Ω–æ–¥–∞—Ä' in city or 'krasnodar' in city or '–∫—Ä–∞—Å–Ω–æ–¥–∞—Ä' in town:
                best_result = result
                break
        
        if best_result:
            lat = float(best_result['lat'])
            lon = float(best_result['lon'])
            display_name = best_result.get('display_name', '')
            print(f"  ‚úÖ –ù–∞–π–¥–µ–Ω–æ: {lat:.6f}, {lon:.6f} - {display_name}")
            return {'lat': lat, 'lon': lon}
    
    except requests.exceptions.RequestException as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞ HTTP –∑–∞–ø—Ä–æ—Å–∞: {e}")
    except (ValueError, KeyError) as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ—Ç–≤–µ—Ç–∞: {e}")
    except Exception as e:
        print(f"  ‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
    
    return None

def update_district_coordinates():
    """–û–±–Ω–æ–≤–∏—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤—Å–µ—Ö —Ä–∞–π–æ–Ω–æ–≤"""
    print("üèòÔ∏è  –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç —Ä–∞–π–æ–Ω–æ–≤...")
    updated_count = 0
    
    with app.app_context():
        for district_name, district_slug in KRASNODAR_DISTRICTS:
            district = District.query.filter_by(slug=district_slug).first()
            
            if not district:
                # –°–æ–∑–¥–∞–µ–º —Ä–∞–π–æ–Ω –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
                print(f"  üìç –°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞–π–æ–Ω–∞: {district_name}")
                district = District(name=district_name, slug=district_slug)
                db.session.add(district)
                db.session.commit()
            
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –µ—Å–ª–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —É–∂–µ –µ—Å—Ç—å
            if district.latitude and district.longitude:
                print(f"  ‚è© –£ —Ä–∞–π–æ–Ω–∞ {district_name} —É–∂–µ –µ—Å—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: {district.latitude:.6f}, {district.longitude:.6f}")
                continue
            
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
            coords = get_coordinates(district_name, "district")
            
            if coords:
                district.latitude = coords['lat']
                district.longitude = coords['lon']
                district.updated_at = datetime.utcnow()
                
                try:
                    db.session.commit()
                    updated_count += 1
                    print(f"  ‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω —Ä–∞–π–æ–Ω: {district_name} -> {coords['lat']:.6f}, {coords['lon']:.6f}")
                except Exception as e:
                    print(f"  ‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–∞–π–æ–Ω–∞ {district_name}: {e}")
                    db.session.rollback()
            else:
                print(f"  ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–ª—è —Ä–∞–π–æ–Ω–∞: {district_name}")
            
            # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
            if coords:  # –¢–æ–ª—å–∫–æ –µ—Å–ª–∏ –±—ã–ª –∑–∞–ø—Ä–æ—Å –∫ API
                time.sleep(REQUEST_DELAY)
    
    print(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ —Ä–∞–π–æ–Ω–æ–≤: {updated_count}")

def update_street_coordinates():
    """–û–±–Ω–æ–≤–∏—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —É–ª–∏—Ü –∏–∑ —Ñ—É–Ω–∫—Ü–∏–∏ load_streets"""
    print("üõ£Ô∏è  –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç —É–ª–∏—Ü...")
    
    updated_count = 0
    
    with app.app_context():
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é load_streets –∏–∑ app.py
        from app import load_streets
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ–± —É–ª–∏—Ü–∞—Ö  
        try:
            streets_data = load_streets()
            print(f"  üìÇ –ó–∞–≥—Ä—É–∂–µ–Ω–æ —É–ª–∏—Ü: {len(streets_data)}")
        except Exception as e:
            print(f"  ‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –æ–± —É–ª–∏—Ü–∞—Ö: {e}")
            return
        
        if not streets_data:
            print("  ‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ–± —É–ª–∏—Ü–∞—Ö –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏")
            return
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 20 —É–ª–∏—Ü –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        sample_streets = streets_data[:20] if len(streets_data) > 20 else streets_data
        total_streets = len(sample_streets)
        
        print(f"  üìä –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º {total_streets} —É–ª–∏—Ü –∏–∑ {len(streets_data)} (–ø–µ—Ä–≤—ã–µ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)")
        
        for i, street_data in enumerate(sample_streets, 1):
            street_name = street_data.get('name', '').strip()
            
            if not street_name:
                continue
                
            print(f"  üìç [{i}/{total_streets}] –û–±—Ä–∞–±–æ—Ç–∫–∞ —É–ª–∏—Ü—ã: {street_name}")
            
            # –ù–∞–π—Ç–∏ –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å —É–ª–∏—Ü—É –≤ –±–∞–∑–µ
            street = Street.query.filter_by(name=street_name).first()
            if not street:
                # –°–æ–∑–¥–∞–µ–º slug –¥–ª—è –Ω–æ–≤–æ–π —É–ª–∏—Ü—ã
                street_slug = street_name.lower().replace(' ', '-').replace('.', '').replace('(', '').replace(')', '').replace(',', '')
                street = Street(name=street_name, slug=street_slug)
                db.session.add(street)
                db.session.commit()
            
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –µ—Å–ª–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —É–∂–µ –µ—Å—Ç—å
            if street.latitude and street.longitude:
                print(f"    ‚è© –£ —É–ª–∏—Ü—ã —É–∂–µ –µ—Å—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: {street.latitude:.6f}, {street.longitude:.6f}")
                continue
            
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
            coords = get_coordinates(street_name, "street")
            
            if coords:
                street.latitude = coords['lat']
                street.longitude = coords['lon']
                street.updated_at = datetime.utcnow()
                
                try:
                    db.session.commit()
                    updated_count += 1
                    print(f"    ‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∞ —É–ª–∏—Ü–∞: {street_name} -> {coords['lat']:.6f}, {coords['lon']:.6f}")
                except Exception as e:
                    print(f"    ‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —É–ª–∏—Ü—ã {street_name}: {e}")
                    db.session.rollback()
            else:
                print(f"    ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–ª—è —É–ª–∏—Ü—ã: {street_name}")
            
            # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
            time.sleep(REQUEST_DELAY)
    
    print(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ —É–ª–∏—Ü: {updated_count}")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –¥–ª—è —Ä–∞–π–æ–Ω–æ–≤ –∏ —É–ª–∏—Ü")
    print("‚è±Ô∏è  –£—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ Nominatim: 1 –∑–∞–ø—Ä–æ—Å –≤ —Å–µ–∫—É–Ω–¥—É")
    print("=" * 60)
    
    start_time = time.time()
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Ä–∞–π–æ–Ω–æ–≤
    update_district_coordinates()
    print()
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —É–ª–∏—Ü (–ø–µ—Ä–≤—ã–µ 20 –¥–ª—è —Ç–µ—Å—Ç–∞)
    update_street_coordinates()
    print()
    
    # –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    end_time = time.time()
    duration = end_time - start_time
    
    print("=" * 60)
    print(f"üéâ –°–∫—Ä–∏–ø—Ç –∑–∞–≤–µ—Ä—à–µ–Ω –∑–∞ {duration:.1f} —Å–µ–∫—É–Ω–¥")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    with app.app_context():
        districts_with_coords = District.query.filter(
            District.latitude.isnot(None),
            District.longitude.isnot(None)
        ).count()
        
        streets_with_coords = Street.query.filter(
            Street.latitude.isnot(None),
            Street.longitude.isnot(None)
        ).count()
        
        print(f"üìä –†–∞–π–æ–Ω–æ–≤ —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏: {districts_with_coords}")
        print(f"üìä –£–ª–∏—Ü —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏: {streets_with_coords}")

if __name__ == "__main__":
    main()