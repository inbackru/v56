#!/usr/bin/env python3
"""
–§–∏–Ω–∞–ª—å–Ω—ã–π –∏–º–ø–æ—Ä—Ç –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –¥–∞–Ω–Ω—ã—Ö
"""

import pandas as pd
import numpy as np
from app import app, db
from models import *
from datetime import datetime

def safe_date(date_str):
    if pd.isna(date_str) or date_str == '':
        return datetime.utcnow()
    if isinstance(date_str, datetime):
        return date_str
    try:
        date_str = str(date_str)
        if 'GMT' in date_str:
            date_str = date_str.split(' GMT')[0]
        return datetime.strptime(date_str, '%a %b %d %Y %H:%M:%S')
    except:
        return datetime.utcnow()

def main():
    with app.app_context():
        print("üöÄ –§–ò–ù–ê–õ–¨–ù–´–ô –ò–ú–ü–û–†–¢ –û–°–¢–ê–í–®–ò–•–°–Ø –î–ê–ù–ù–´–•")
        
        # –ò–º–ø–æ—Ä—Ç –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤ (FavoriteProperty)
        print("\n=== –ò–ó–ë–†–ê–ù–ù–´–ï –û–ë–™–ï–ö–¢–´ ===")
        try:
            df = pd.read_excel('attached_assets/favorite_properties (3)_1755342720991.xlsx')
            imported = 0
            
            for _, row in df.iterrows():
                fav_id = int(row['id']) if pd.notna(row['id']) else 0
                user_id = int(row['user_id']) if pd.notna(row['user_id']) else 0
                property_name = str(row['property_name']) if pd.notna(row['property_name']) else ''
                
                if fav_id <= 0 or user_id <= 0 or not property_name:
                    continue
                
                if FavoriteProperty.query.filter_by(id=fav_id).first():
                    continue
                
                favorite = FavoriteProperty(
                    id=fav_id,
                    user_id=user_id,
                    property_id=str(row['property_id']) if pd.notna(row['property_id']) else None,
                    property_name=property_name,
                    property_type=str(row['property_type']) if pd.notna(row['property_type']) else None,
                    property_size=float(row['property_size']) if pd.notna(row['property_size']) else None,
                    property_price=int(row['property_price']) if pd.notna(row['property_price']) else None,
                    complex_name=str(row['complex_name']) if pd.notna(row['complex_name']) else None,
                    developer_name=str(row['developer_name']) if pd.notna(row['developer_name']) else None,
                    property_image=str(row['property_image']) if pd.notna(row['property_image']) else None,
                    property_url=str(row['property_url']) if pd.notna(row['property_url']) else None,
                    cashback_amount=int(row['cashback_amount']) if pd.notna(row['cashback_amount']) else None,
                    cashback_percent=float(row['cashback_percent']) if pd.notna(row['cashback_percent']) else None,
                    created_at=safe_date(row.get('created_at'))
                )
                
                db.session.add(favorite)
                imported += 1
            
            db.session.commit()
            print(f"‚úÖ –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤: {imported}")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö: {e}")
            db.session.rollback()
        
        # –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        print("\n" + "="*50)
        print("üìä –ü–û–õ–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ë–ê–ó–´ –î–ê–ù–ù–´–•")
        print("="*50)
        
        stats = {
            '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏': User.query.count(),
            '–ó–∞—Å—Ç—Ä–æ–π—â–∏–∫–∏': Developer.query.count(), 
            '–ñ–∏–ª—ã–µ –∫–æ–º–ø–ª–µ–∫—Å—ã': ResidentialComplex.query.count(),
            '–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –±–ª–æ–≥–∞': BlogCategory.query.count(),
            '–£–ª–∏—Ü—ã': Street.query.count(),
            '–ú–µ–Ω–µ–¥–∂–µ—Ä—ã': Manager.query.count(),
            '–ò–∑–±—Ä–∞–Ω–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã': FavoriteProperty.query.count(),
            '–ó–∞–ø—Ä–æ—Å—ã –∑–≤–æ–Ω–∫–æ–≤': CallbackRequest.query.count()
        }
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–æ–¥–µ–ª–∏ –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
        try:
            stats['–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã'] = Admin.query.count()
        except:
            stats['–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã'] = '–º–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'
            
        try:
            stats['–°—Ç–∞—Ç—å–∏ –±–ª–æ–≥–∞'] = BlogArticle.query.count()
        except:
            stats['–°—Ç–∞—Ç—å–∏ –±–ª–æ–≥–∞'] = '–º–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'
        
        for key, value in stats.items():
            emoji = "‚úÖ" if isinstance(value, int) and value > 0 else "‚ö†Ô∏è"
            print(f"{emoji} {key}: {value}")
        
        print("\nüéâ –ò–ú–ü–û–†–¢ –í–°–ï–• –î–ê–ù–ù–´–• –ó–ê–í–ï–†–®–ï–ù!")
        print("üìà –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª–Ω–æ—Å—Ç—å—é –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏!")

if __name__ == "__main__":
    main()