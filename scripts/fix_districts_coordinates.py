#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç —Ä–∞–π–æ–Ω–æ–≤ –ö—Ä–∞—Å–Ω–æ–¥–∞—Ä–∞ —á–µ—Ä–µ–∑ Nominatim API
–ó–∞–ø—Ä–æ—Å: 1 –≤ —Å–µ–∫—É–Ω–¥—É (–∫–∞–∫ —Ç—Ä–µ–±—É–µ—Ç Nominatim)
"""

import requests
import time
import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from app import app, db
from models import District

# –ù–æ–º–∏–Ω–∞—Ç–∏–º API —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º 1 –∑–∞–ø—Ä–æ—Å –≤ —Å–µ–∫—É–Ω–¥—É
NOMINATIM_BASE_URL = "https://nominatim.openstreetmap.org/search"
USER_AGENT = "InBack Real Estate Platform/1.0"

def geocode_district(district_name):
    """–ü–æ–ª—É—á–∏—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Ä–∞–π–æ–Ω–∞ —á–µ—Ä–µ–∑ Nominatim API"""
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ä–∞–π–æ–Ω–∞ –≤ –ö—Ä–∞—Å–Ω–æ–¥–∞—Ä–µ
    queries = [
        f"{district_name}, –ö—Ä–∞—Å–Ω–æ–¥–∞—Ä, –†–æ—Å—Å–∏—è",
        f"–º–∏–∫—Ä–æ—Ä–∞–π–æ–Ω {district_name}, –ö—Ä–∞—Å–Ω–æ–¥–∞—Ä", 
        f"{district_name}, Krasnodar, Russia",
        f"{district_name}, –ö—Ä–∞—Å–Ω–æ–¥–∞—Ä"
    ]
    
    for query in queries:
        try:
            params = {
                'q': query,
                'format': 'json',
                'limit': 1,
                'countrycodes': 'ru',
                'bounded': 1,
                'viewbox': '38.8,44.9,39.2,45.2',  # –ö—Ä–∞—Å–Ω–æ–¥–∞—Ä bbox
                'addressdetails': 1
            }
            
            headers = {
                'User-Agent': USER_AGENT
            }
            
            print(f"üîç –ü–æ–∏—Å–∫: {query}")
            response = requests.get(NOMINATIM_BASE_URL, params=params, headers=headers)
            
            if response.status_code == 200:
                results = response.json()
                if results:
                    result = results[0]
                    lat = float(result['lat'])
                    lon = float(result['lon'])
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –ö—Ä–∞—Å–Ω–æ–¥–∞—Ä–∞
                    if 44.9 <= lat <= 45.2 and 38.8 <= lon <= 39.2:
                        print(f"‚úÖ –ù–∞–π–¥–µ–Ω: {lat}, {lon}")
                        return lat, lon
                    else:
                        print(f"‚ö†Ô∏è  –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤–Ω–µ –ö—Ä–∞—Å–Ω–æ–¥–∞—Ä–∞: {lat}, {lon}")
            
            # –ó–∞–¥–µ—Ä–∂–∫–∞ 1 —Å–µ–∫—É–Ω–¥–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
            time.sleep(1)
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è {query}: {e}")
            time.sleep(1)
    
    print(f"‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω: {district_name}")
    return None, None

def fix_duplicate_coordinates():
    """–ò—Å–ø—Ä–∞–≤–ª—è–µ–º –¥—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã"""
    
    with app.app_context():
        print("üöÄ –ó–∞–ø—É—Å–∫ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç —Ä–∞–π–æ–Ω–æ–≤...")
        
        # –ù–∞—Ö–æ–¥–∏–º —Ä–∞–π–æ–Ω—ã —Å –¥—É–±–ª–∏—Ä—É—é—â–∏–º–∏—Å—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏
        duplicates = db.session.execute("""
            SELECT latitude, longitude, COUNT(*) as count,
                   array_agg(id) as district_ids,
                   array_agg(name) as district_names
            FROM districts 
            WHERE latitude IS NOT NULL AND longitude IS NOT NULL
            GROUP BY latitude, longitude 
            HAVING COUNT(*) > 1
            ORDER BY count DESC
        """).fetchall()
        
        print(f"üìç –ù–∞–π–¥–µ–Ω–æ {len(duplicates)} –≥—Ä—É–ø–ø –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö—Å—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç")
        
        # –¢–∞–∫–∂–µ –∏—Å–ø—Ä–∞–≤–ª—è–µ–º —è–≤–Ω–æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã (–∞—ç—Ä–æ–ø–æ—Ä—Ç)
        airport_coords = [45.127581, 39.36184]  # –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∞—ç—Ä–æ–ø–æ—Ä—Ç–∞
        airport_districts = District.query.filter_by(
            latitude=airport_coords[0], 
            longitude=airport_coords[1]
        ).all()
        
        print(f"‚úàÔ∏è  –ù–∞–π–¥–µ–Ω–æ {len(airport_districts)} —Ä–∞–π–æ–Ω–æ–≤ —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏ –∞—ç—Ä–æ–ø–æ—Ä—Ç–∞")
        
        # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∞—ç—Ä–æ–ø–æ—Ä—Ç–∞
        for district in airport_districts:
            if district.name not in ["–†–∞–π–æ–Ω –∞—ç—Ä–æ–ø–æ—Ä—Ç–∞", "–ü–∞—à–∫–æ–≤—Å–∫–∏–π"]:  # –≠—Ç–∏ –º–æ–≥—É—Ç –±—ã—Ç—å —Ä—è–¥–æ–º —Å –∞—ç—Ä–æ–ø–æ—Ä—Ç–æ–º
                print(f"\nüîÑ –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Ä–∞–π–æ–Ω: {district.name}")
                
                lat, lon = geocode_district(district.name)
                if lat and lon:
                    district.latitude = lat
                    district.longitude = lon
                    print(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω {district.name}: {lat}, {lon}")
                else:
                    print(f"‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ {district.name}")
        
        # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –¥—Ä—É–≥–∏–µ –¥—É–±–ª–∏–∫–∞—Ç—ã (–æ—Å—Ç–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—ã–π, –æ—Å—Ç–∞–ª—å–Ω—ã–º –∏—â–µ–º –Ω–æ–≤—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã)
        for dup in duplicates:
            if dup.latitude not in airport_coords:  # –£–∂–µ –∏—Å–ø—Ä–∞–≤–∏–ª–∏ –∞—ç—Ä–æ–ø–æ—Ä—Ç –≤—ã—à–µ
                district_ids = dup.district_ids
                district_names = dup.district_names
                
                print(f"\nüìç –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –Ω–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö {dup.latitude}, {dup.longitude}:")
                print(f"   –†–∞–π–æ–Ω—ã: {', '.join(district_names)}")
                
                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–≤—ã–π —Ä–∞–π–æ–Ω, –∏—Å–ø—Ä–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ
                for i in range(1, len(district_ids)):
                    district = District.query.get(district_ids[i])
                    if district:
                        print(f"\nüîÑ –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç: {district.name}")
                        lat, lon = geocode_district(district.name)
                        if lat and lon:
                            district.latitude = lat
                            district.longitude = lon
                            print(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω {district.name}: {lat}, {lon}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        try:
            db.session.commit()
            print("\nüéâ –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!")
        except Exception as e:
            print(f"\n‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")
            db.session.rollback()

if __name__ == "__main__":
    fix_duplicate_coordinates()