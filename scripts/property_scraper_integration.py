#!/usr/bin/env python3
"""
–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –ø–∞—Ä—Å–µ—Ä–∞ –∑–∞—Å—Ç—Ä–æ–π—â–∏–∫–æ–≤ —Å —Å–∏—Å—Ç–µ–º–æ–π InBack
–û–±–Ω–æ–≤–ª—è–µ—Ç –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∞–∫—Ç—É–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –æ –ñ–ö –∏ –∫–≤–∞—Ä—Ç–∏—Ä–∞—Ö
"""

import json
import os
from datetime import datetime
from typing import Dict, List, Optional, Tuple
from web_scraper import KrasnodarDeveloperScraper

# Database integration
try:
    from app import app, db
    from models import Developer, ResidentialComplex, District
except ImportError as e:
    print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥–µ–ª–µ–π: {e}")
    app, db = None, None

class PropertyScraperIntegration:
    """
    –ö–ª–∞—Å—Å –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø–∞—Ä—Å–µ—Ä–∞ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö InBack
    """
    
    def __init__(self):
        self.scraper = KrasnodarDeveloperScraper()
        
        # –ú–∞–ø–ø–∏–Ω–≥ —Ä–∞–π–æ–Ω–æ–≤ –ö—Ä–∞—Å–Ω–æ–¥–∞—Ä–∞ (–º–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ä–∏—Ç—å)
        self.district_mapping = {
            '—Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π': '–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π —Ä–∞–π–æ–Ω',
            '–∑–∞–ø–∞–¥–Ω—ã–π': '–ó–∞–ø–∞–¥–Ω—ã–π —Ä–∞–π–æ–Ω', 
            '–∫–∞—Ä–∞—Å—É–Ω—Å–∫–∏–π': '–ö–∞—Ä–∞—Å—É–Ω—Å–∫–∏–π –æ–∫—Ä—É–≥',
            '–ø—Ä–∏–∫—É–±–∞–Ω—Å–∫–∏–π': '–ü—Ä–∏–∫—É–±–∞–Ω—Å–∫–∏–π –æ–∫—Ä—É–≥',
            '–ø–µ—Ä–≤–æ–º–∞–π—Å–∫–∏–π': '–ü–µ—Ä–≤–æ–º–∞–π—Å–∫–∏–π –æ–∫—Ä—É–≥',
            '–∫–æ–º—Å–æ–º–æ–ª—å—Å–∫–∏–π': '–û–∫—Ç—è–±—Ä—å—Å–∫–∏–π –æ–∫—Ä—É–≥',
        }
    
    def create_property_model_if_missing(self):
        """
        –°–æ–∑–¥–∞–µ—Ç –º–æ–¥–µ–ª—å Property –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        """
        if not db:
            print("‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
            return False
            
        try:
            with app.app_context():
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–∞–±–ª–∏—Ü–∞ properties
                from sqlalchemy import inspect
                inspector = inspect(db.engine)
                
                if 'properties' not in inspector.get_table_names():
                    print("üèóÔ∏è  –°–æ–∑–¥–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ Property...")
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º –º–æ–¥–µ–ª—å Property –≤ models.py
                    property_model_code = '''

class Property(db.Model):
    """Property/Apartment model for real estate listings"""
    __tablename__ = 'properties'
    __table_args__ = {"extend_existing": True}
    
    id = db.Column(db.Integer, primary_key=True)
    
    # Basic property information
    title = db.Column(db.String(200), nullable=False)
    slug = db.Column(db.String(200), nullable=False, unique=True)
    description = db.Column(db.Text, nullable=True)
    
    # Property details
    rooms = db.Column(db.Integer, nullable=True)  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–Ω–∞—Ç (0 –¥–ª—è —Å—Ç—É–¥–∏–∏)
    area = db.Column(db.Float, nullable=True)  # –ü–ª–æ—â–∞–¥—å –≤ –º¬≤
    floor = db.Column(db.Integer, nullable=True)  # –≠—Ç–∞–∂
    total_floors = db.Column(db.Integer, nullable=True)  # –í—Å–µ–≥–æ —ç—Ç–∞–∂–µ–π –≤ –¥–æ–º–µ
    
    # Pricing
    price = db.Column(db.Integer, nullable=True)  # –¶–µ–Ω–∞ –≤ —Ä—É–±–ª—è—Ö
    price_per_sqm = db.Column(db.Integer, nullable=True)  # –¶–µ–Ω–∞ –∑–∞ –º¬≤
    
    # Location and relations
    developer_id = db.Column(db.Integer, db.ForeignKey('developers.id'), nullable=True)
    complex_id = db.Column(db.Integer, db.ForeignKey('residential_complexes.id'), nullable=True)
    district_id = db.Column(db.Integer, db.ForeignKey('districts.id'), nullable=True)
    
    # Status and availability
    status = db.Column(db.String(50), default='available')  # available, sold, reserved
    is_active = db.Column(db.Boolean, default=True)
    
    # Images and media
    main_image = db.Column(db.String(300), nullable=True)
    gallery_images = db.Column(db.Text, nullable=True)  # JSON array of image URLs
    
    # Technical details
    building_type = db.Column(db.String(100), nullable=True)  # –º–æ–Ω–æ–ª–∏—Ç, –∫–∏—Ä–ø–∏—á, –ø–∞–Ω–µ–ª—å
    ceiling_height = db.Column(db.Float, nullable=True)  # –í—ã—Å–æ—Ç–∞ –ø–æ—Ç–æ–ª–∫–æ–≤
    
    # Coordinates for maps
    latitude = db.Column(db.Float, nullable=True)
    longitude = db.Column(db.Float, nullable=True)
    
    # Metadata
    source_url = db.Column(db.String(300), nullable=True)  # URL –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    scraped_at = db.Column(db.DateTime, nullable=True)  # –î–∞—Ç–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞
    created_at = db.Column(db.DateTime, default=datetime.utcnow)
    updated_at = db.Column(db.DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)
    
    # Relationships
    developer = db.relationship('Developer', backref='properties')
    complex = db.relationship('ResidentialComplex', backref='properties')
    district = db.relationship('District', backref='properties')
    
    def __repr__(self):
        return f'<Property {self.title}>'
    
    @property
    def formatted_price(self):
        if self.price:
            if self.price >= 1000000:
                return f"{self.price / 1000000:.1f} –º–ª–Ω ‚ÇΩ"
            elif self.price >= 1000:
                return f"{self.price / 1000:.0f} —Ç—ã—Å ‚ÇΩ"
            return f"{self.price} ‚ÇΩ"
        return "–¶–µ–Ω–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞"
    
    @property
    def room_description(self):
        if self.rooms == 0:
            return "–°—Ç—É–¥–∏—è"
        elif self.rooms == 1:
            return "1-–∫–æ–º–Ω–∞—Ç–Ω–∞—è"
        elif self.rooms in [2, 3, 4]:
            return f"{self.rooms}-–∫–æ–º–Ω–∞—Ç–Ω–∞—è"
        elif self.rooms:
            return f"{self.rooms}-–∫–æ–º–Ω."
        return "–¢–∏–ø –Ω–µ —É–∫–∞–∑–∞–Ω"
'''
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º –º–æ–¥–µ–ª—å –≤ models.py
                    with open('models.py', 'a', encoding='utf-8') as f:
                        f.write(property_model_code)
                    
                    # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã
                    db.create_all()
                    print("‚úÖ –ú–æ–¥–µ–ª—å Property —Å–æ–∑–¥–∞–Ω–∞")
                    return True
                else:
                    print("‚úÖ –ú–æ–¥–µ–ª—å Property —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
                    return True
                    
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –º–æ–¥–µ–ª–∏ Property: {e}")
            return False
    
    def ensure_developer_exists(self, name: str, website: str = None) -> Optional[int]:
        """
        –£–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ –∑–∞—Å—Ç—Ä–æ–π—â–∏–∫ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        """
        if not db:
            return None
            
        try:
            with app.app_context():
                developer = Developer.query.filter_by(name=name).first()
                
                if not developer:
                    slug = name.lower().replace(' ', '-').replace('(', '').replace(')', '')
                    
                    developer = Developer(
                        name=name,
                        slug=slug,
                        website=website or '',
                        description=f'–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–Ω –ø–∞—Ä—Å–µ—Ä–æ–º {datetime.now().strftime("%d.%m.%Y")}',
                        created_at=datetime.utcnow()
                    )
                    
                    db.session.add(developer)
                    db.session.commit()
                    print(f"‚úÖ –°–æ–∑–¥–∞–Ω –∑–∞—Å—Ç—Ä–æ–π—â–∏–∫: {name}")
                
                return developer.id
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞—Å—Ç—Ä–æ–π—â–∏–∫–∞ {name}: {e}")
            return None
    
    def ensure_complex_exists(self, name: str, developer_id: int, district_id: int = None) -> Optional[int]:
        """
        –£–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ –ñ–ö —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        """
        if not db:
            return None
            
        try:
            with app.app_context():
                complex_obj = ResidentialComplex.query.filter_by(
                    name=name, 
                    developer_id=developer_id
                ).first()
                
                if not complex_obj:
                    slug = name.lower().replace(' ', '-').replace('¬´', '').replace('¬ª', '').replace('"', '')
                    
                    complex_obj = ResidentialComplex(
                        name=name,
                        slug=slug,
                        developer_id=developer_id,
                        district_id=district_id,
                        cashback_rate=5.0  # –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                    )
                    
                    db.session.add(complex_obj)
                    db.session.commit()
                    print(f"‚úÖ –°–æ–∑–¥–∞–Ω –ñ–ö: {name}")
                
                return complex_obj.id
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ñ–ö {name}: {e}")
            return None
    
    def determine_district_id(self, text: str) -> Optional[int]:
        """
        –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ä–∞–π–æ–Ω –ø–æ —Ç–µ–∫—Å—Ç—É (–ø—Ä–∏–º–∏—Ç–∏–≤–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ)
        """
        if not db:
            return None
            
        text_lower = text.lower()
        
        for keyword, district_name in self.district_mapping.items():
            if keyword in text_lower:
                try:
                    with app.app_context():
                        from models import District
                        district = District.query.filter_by(name=district_name).first()
                        if district:
                            return district.id
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Ä–∞–π–æ–Ω–∞: {e}")
        
        return None
    
    def integrate_scraped_data(self, scraped_data: Dict) -> Dict[str, int]:
        """
        –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å–ø–∞—Ä—Å–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
        """
        stats = {
            'developers_created': 0,
            'complexes_created': 0, 
            'apartments_created': 0,
            'errors': 0
        }
        
        if not db:
            print("‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
            return stats
        
        # –°–æ–∑–¥–∞–µ–º –º–æ–¥–µ–ª—å Property –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        self.create_property_model_if_missing()
        
        try:
            with app.app_context():
                # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º Property –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è
                from models import Property
                
                for dev_code, projects in scraped_data.items():
                    dev_info = self.scraper.developers.get(dev_code, {})
                    dev_name = dev_info.get('name', dev_code)
                    dev_website = dev_info.get('website', '')
                    
                    # –°–æ–∑–¥–∞–µ–º/–ø–æ–ª—É—á–∞–µ–º –∑–∞—Å—Ç—Ä–æ–π—â–∏–∫–∞
                    developer_id = self.ensure_developer_exists(dev_name, dev_website)
                    if developer_id:
                        stats['developers_created'] += 1
                    
                    for project in projects:
                        try:
                            complex_name = project.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
                            
                            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–∞–π–æ–Ω (–ø—Ä–∏–º–∏—Ç–∏–≤–Ω–æ)
                            district_id = self.determine_district_id(complex_name)
                            
                            # –°–æ–∑–¥–∞–µ–º/–ø–æ–ª—É—á–∞–µ–º –ñ–ö
                            complex_id = self.ensure_complex_exists(
                                complex_name, 
                                developer_id, 
                                district_id
                            )
                            
                            if complex_id:
                                stats['complexes_created'] += 1
                            
                            # –î–æ–±–∞–≤–ª—è–µ–º –∫–≤–∞—Ä—Ç–∏—Ä—ã
                            for i, apartment in enumerate(project.get('apartments', [])):
                                try:
                                    # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π slug
                                    title = f"{complex_name} - {apartment.get('rooms', 0)} –∫–æ–º–Ω."
                                    if apartment.get('area'):
                                        title += f", {apartment['area']} –º¬≤"
                                    
                                    slug = f"{dev_code}-{complex_id}-{i}-{int(datetime.now().timestamp())}"
                                    
                                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–∞—è –∫–≤–∞—Ä—Ç–∏—Ä–∞
                                    existing = Property.query.filter_by(
                                        complex_id=complex_id,
                                        rooms=apartment.get('rooms'),
                                        area=apartment.get('area'),
                                        price=apartment.get('price')
                                    ).first()
                                    
                                    if not existing:
                                        property_obj = Property(
                                            title=title,
                                            slug=slug,
                                            rooms=apartment.get('rooms'),
                                            area=apartment.get('area'),
                                            price=apartment.get('price'),
                                            price_per_sqm=int(apartment['price'] / apartment['area']) if apartment.get('price') and apartment.get('area') else None,
                                            developer_id=developer_id,
                                            complex_id=complex_id,
                                            district_id=district_id,
                                            source_url=apartment.get('source_url'),
                                            scraped_at=datetime.utcnow(),
                                            status='available',
                                            is_active=True
                                        )
                                        
                                        db.session.add(property_obj)
                                        stats['apartments_created'] += 1
                                
                                except Exception as e:
                                    print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–≤–∞—Ä—Ç–∏—Ä—ã: {e}")
                                    stats['errors'] += 1
                                    
                        except Exception as e:
                            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø—Ä–æ–µ–∫—Ç–∞ {project.get('name')}: {e}")
                            stats['errors'] += 1
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
                db.session.commit()
                print("‚úÖ –í—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö")
                
        except Exception as e:
            print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
            try:
                if db and db.session:
                    db.session.rollback()
            except:
                pass  # Ignore rollback errors
            stats['errors'] += 1
        
        return stats
    
    def run_full_scraping_and_integration(self) -> Dict:
        """
        –ü–æ–ª–Ω—ã–π —Ü–∏–∫–ª: –ø–∞—Ä—Å–∏–Ω–≥ + –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
        """
        print("üöÄ –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏")
        print("="*60)
        
        # –≠—Ç–∞–ø 1: –ü–∞—Ä—Å–∏–Ω–≥
        print("üì° –≠—Ç–∞–ø 1: –ü–∞—Ä—Å–∏–Ω–≥ —Å–∞–π—Ç–æ–≤ –∑–∞—Å—Ç—Ä–æ–π—â–∏–∫–æ–≤...")
        scraped_data = self.scraper.scrape_all_developers()
        
        # –≠—Ç–∞–ø 2: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ JSON (—Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è)
        print("\nüíæ –≠—Ç–∞–ø 2: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏...")
        json_file = self.scraper.save_to_json(scraped_data)
        
        # –≠—Ç–∞–ø 3: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
        print("\nüîó –≠—Ç–∞–ø 3: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö...")
        integration_stats = self.integrate_scraped_data(scraped_data)
        
        # –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        print("\n" + "="*60)
        print("üìä –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê")
        print("="*60)
        print(f"‚úÖ –ó–∞—Å—Ç—Ä–æ–π—â–∏–∫–æ–≤ —Å–æ–∑–¥–∞–Ω–æ/–æ–±–Ω–æ–≤–ª–µ–Ω–æ: {integration_stats['developers_created']}")
        print(f"‚úÖ –ñ–ö —Å–æ–∑–¥–∞–Ω–æ/–æ–±–Ω–æ–≤–ª–µ–Ω–æ: {integration_stats['complexes_created']}")  
        print(f"‚úÖ –ö–≤–∞—Ä—Ç–∏—Ä –¥–æ–±–∞–≤–ª–µ–Ω–æ: {integration_stats['apartments_created']}")
        print(f"‚ùå –û—à–∏–±–æ–∫: {integration_stats['errors']}")
        
        if json_file:
            print(f"üíæ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è: {json_file}")
        
        result = {
            'scraped_data': scraped_data,
            'integration_stats': integration_stats,
            'json_backup': json_file,
            'timestamp': datetime.now().isoformat()
        }
        
        return result

def main():
    """
    –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
    """
    integration = PropertyScraperIntegration()
    result = integration.run_full_scraping_and_integration()
    
    return result

if __name__ == "__main__":
    main()