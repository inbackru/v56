#!/usr/bin/env python3
"""
–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –¥–ª—è –º–∞—Å—Å–æ–≤–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–∞–π–æ–Ω–æ–≤ –∏ —É–ª–∏—Ü
–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –ø–∞–∫–µ—Ç–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É, –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ, –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏ –ª–∏–º–∏—Ç—ã API
"""

import os
import time
import json
import sqlite3
import requests
from datetime import datetime
from models import db, District, Street
from app import app

class AdvancedCoordinatesProcessor:
    def __init__(self):
        self.api_key = os.environ.get('YANDEX_MAPS_API_KEY')
        self.cache_file = 'coordinates_cache.json'
        self.progress_file = 'coordinates_progress.json'
        self.batch_size = 50  # –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ 50 –æ–±—ä–µ–∫—Ç–æ–≤
        self.daily_limit = 25000  # –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç API –∑–∞–ø—Ä–æ—Å–æ–≤ (–Ø–Ω–¥–µ–∫—Å –ì–µ–æ–∫–æ–¥–µ—Ä)
        self.requests_per_second = 10  # –º–∞–∫—Å–∏–º—É–º 10 –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ —Å–µ–∫—É–Ω–¥—É
        self.cache = self.load_cache()
        self.progress = self.load_progress()
        
    def load_cache(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫—ç—à –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –∏–∑ —Ñ–∞–π–ª–∞"""
        try:
            if os.path.exists(self.cache_file):
                with open(self.cache_file, 'r', encoding='utf-8') as f:
                    return json.load(f)
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫—ç—à–∞: {e}")
        return {}
    
    def save_cache(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∫—ç—à –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –≤ —Ñ–∞–π–ª"""
        try:
            with open(self.cache_file, 'w', encoding='utf-8') as f:
                json.dump(self.cache, f, ensure_ascii=False, indent=2)
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫—ç—à–∞: {e}")
    
    def load_progress(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
        try:
            if os.path.exists(self.progress_file):
                with open(self.progress_file, 'r', encoding='utf-8') as f:
                    return json.load(f)
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞: {e}")
        return {
            'districts_processed': 0,
            'streets_processed': 0,
            'last_run': None,
            'daily_requests_count': 0,
            'last_request_date': None
        }
    
    def save_progress(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
        try:
            self.progress['last_run'] = datetime.now().isoformat()
            with open(self.progress_file, 'w', encoding='utf-8') as f:
                json.dump(self.progress, f, ensure_ascii=False, indent=2)
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞: {e}")
    
    def check_daily_limit(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç API –∑–∞–ø—Ä–æ—Å–æ–≤"""
        today = datetime.now().strftime('%Y-%m-%d')
        if self.progress.get('last_request_date') != today:
            self.progress['daily_requests_count'] = 0
            self.progress['last_request_date'] = today
        
        return self.progress['daily_requests_count'] < self.daily_limit
    
    def get_coordinates_cached(self, query):
        """–ü–æ–ª—É—á–∞–µ—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –∫—ç—à–∞"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
        cache_key = query.lower().strip()
        if cache_key in self.cache:
            print(f"  üíæ –ò–∑ –∫—ç—à–∞: {query}")
            return self.cache[cache_key]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç
        if not self.check_daily_limit():
            print(f"  ‚ö†Ô∏è –ü—Ä–µ–≤—ã—à–µ–Ω –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç API –∑–∞–ø—Ä–æ—Å–æ–≤ ({self.daily_limit})")
            return None
        
        # –î–µ–ª–∞–µ–º –∑–∞–ø—Ä–æ—Å –∫ API
        coordinates = self.get_yandex_coordinates(query)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
        if coordinates:
            self.cache[cache_key] = coordinates
        else:
            self.cache[cache_key] = None
            
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–æ–≤
        self.progress['daily_requests_count'] += 1
        
        # –°–æ–±–ª—é–¥–∞–µ–º –ª–∏–º–∏—Ç —Å–∫–æ—Ä–æ—Å—Ç–∏
        time.sleep(1 / self.requests_per_second)
        
        return coordinates
    
    def get_yandex_coordinates(self, query):
        """–ü–æ–ª—É—á–∞–µ—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —á–µ—Ä–µ–∑ Yandex Geocoder API"""
        try:
            geocoder_url = "https://geocode-maps.yandex.ru/1.x/"
            params = {
                'apikey': self.api_key,
                'geocode': query,
                'format': 'json',
                'results': 1,
                'lang': 'ru_RU'
            }
            
            response = requests.get(geocoder_url, params=params, timeout=15)
            if response.status_code != 200:
                print(f"  ‚ùå HTTP {response.status_code} for: {query}")
                return None
                
            data = response.json()
            
            if 'response' not in data:
                return None
                
            geo_objects = data['response']['GeoObjectCollection']['featureMember']
            
            if not geo_objects:
                return None
                
            point = geo_objects[0]['GeoObject']['Point']['pos']
            lng, lat = map(float, point.split())
            
            return {'latitude': lat, 'longitude': lng}
            
        except Exception as e:
            print(f"  ‚ùå –û—à–∏–±–∫–∞: {str(e)}")
            return None
    
    def process_districts_batch(self, batch_size=None):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–∞–∫–µ—Ç —Ä–∞–π–æ–Ω–æ–≤"""
        if batch_size is None:
            batch_size = self.batch_size
            
        # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–π–æ–Ω—ã –±–µ–∑ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç, –Ω–∞—á–∏–Ω–∞—è —Å –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø–æ–∑–∏—Ü–∏–∏
        districts = District.query.filter(
            (District.latitude.is_(None)) | 
            (District.longitude.is_(None))
        ).offset(self.progress['districts_processed']).limit(batch_size).all()
        
        if not districts:
            print("‚úÖ –í—Å–µ —Ä–∞–π–æ–Ω—ã —É–∂–µ –∏–º–µ—é—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã")
            return True
        
        print(f"üèòÔ∏è –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –ø–∞–∫–µ—Ç —Ä–∞–π–æ–Ω–æ–≤: {len(districts)} —à—Ç.")
        processed = 0
        
        for district in districts:
            if not self.check_daily_limit():
                print(f"‚ö†Ô∏è –î–æ—Å—Ç–∏–≥–Ω—É—Ç –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç API –∑–∞–ø—Ä–æ—Å–æ–≤")
                break
                
            print(f"üìç –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Ä–∞–π–æ–Ω: {district.name}")
            
            queries = [
                f"{district.name} –º–∏–∫—Ä–æ—Ä–∞–π–æ–Ω –ö—Ä–∞—Å–Ω–æ–¥–∞—Ä",
                f"{district.name} —Ä–∞–π–æ–Ω –ö—Ä–∞—Å–Ω–æ–¥–∞—Ä", 
                f"{district.name} –ö—Ä–∞—Å–Ω–æ–¥–∞—Ä",
                f"–º–∏–∫—Ä–æ—Ä–∞–π–æ–Ω {district.name} –ö—Ä–∞—Å–Ω–æ–¥–∞—Ä"
            ]
            
            coordinates = None
            for query in queries:
                coordinates = self.get_coordinates_cached(query)
                if coordinates:
                    break
            
            if coordinates:
                district.latitude = coordinates['latitude']
                district.longitude = coordinates['longitude']
                db.session.commit()
                print(f"  ‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω: {district.name}")
                processed += 1
            else:
                print(f"  ‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω—ã –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: {district.name}")
            
            self.progress['districts_processed'] += 1
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 5 –∑–∞–ø–∏—Å–µ–π
            if processed % 5 == 0:
                self.save_progress()
                self.save_cache()
        
        self.save_progress()
        self.save_cache()
        
        return len(districts) < batch_size  # True –µ—Å–ª–∏ –≤—Å–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ
    
    def process_streets_batch(self, batch_size=None):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–∞–∫–µ—Ç —É–ª–∏—Ü"""
        if batch_size is None:
            batch_size = self.batch_size
            
        streets = Street.query.filter(
            (Street.latitude.is_(None)) | 
            (Street.longitude.is_(None))
        ).offset(self.progress['streets_processed']).limit(batch_size).all()
        
        if not streets:
            print("‚úÖ –í—Å–µ —É–ª–∏—Ü—ã —É–∂–µ –∏–º–µ—é—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã")
            return True
        
        print(f"üõ£Ô∏è –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –ø–∞–∫–µ—Ç —É–ª–∏—Ü: {len(streets)} —à—Ç.")
        processed = 0
        
        for street in streets:
            if not self.check_daily_limit():
                print(f"‚ö†Ô∏è –î–æ—Å—Ç–∏–≥–Ω—É—Ç –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç API –∑–∞–ø—Ä–æ—Å–æ–≤")
                break
                
            print(f"üìç –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —É–ª–∏—Ü—É: {street.name}")
            
            queries = [
                f"—É–ª–∏—Ü–∞ {street.name} –ö—Ä–∞—Å–Ω–æ–¥–∞—Ä",
                f"{street.name} —É–ª–∏—Ü–∞ –ö—Ä–∞—Å–Ω–æ–¥–∞—Ä",
                f"{street.name} –ö—Ä–∞—Å–Ω–æ–¥–∞—Ä"
            ]
            
            coordinates = None
            for query in queries:
                coordinates = self.get_coordinates_cached(query)
                if coordinates:
                    break
            
            if coordinates:
                street.latitude = coordinates['latitude']
                street.longitude = coordinates['longitude']
                db.session.commit()
                print(f"  ‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∞: {street.name}")
                processed += 1
            else:
                print(f"  ‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω—ã –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: {street.name}")
            
            self.progress['streets_processed'] += 1
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 10 –∑–∞–ø–∏—Å–µ–π
            if processed % 10 == 0:
                self.save_progress()
                self.save_cache()
        
        self.save_progress()
        self.save_cache()
        
        return len(streets) < batch_size  # True –µ—Å–ª–∏ –≤—Å–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ
    
    def get_stats(self):
        """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
        with app.app_context():
            total_districts = District.query.count()
            districts_with_coords = District.query.filter(
                District.latitude.isnot(None), 
                District.longitude.isnot(None)
            ).count()
            
            total_streets = Street.query.count()
            streets_with_coords = Street.query.filter(
                Street.latitude.isnot(None),
                Street.longitude.isnot(None)
            ).count()
            
            return {
                'districts': {
                    'total': total_districts,
                    'with_coords': districts_with_coords,
                    'remaining': total_districts - districts_with_coords
                },
                'streets': {
                    'total': total_streets,
                    'with_coords': streets_with_coords,
                    'remaining': total_streets - streets_with_coords
                },
                'api_usage': {
                    'daily_requests': self.progress['daily_requests_count'],
                    'daily_limit': self.daily_limit,
                    'remaining': self.daily_limit - self.progress['daily_requests_count']
                }
            }
    
    def run_incremental_processing(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –∏–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞–ª—å–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É"""
        print("üöÄ –ó–∞–ø—É—Å–∫ –∏–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç...")
        
        if not self.api_key:
            print("‚ùå YANDEX_MAPS_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        stats = self.get_stats()
        print(f"""
üìä –¢–µ–∫—É—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:
   –†–∞–π–æ–Ω—ã: {stats['districts']['with_coords']}/{stats['districts']['total']} ({stats['districts']['remaining']} –æ—Å—Ç–∞–ª–æ—Å—å)
   –£–ª–∏—Ü—ã: {stats['streets']['with_coords']}/{stats['streets']['total']} ({stats['streets']['remaining']} –æ—Å—Ç–∞–ª–æ—Å—å)
   API –∑–∞–ø—Ä–æ—Å—ã: {stats['api_usage']['daily_requests']}/{stats['api_usage']['daily_limit']} ({stats['api_usage']['remaining']} –æ—Å—Ç–∞–ª–æ—Å—å)
        """)
        
        if not self.check_daily_limit():
            print("‚ö†Ô∏è –î–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç API –∑–∞–ø—Ä–æ—Å–æ–≤ –∏—Å—á–µ—Ä–ø–∞–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–≤—Ç—Ä–∞.")
            return
        
        # –°–Ω–∞—á–∞–ª–∞ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞–π–æ–Ω—ã
        districts_done = False
        if stats['districts']['remaining'] > 0:
            districts_done = self.process_districts_batch()
        else:
            districts_done = True
            print("‚úÖ –í—Å–µ —Ä–∞–π–æ–Ω—ã —É–∂–µ –∏–º–µ—é—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã")
        
        # –ó–∞—Ç–µ–º –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —É–ª–∏—Ü—ã
        if districts_done and stats['streets']['remaining'] > 0 and self.check_daily_limit():
            self.process_streets_batch()
        
        # –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        final_stats = self.get_stats()
        print(f"""
üéâ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!
   –†–∞–π–æ–Ω—ã: {final_stats['districts']['with_coords']}/{final_stats['districts']['total']}
   –£–ª–∏—Ü—ã: {final_stats['streets']['with_coords']}/{final_stats['streets']['total']}
   –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ API –∑–∞–ø—Ä–æ—Å–æ–≤: {final_stats['api_usage']['daily_requests']}/{final_stats['api_usage']['daily_limit']}
        """)

if __name__ == "__main__":
    with app.app_context():
        processor = AdvancedCoordinatesProcessor()
        processor.run_incremental_processing()