#!/usr/bin/env python3
"""
InBack Real Estate Telegram Bot
–ë–æ—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ —Å –∫—ç—à–±–µ–∫–æ–º –¥–æ 500,000‚ÇΩ
+ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Chaport
"""

import os
import asyncio
import logging
import requests
import re

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    CallbackQueryHandler,
    MessageHandler,
    filters,
    ContextTypes
)

from app import app, db
from models import (
    Property, ResidentialComplex, Developer, District, 
    Application as UserApplication, User
)

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

TELEGRAM_BOT_TOKEN = os.environ.get('TELEGRAM_BOT_TOKEN')
if not TELEGRAM_BOT_TOKEN:
    raise ValueError("TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")

WEBHOOK_URL = os.environ.get('WEBHOOK_URL', '')

# ID –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –¥–ª—è –ø–µ—Ä–µ—Å—ã–ª–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π (–º–æ–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é)
MANAGER_CHAT_IDS = os.environ.get('MANAGER_TELEGRAM_IDS', '').split(',')
MANAGER_CHAT_IDS = [chat_id.strip() for chat_id in MANAGER_CHAT_IDS if chat_id.strip()]

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–∏–∞–ª–æ–≥–æ–≤ {user_chat_id: manager_mode}
active_support_chats = {}


# ============= –ü–£–ë–õ–ò–ß–ù–´–ï –ö–û–ú–ê–ù–î–´ (–¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π) =============

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ –∫–æ–º–∞–Ω–¥–µ /start"""
    user = update.effective_user
    
    keyboard = [
        [
            InlineKeyboardButton("üè¢ –ü–æ–∏—Å–∫ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏", callback_data="search_properties"),
            InlineKeyboardButton("üí∞ –ö—ç—à–±–µ–∫", callback_data="cashback_info")
        ],
        [
            InlineKeyboardButton("üèóÔ∏è –ó–∞—Å—Ç—Ä–æ–π—â–∏–∫–∏", callback_data="developers"),
            InlineKeyboardButton("üèòÔ∏è –ñ–ö", callback_data="complexes")
        ],
        [
            InlineKeyboardButton("üìù –û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É", callback_data="create_application"),
            InlineKeyboardButton("üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã", callback_data="contacts")
        ],
        [
            InlineKeyboardButton("üí¨ –°–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º", callback_data="contact_manager")
        ],
        [
            InlineKeyboardButton("üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å", callback_data="my_profile"),
            InlineKeyboardButton("üåê –°–∞–π—Ç", url="https://inback.ru")
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    welcome_text = (
        f"üëã –ü—Ä–∏–≤–µ—Ç, {user.first_name}!\n\n"
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ *InBack* ‚Äî –≤–∞—à –ø–æ–º–æ—â–Ω–∏–∫ –≤ –ø–æ–∫—É–ø–∫–µ –Ω–æ–≤–æ—Å—Ç—Ä–æ–µ–∫!\n\n"
        "üéÅ *–ü–æ–ª—É—á–∏—Ç–µ –¥–æ 500,000‚ÇΩ –∫—ç—à–±–µ–∫–∞* –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ –∫–≤–∞—Ä—Ç–∏—Ä—ã\n"
        "üè¢ *354 –æ–±—ä–µ–∫—Ç–∞* –æ—Ç –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö –∑–∞—Å—Ç—Ä–æ–π—â–∏–∫–æ–≤\n"
        "‚úÖ –Æ—Ä–∏–¥–∏—á–µ—Å–∫–æ–µ —Å–æ–ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏–µ\n"
        "üìç –°–æ—á–∏, –ö—Ä–∞—Å–Ω–æ–¥–∞—Ä—Å–∫–∏–π –∫—Ä–∞–π\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    )
    
    await update.message.reply_text(
        welcome_text,
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )


async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º"""
    help_text = (
        "üìñ *–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*\n\n"
        "*–î–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:*\n"
        "/start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
        "/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞\n"
        "/search - –ü–æ–∏—Å–∫ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏\n"
        "/cashback - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫—ç—à–±–µ–∫–µ\n"
        "/contacts - –ù–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã\n\n"
        "*–î–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤ –∞–∫–∫–∞—É–Ω—Ç–∞:*\n"
        "/link email - –ü—Ä–∏–≤—è–∑–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç InBack\n"
        "/profile - –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å\n"
        "/favorites - –ò–∑–±—Ä–∞–Ω–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã\n"
        "/notifications - –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π\n\n"
        "üí¨ *–ò–ª–∏ –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ:*\n"
        "‚Ä¢ –ù–∞–∑–≤–∞–Ω–∏–µ —Ä–∞–π–æ–Ω–∞\n"
        "‚Ä¢ –¢–∏–ø –∫–≤–∞—Ä—Ç–∏—Ä—ã (—Å—Ç—É–¥–∏—è, 1–∫, 2–∫)\n"
        "‚Ä¢ –ë—é–¥–∂–µ—Ç (–¥–æ 5 –º–ª–Ω)\n\n"
        "‚ùì –û—Å—Ç–∞–ª–∏—Å—å –≤–æ–ø—Ä–æ—Å—ã? –ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–º!"
    )
    
    await update.message.reply_text(help_text, parse_mode='Markdown')


async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ inline –∫–Ω–æ–ø–∫–∏"""
    query = update.callback_query
    await query.answer()
    
    handlers = {
        "search_properties": search_properties,
        "cashback_info": cashback_info,
        "developers": show_developers,
        "complexes": show_complexes,
        "create_application": create_application,
        "contacts": show_contacts,
        "my_profile": show_my_profile,
        "back_to_menu": back_to_menu,
        "contact_manager": contact_manager,
        "end_support": end_support_chat,
    }
    
    # –ü—Ä–æ—Å—Ç—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    for key, handler in handlers.items():
        if query.data == key:
            await handler(query)
            return
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
    if query.data.startswith("complex_"):
        complex_id = int(query.data.split("_")[1])
        await show_complex_details(query, complex_id)
    elif query.data.startswith("developer_"):
        developer_id = int(query.data.split("_")[1])
        await show_developer_details(query, developer_id)


async def search_properties(query):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã"""
    with app.app_context():
        properties = Property.query.filter_by(active=True).order_by(Property.price).limit(5).all()
        
        if not properties:
            text = "üòî –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Å–µ–π—á–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤.\n\nüåê inback.ru"
            keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu")]]
            await query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard))
            return
        
        text = "üè¢ *–¢–æ–ø –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π:*\n\n"
        
        for prop in properties:
            cashback = int(prop.price * 0.04) if prop.price else 0
            rooms = prop.rooms or 0
            room_text = "–°—Ç—É–¥–∏—è" if rooms == 0 else f"{rooms}-–∫–æ–º–Ω."
            
            text += (
                f"üìç {prop.address[:50] if prop.address else '–ê–¥—Ä–µ—Å —É—Ç–æ—á–Ω—è–µ—Ç—Å—è'}...\n"
                f"üí∞ {prop.price:,.0f} ‚ÇΩ\n"
                f"üéÅ –ö—ç—à–±–µ–∫: {cashback:,.0f} ‚ÇΩ\n"
                f"üìê {prop.area} –º¬≤ | {room_text}\n\n"
            )
        
        text += "\nüîç –ë–æ–ª—å—à–µ –æ–±—ä–µ–∫—Ç–æ–≤ –Ω–∞ —Å–∞–π—Ç–µ: inback.ru"
        
        keyboard = [
            [InlineKeyboardButton("üèòÔ∏è –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ñ–ö", callback_data="complexes")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(text, reply_markup=reply_markup, parse_mode='Markdown')


async def cashback_info(query):
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫—ç—à–±–µ–∫–µ"""
    text = (
        "üí∞ *–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫—ç—à–±–µ–∫ InBack?*\n\n"
        "üéÅ *–î–æ 500,000‚ÇΩ* –Ω–∞ –ø–æ–∫—É–ø–∫—É –∫–≤–∞—Ä—Ç–∏—Ä—ã!\n\n"
        "üìä *–†–∞–∑–º–µ—Ä –∫—ç—à–±–µ–∫–∞:*\n"
        "‚Ä¢ 3-5% –æ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –∫–≤–∞—Ä—Ç–∏—Ä—ã\n"
        "‚Ä¢ –ó–∞–≤–∏—Å–∏—Ç –æ—Ç –ñ–ö –∏ –∑–∞—Å—Ç—Ä–æ–π—â–∏–∫–∞\n"
        "‚Ä¢ –í—ã–ø–ª–∞—á–∏–≤–∞–µ—Ç—Å—è –ø–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Å–¥–µ–ª–∫–∏\n\n"
        "‚úÖ *–ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å:*\n"
        "1Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ –∫–≤–∞—Ä—Ç–∏—Ä—É —á–µ—Ä–µ–∑ InBack\n"
        "2Ô∏è‚É£ –û—Ñ–æ—Ä–º–∏—Ç–µ —Å–¥–µ–ª–∫—É —Å –Ω–∞—à–∏–º —Å–æ–ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏–µ–º\n"
        "3Ô∏è‚É£ –ü–æ–ª—É—á–∏—Ç–µ –∫—ç—à–±–µ–∫ (–æ–±—ã—á–Ω–æ 30-60 –¥–Ω–µ–π)\n\n"
        "‚öñÔ∏è *–ì–∞—Ä–∞–Ω—Ç–∏–∏:*\n"
        "‚Ä¢ –Æ—Ä–∏–¥–∏—á–µ—Å–∫–æ–µ —Å–æ–ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏–µ\n"
        "‚Ä¢ –î–æ–≥–æ–≤–æ—Ä —Å –∑–∞—Å—Ç—Ä–æ–π—â–∏–∫–æ–º\n"
        "‚Ä¢ –û—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ\n\n"
        "üí° *–ü—Ä–∏–º–µ—Ä:*\n"
        "–ö–≤–∞—Ä—Ç–∏—Ä–∞ –∑–∞ 10,000,000‚ÇΩ\n"
        "–ö—ç—à–±–µ–∫ 4% = 400,000‚ÇΩ üéâ\n\n"
        "üìû 8 (862) 266-62-16"
    )
    
    keyboard = [
        [InlineKeyboardButton("üè¢ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ–±—ä–µ–∫—Ç—ã", callback_data="search_properties")],
        [InlineKeyboardButton("üìù –û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É", callback_data="create_application")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(text, reply_markup=reply_markup, parse_mode='Markdown')


async def show_developers(query):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞—Å—Ç—Ä–æ–π—â–∏–∫–æ–≤"""
    with app.app_context():
        developers = Developer.query.limit(10).all()
        
        if not developers:
            text = "üòî –°–ø–∏—Å–æ–∫ –∑–∞—Å—Ç—Ä–æ–π—â–∏–∫–æ–≤ –ø—É—Å—Ç."
            keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu")]]
            await query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard))
            return
        
        text = "üèóÔ∏è *–ü—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ –∑–∞—Å—Ç—Ä–æ–π—â–∏–∫–∏:*\n\n"
        
        keyboard = []
        for dev in developers[:8]:  # –ü–µ—Ä–≤—ã–µ 8
            rating_stars = "‚≠ê" * int(dev.rating or 4.8)
            text += f"‚Ä¢ {dev.name} {rating_stars}\n"
            keyboard.append([
                InlineKeyboardButton(dev.name, callback_data=f"developer_{dev.id}")
            ])
        
        keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu")])
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(text, reply_markup=reply_markup, parse_mode='Markdown')


async def show_complexes(query):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –ñ–ö"""
    with app.app_context():
        complexes = ResidentialComplex.query.filter_by(active=True).limit(10).all()
        
        if not complexes:
            text = "üòî –°–ø–∏—Å–æ–∫ –ñ–ö –ø—É—Å—Ç."
            keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu")]]
            await query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard))
            return
        
        text = "üèòÔ∏è *–ñ–∏–ª—ã–µ –∫–æ–º–ø–ª–µ–∫—Å—ã —Å –∫—ç—à–±–µ–∫–æ–º:*\n\n"
        
        keyboard = []
        for complex in complexes[:8]:
            cashback_percent = int(complex.cashback_rate or 0)
            text += f"‚Ä¢ {complex.name} (–∫—ç—à–±–µ–∫ {cashback_percent}%)\n"
            keyboard.append([
                InlineKeyboardButton(
                    f"{complex.name} - {cashback_percent}%",
                    callback_data=f"complex_{complex.id}"
                )
            ])
        
        keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu")])
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(text, reply_markup=reply_markup, parse_mode='Markdown')


async def show_complex_details(query, complex_id):
    """–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏ –ñ–ö"""
    with app.app_context():
        complex = ResidentialComplex.query.get(complex_id)
        
        if not complex:
            await query.edit_message_text("üòî –ñ–ö –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return
        
        cashback_percent = int(complex.cashback_rate or 0)
        
        # –ü–æ–¥—Å—á–∏—Ç–∞–µ–º –æ–±—ä–µ–∫—Ç—ã –≤ —ç—Ç–æ–º –ñ–ö
        properties_count = Property.query.filter_by(
            residential_complex_id=complex.id,
            active=True
        ).count()
        
        text = (
            f"üèòÔ∏è *{complex.name}*\n\n"
            f"üí∞ –ö—ç—à–±–µ–∫: *{cashback_percent}%* –æ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏\n"
            f"üè¢ –û–±—ä–µ–∫—Ç–æ–≤: {properties_count}\n"
        )
        
        if complex.address:
            text += f"üìç {complex.address}\n"
        
        if complex.description:
            desc = complex.description[:150]
            text += f"\nüìù {desc}...\n"
        
        text += "\nüåê –ü–æ–¥—Ä–æ–±–Ω–µ–µ: inback.ru"
        
        keyboard = [
            [InlineKeyboardButton("üìù –û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É", callback_data="create_application")],
            [InlineKeyboardButton("üîô –ö —Å–ø–∏—Å–∫—É –ñ–ö", callback_data="complexes")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(text, reply_markup=reply_markup, parse_mode='Markdown')


async def show_developer_details(query, developer_id):
    """–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏ –∑–∞—Å—Ç—Ä–æ–π—â–∏–∫–∞"""
    with app.app_context():
        developer = Developer.query.get(developer_id)
        
        if not developer:
            await query.edit_message_text("üòî –ó–∞—Å—Ç—Ä–æ–π—â–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return
        
        text = (
            f"üèóÔ∏è *{developer.name}*\n\n"
            f"üìä –û–±—ä–µ–∫—Ç–æ–≤: {developer.total_properties or 0}\n"
            f"‚≠ê –†–µ–π—Ç–∏–Ω–≥: {developer.rating or 4.8}/5.0\n"
        )
        
        if developer.description:
            text += f"\nüìù {developer.description[:150]}...\n"
        
        if developer.phone:
            text += f"\nüìû {developer.phone}\n"
        
        text += "\nüåê –ü–æ–¥—Ä–æ–±–Ω–µ–µ: inback.ru"
        
        keyboard = [
            [InlineKeyboardButton("üìù –û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É", callback_data="create_application")],
            [InlineKeyboardButton("üîô –ö —Å–ø–∏—Å–∫—É", callback_data="developers")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(text, reply_markup=reply_markup, parse_mode='Markdown')


async def create_application(query):
    """–§–æ—Ä–º–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏"""
    text = (
        "üìù *–û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ –ø–æ–¥–±–æ—Ä –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏*\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ª—é–±–æ–º —Ñ–æ—Ä–º–∞—Ç–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä:\n\n"
        "üí¨ _\"–ò–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç 2–∫ –∫–≤–∞—Ä—Ç–∏—Ä–∞ –¥–æ 8 –º–ª–Ω\n"
        "–ú–µ–Ω—è –∑–æ–≤—É—Ç –ò–≤–∞–Ω\n"
        "–¢–µ–ª–µ—Ñ–æ–Ω: +7 900 123-45-67\"_\n\n"
        "–ò–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏ –Ω–∞–ø—Ä—è–º—É—é:\n"
        "üìû 8 (862) 266-62-16\n"
        "üìß info@inback.ru\n\n"
        "üí¨ –¢–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—Å–∞—Ç—å –≤–æ–ø—Ä–æ—Å ‚Äî –Ω–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä –æ—Ç–≤–µ—Ç–∏—Ç!"
    )
    
    keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(text, reply_markup=reply_markup, parse_mode='Markdown')


async def show_contacts(query):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç—ã"""
    text = (
        "üìû *–ö–æ–Ω—Ç–∞–∫—Ç—ã InBack:*\n\n"
        "‚òéÔ∏è –¢–µ–ª–µ—Ñ–æ–Ω: 8 (862) 266-62-16\n"
        "üìß Email: info@inback.ru\n"
        "üåê –°–∞–π—Ç: https://inback.ru\n\n"
        "üìç *–û—Ñ–∏—Å:*\n"
        "–≥. –ö—Ä–∞—Å–Ω–æ–¥–∞—Ä, —É–ª. –ö—Ä–∞—Å–Ω–∞—è, 176\n\n"
        "üïê *–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã:*\n"
        "–ü–Ω-–ü—Ç: 9:00 - 18:00\n\n"
        "üí¨ –ü–∏—à–∏—Ç–µ –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è ‚Äî –æ—Ç–≤–µ—Ç–∏–º –ø—Ä–∏ –ø–µ—Ä–≤–æ–π –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏!\n\n"
        "üåê –ú—ã —Ç–∞–∫–∂–µ –≤:\n"
        "‚Ä¢ Telegram: @inback_krd\n"
        "‚Ä¢ WhatsApp: 8 (862) 266-62-16"
    )
    
    keyboard = [
        [InlineKeyboardButton("üìù –û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É", callback_data="create_application")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(text, reply_markup=reply_markup, parse_mode='Markdown')


async def show_my_profile(query):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    chat_id = query.from_user.id
    
    with app.app_context():
        user = User.query.filter_by(telegram_id=str(chat_id)).first()
        
        if not user:
            text = (
                "üë§ *–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç*\n\n"
                "–ü—Ä–∏–≤—è–∂–∏—Ç–µ –≤–∞—à –∞–∫–∫–∞—É–Ω—Ç InBack –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫:\n"
                "‚Ä¢ –ò–∑–±—Ä–∞–Ω–Ω—ã–º –æ–±—ä–µ–∫—Ç–∞–º\n"
                "‚Ä¢ –ò—Å—Ç–æ—Ä–∏–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤\n"
                "‚Ä¢ –°—Ç–∞—Ç—É—Å—É –∫—ç—à–±–µ–∫–∞\n"
                "‚Ä¢ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º\n\n"
                "–î–ª—è –ø—Ä–∏–≤—è–∑–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É:\n"
                "`/link –≤–∞—à_email@example.com`\n\n"
                "üìù –ï—â–µ –Ω–µ—Ç –∞–∫–∫–∞—É–Ω—Ç–∞? –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –Ω–∞ —Å–∞–π—Ç–µ inback.ru"
            )
            
            keyboard = [
                [InlineKeyboardButton("üåê –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è", url="https://inback.ru/register")],
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu")]
            ]
        else:
            favorites_count = len(user.favorites) if hasattr(user, 'favorites') else 0
            applications_count = len([a for a in user.applications if a.status in ['new', 'in_progress']]) if hasattr(user, 'applications') else 0
            
            text = (
                f"üë§ *–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å InBack*\n\n"
                f"*–ò–º—è:* {user.full_name}\n"
                f"*Email:* {user.email}\n"
                f"*–¢–µ–ª–µ—Ñ–æ–Ω:* {user.phone or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n\n"
                f"üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*\n"
                f"‚Ä¢ –ò–∑–±—Ä–∞–Ω–Ω—ã—Ö: {favorites_count}\n"
                f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞—è–≤–æ–∫: {applications_count}\n\n"
                f"üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {'–í–∫–ª—é—á–µ–Ω—ã' if user.telegram_notifications else '–í—ã–∫–ª—é—á–µ–Ω—ã'}\n\n"
                f"–£–ø—Ä–∞–≤–ª—è–π—Ç–µ –ø—Ä–æ—Ñ–∏–ª–µ–º: /profile\n"
                f"–ù–∞—Å—Ç—Ä–æ–π–∫–∏: /notifications"
            )
            
            keyboard = [
                [
                    InlineKeyboardButton("‚ù§Ô∏è –ò–∑–±—Ä–∞–Ω–Ω–æ–µ", callback_data="user_favorites"),
                    InlineKeyboardButton("üìã –ó–∞—è–≤–∫–∏", callback_data="user_applications")
                ],
                [InlineKeyboardButton("üåê –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç", url="https://inback.ru/dashboard")],
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu")]
            ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(text, reply_markup=reply_markup, parse_mode='Markdown')


async def contact_manager(query):
    """–ù–∞—á–∞—Ç—å –¥–∏–∞–ª–æ–≥ —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º"""
    chat_id = query.from_user.id
    user_name = query.from_user.first_name
    username = query.from_user.username or "–±–µ–∑ username"
    
    # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º —Ä–µ–∂–∏–º –¥–∏–∞–ª–æ–≥–∞ —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º
    active_support_chats[chat_id] = True
    
    text = (
        "üí¨ *–°–≤—è–∑—å —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞!*\n\n"
        "–¢–µ–ø–µ—Ä—å –≤—Å–µ –≤–∞—à–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –±—É–¥—É—Ç –ø–µ—Ä–µ–¥–∞–Ω—ã –Ω–∞—à–µ–º—É –º–µ–Ω–µ–¥–∂–µ—Ä—É.\n"
        "–ú–µ–Ω–µ–¥–∂–µ—Ä –æ—Ç–≤–µ—Ç–∏—Ç –≤–∞–º –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.\n\n"
        "üìù *–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å* —Å–ª–µ–¥—É—é—â–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º.\n\n"
        "–î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ."
    )
    
    keyboard = [[InlineKeyboardButton("‚ùå –ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥", callback_data="end_support")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(text, reply_markup=reply_markup, parse_mode='Markdown')
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ –æ –Ω–æ–≤–æ–º –æ–±—Ä–∞—â–µ–Ω–∏–∏
    if MANAGER_CHAT_IDS:
        notification = (
            f"üîî *–ù–æ–≤–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞!*\n\n"
            f"üë§ –ò–º—è: {user_name}\n"
            f"üì± Username: @{username}\n"
            f"üÜî Chat ID: `{chat_id}`\n\n"
            f"–û–∂–∏–¥–∞—é —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞..."
        )
        
        for manager_id in MANAGER_CHAT_IDS:
            try:
                await query.get_bot().send_message(
                    chat_id=manager_id,
                    text=notification,
                    parse_mode='Markdown'
                )
            except Exception as e:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä—É {manager_id}: {e}")


async def end_support_chat(query):
    """–ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥ —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º"""
    chat_id = query.from_user.id
    
    # –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º —Ä–µ–∂–∏–º –¥–∏–∞–ª–æ–≥–∞
    if chat_id in active_support_chats:
        del active_support_chats[chat_id]
    
    text = (
        "‚úÖ *–î–∏–∞–ª–æ–≥ –∑–∞–≤–µ—Ä—à–µ–Ω*\n\n"
        "–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ! –ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–Ω—É—Ç –µ—â–µ –≤–æ–ø—Ä–æ—Å—ã, "
        "–º—ã –≤—Å–µ–≥–¥–∞ —Ä–∞–¥—ã –ø–æ–º–æ—á—å.\n\n"
        "üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã:\n"
        "8 (862) 266-62-16\n"
        "info@inback.ru"
    )
    
    keyboard = [[InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_menu")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(text, reply_markup=reply_markup, parse_mode='Markdown')
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –¥–∏–∞–ª–æ–≥–∞
    if MANAGER_CHAT_IDS:
        notification = f"‚úÖ –ö–ª–∏–µ–Ω—Ç {chat_id} –∑–∞–≤–µ—Ä—à–∏–ª –¥–∏–∞–ª–æ–≥."
        for manager_id in MANAGER_CHAT_IDS:
            try:
                await query.get_bot().send_message(
                    chat_id=manager_id,
                    text=notification
                )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä—É: {e}")


async def back_to_menu(query):
    """–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    # –ó–∞–≤–µ—Ä—à–∞–µ–º –¥–∏–∞–ª–æ–≥ —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º, –µ—Å–ª–∏ –∞–∫—Ç–∏–≤–µ–Ω
    chat_id = query.from_user.id
    if chat_id in active_support_chats:
        del active_support_chats[chat_id]
    
    keyboard = [
        [
            InlineKeyboardButton("üè¢ –ü–æ–∏—Å–∫ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏", callback_data="search_properties"),
            InlineKeyboardButton("üí∞ –ö—ç—à–±–µ–∫", callback_data="cashback_info")
        ],
        [
            InlineKeyboardButton("üèóÔ∏è –ó–∞—Å—Ç—Ä–æ–π—â–∏–∫–∏", callback_data="developers"),
            InlineKeyboardButton("üèòÔ∏è –ñ–ö", callback_data="complexes")
        ],
        [
            InlineKeyboardButton("üìù –û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É", callback_data="create_application"),
            InlineKeyboardButton("üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã", callback_data="contacts")
        ],
        [
            InlineKeyboardButton("üí¨ –°–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º", callback_data="contact_manager")
        ],
        [
            InlineKeyboardButton("üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å", callback_data="my_profile"),
            InlineKeyboardButton("üåê –°–∞–π—Ç", url="https://inback.ru")
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    text = (
        "üè† *InBack - –ö—ç—à–±–µ–∫ –∑–∞ –Ω–æ–≤–æ—Å—Ç—Ä–æ–π–∫–∏*\n\n"
        "üéÅ –î–æ 500,000‚ÇΩ –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ –∫–≤–∞—Ä—Ç–∏—Ä—ã\n"
        "üè¢ 354 –æ–±—ä–µ–∫—Ç–∞ –æ—Ç –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö –∑–∞—Å—Ç—Ä–æ–π—â–∏–∫–æ–≤\n"
        "üìç –°–æ—á–∏, –ö—Ä–∞—Å–Ω–æ–¥–∞—Ä—Å–∫–∏–π –∫—Ä–∞–π\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    )
    
    await query.edit_message_text(text, reply_markup=reply_markup, parse_mode='Markdown')


# ============= –ö–û–ú–ê–ù–î–´ –î–õ–Ø –í–õ–ê–î–ï–õ–¨–¶–ï–í –ê–ö–ö–ê–£–ù–¢–û–í =============

async def link_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /link –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–∞"""
    chat_id = update.effective_chat.id
    
    if not context.args:
        await update.message.reply_text(
            "‚ùå –£–∫–∞–∂–∏—Ç–µ –≤–∞—à email –∞–¥—Ä–µ—Å.\n\n"
            "–ü—Ä–∏–º–µ—Ä: `/link demo@inback.ru`",
            parse_mode='Markdown'
        )
        return
    
    email = context.args[0].lower().strip()
    
    if not re.match(r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$', email):
        await update.message.reply_text(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email.\n\n"
            "–ü—Ä–∏–º–µ—Ä: `/link demo@inback.ru`",
            parse_mode='Markdown'
        )
        return
    
    with app.app_context():
        user = User.query.filter_by(email=email).first()
        
        if not user:
            await update.message.reply_text(
                f"‚ùå –ê–∫–∫–∞—É–Ω—Ç —Å email {email} –Ω–µ –Ω–∞–π–¥–µ–Ω.\n\n"
                "–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –Ω–∞ https://inback.ru/register"
            )
            return
        
        if user.telegram_id and user.telegram_id != str(chat_id):
            await update.message.reply_text(
                "‚ùå –≠—Ç–æ—Ç –∞–∫–∫–∞—É–Ω—Ç —É–∂–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –¥—Ä—É–≥–æ–º—É Telegram.\n\n"
                "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É –¥–ª—è —Å–º–µ–Ω—ã –ø—Ä–∏–≤—è–∑–∫–∏."
            )
            return
        
        user.telegram_id = str(chat_id)
        user.telegram_notifications = True
        db.session.commit()
        
        await update.message.reply_text(
            f"‚úÖ *–ê–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–≤—è–∑–∞–Ω!*\n\n"
            f"üë§ {user.full_name}\n"
            f"üìß {email}\n"
            f"üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã\n\n"
            f"–¢–µ–ø–µ—Ä—å –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –æ–±—ä–µ–∫—Ç–∞—Ö –∏ –∫—ç—à–±–µ–∫–µ!\n\n"
            f"–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: /notifications",
            parse_mode='Markdown'
        )


async def handle_text_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    chat_id = update.effective_chat.id
    text = update.message.text
    user_name = update.effective_user.first_name
    username = update.effective_user.username or "–±–µ–∑ username"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Ä–µ–∂–∏–º–µ –¥–∏–∞–ª–æ–≥–∞ —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º
    if chat_id in active_support_chats:
        # –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º
        if MANAGER_CHAT_IDS:
            manager_message = (
                f"üí¨ *–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞*\n\n"
                f"üë§ {user_name} (@{username})\n"
                f"üÜî Chat ID: `{chat_id}`\n\n"
                f"üìù *–°–æ–æ–±—â–µ–Ω–∏–µ:*\n{text}\n\n"
                f"_–ß—Ç–æ–±—ã –æ—Ç–≤–µ—Ç–∏—Ç—å, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:_\n"
                f"`/reply {chat_id} –≤–∞—à_–æ—Ç–≤–µ—Ç`"
            )
            
            for manager_id in MANAGER_CHAT_IDS:
                try:
                    await context.bot.send_message(
                        chat_id=manager_id,
                        text=manager_message,
                        parse_mode='Markdown'
                    )
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–µ–Ω–µ–¥–∂–µ—Ä—É {manager_id}: {e}")
            
            # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç—É
            await update.message.reply_text(
                "‚úÖ –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –º–µ–Ω–µ–¥–∂–µ—Ä—É.\n"
                "–û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞..."
            )
        else:
            await update.message.reply_text(
                "‚ö†Ô∏è –ú–µ–Ω–µ–¥–∂–µ—Ä—ã –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã.\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–∑–≤–æ–Ω–∏—Ç–µ: 8 (862) 266-62-16"
            )
        
        return
    
    # –û–±—ã—á–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π (–µ—Å–ª–∏ –Ω–µ –≤ —Ä–µ–∂–∏–º–µ –¥–∏–∞–ª–æ–≥–∞)
    text_lower = text.lower()
    
    with app.app_context():
        # –ü–æ–∏—Å–∫ –ø–æ —Ç–∏–ø—É –∫–≤–∞—Ä—Ç–∏—Ä—ã
        if any(word in text_lower for word in ['—Å—Ç—É–¥–∏—è', '1–∫', '2–∫', '3–∫', '–∫–æ–º–Ω–∞—Ç', '–∫–≤–∞—Ä—Ç–∏—Ä']):
            properties = Property.query.filter_by(active=True).limit(3).all()
            
            if properties:
                response = "üîç *–ù–∞–π–¥–µ–Ω–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã:*\n\n"
                for prop in properties:
                    cashback = int(prop.price * 0.04) if prop.price else 0
                    response += (
                        f"üìç {(prop.address or '–ê–¥—Ä–µ—Å —É—Ç–æ—á–Ω—è–µ—Ç—Å—è')[:40]}...\n"
                        f"üí∞ {prop.price:,.0f} ‚ÇΩ\n"
                        f"üéÅ –ö—ç—à–±–µ–∫: {cashback:,.0f} ‚ÇΩ\n"
                        f"üìê {prop.area} –º¬≤\n\n"
                    )
                response += "üåê –í—Å–µ –æ–±—ä–µ–∫—Ç—ã: inback.ru"
            else:
                response = "üòî –ü–æ–∫–∞ –Ω–µ –Ω–∞—à–ª–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤. –û—Å—Ç–∞–≤—å—Ç–µ –∑–∞—è–≤–∫—É: /start"
            
            await update.message.reply_text(response, parse_mode='Markdown')
        
        elif any(word in text_lower for word in ['–∫—ç—à–±–µ–∫', 'cashback', '–≤–æ–∑–≤—Ä–∞—Ç', '–∫–µ—à–±–µ–∫']):
            await update.message.reply_text(
                "üí∞ *–ö—ç—à–±–µ–∫ –¥–æ 500,000‚ÇΩ!*\n\n"
                "–û—Ç 3% –¥–æ 5% –æ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –∫–≤–∞—Ä—Ç–∏—Ä—ã.\n\n"
                "–ü–æ–¥—Ä–æ–±–Ω–µ–µ: /start ‚Üí –ö—ç—à–±–µ–∫",
                parse_mode='Markdown'
            )
        
        elif any(word in text_lower for word in ['–∫–æ–Ω—Ç–∞–∫—Ç', '—Ç–µ–ª–µ—Ñ–æ–Ω', '—Å–≤—è–∑–∞—Ç—å—Å—è', '–ø–æ–∑–≤–æ–Ω']):
            await update.message.reply_text(
                "üìû *–ö–æ–Ω—Ç–∞–∫—Ç—ã:*\n\n"
                "‚òéÔ∏è 8 (862) 266-62-16\n"
                "üìß info@inback.ru\n"
                "üåê inback.ru",
                parse_mode='Markdown'
            )
        
        elif any(word in text_lower for word in ['–ø—Ä–∏–≤–µ—Ç', '–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π', 'hi', 'hello', '–¥–æ–±—Ä']):
            await update.message.reply_text(
                "–ü—Ä–∏–≤–µ—Ç! üëã\n\n"
                "–Ø –±–æ—Ç InBack –¥–ª—è –ø–æ–∏—Å–∫–∞ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ —Å –∫—ç—à–±–µ–∫–æ–º.\n\n"
                "–ö–æ–º–∞–Ω–¥—ã: /start –∏–ª–∏ /help"
            )
        
        else:
            # –í—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è - —ç—Ç–æ –∑–∞—è–≤–∫–∏
            await update.message.reply_text(
                f"üí¨ *–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, {user_name}!*\n\n"
                "–ù–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä –ø–æ–ª—É—á–∏–ª –≤–∞—à—É –∑–∞—è–≤–∫—É –∏ —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.\n\n"
                "üìû –ò–ª–∏ –∑–≤–æ–Ω–∏—Ç–µ —Å–∞–º–∏:\n"
                "8 (862) 266-62-16\n\n"
                "/start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                parse_mode='Markdown'
            )
            
            # –õ–æ–≥–∏—Ä—É–µ–º –∑–∞—è–≤–∫—É
            logger.info(f"New application from @{username}: {text}")


# ============= –£–¢–ò–õ–ò–¢–´ –î–õ–Ø –û–¢–ü–†–ê–í–ö–ò –£–í–ï–î–û–ú–õ–ï–ù–ò–ô =============

def send_telegram_message(chat_id, message):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ HTTP API"""
    if not TELEGRAM_BOT_TOKEN:
        logger.error("TELEGRAM_BOT_TOKEN not configured")
        return False
    
    try:
        # Log what we're sending
        logger.info(f"üì§ Sending to chat_id: {chat_id} (type: {type(chat_id)})")
        logger.info(f"üìù Message preview: {message[:200]}...")
        
        url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendMessage"
        data = {
            'chat_id': chat_id,
            'text': message,
            'parse_mode': 'Markdown'
        }
        
        response = requests.post(url, data=data, timeout=10)
        
        if response.status_code == 200:
            logger.info(f"‚úÖ Message sent to {chat_id}")
            return True
        else:
            logger.error(f"‚ùå Telegram API error: {response.status_code}")
            logger.error(f"‚ùå Response: {response.text}")
            return False
            
    except Exception as e:
        logger.error(f"‚ùå Error sending message: {e}")
        return False


def send_recommendation_notification(user_telegram_id, recommendation_data):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏"""
    if not user_telegram_id:
        return False
    
    message = f"""üè† <b>–ù–æ–≤–∞—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –æ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–∞</b>

üìã <b>{recommendation_data.get('title', '–ù–æ–≤–∞—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è')}</b>
üè¢ {recommendation_data.get('item_name', '–û–±—ä–µ–∫—Ç')}
üìù {recommendation_data.get('description', '')}

üí° <i>–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç:</i> {recommendation_data.get('priority_level', '–û–±—ã—á–Ω—ã–π').title()}

üîó <a href="https://inback.ru/{recommendation_data.get('recommendation_type', 'property')}/{recommendation_data.get('item_id')}">–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ–±—ä–µ–∫—Ç</a>"""
    
    return send_telegram_message(user_telegram_id, message)


# ============= –ö–û–ú–ê–ù–î–´ –î–õ–Ø –ú–ï–ù–ï–î–ñ–ï–†–û–í =============

async def reply_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /reply –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∫–ª–∏–µ–Ω—Ç—É"""
    manager_id = str(update.effective_chat.id)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –º–µ–Ω–µ–¥–∂–µ—Ä
    if manager_id not in MANAGER_CHAT_IDS:
        await update.message.reply_text("‚õî –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º.")
        return
    
    if not context.args or len(context.args) < 2:
        await update.message.reply_text(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã.\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: `/reply CHAT_ID —Ç–µ–∫—Å—Ç_–æ—Ç–≤–µ—Ç–∞`\n\n"
            "–ü—Ä–∏–º–µ—Ä: `/reply 123456789 –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –°–µ–π—á–∞—Å –ø–æ–¥–±–µ—Ä—É –≤–∞—Ä–∏–∞–Ω—Ç—ã.`",
            parse_mode='Markdown'
        )
        return
    
    try:
        client_chat_id = int(context.args[0])
        reply_text = ' '.join(context.args[1:])
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –∫–ª–∏–µ–Ω—Ç—É
        await context.bot.send_message(
            chat_id=client_chat_id,
            text=f"üí¨ *–û—Ç–≤–µ—Ç –æ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–∞:*\n\n{reply_text}",
            parse_mode='Markdown'
        )
        
        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä—É
        await update.message.reply_text(
            f"‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∫–ª–∏–µ–Ω—Ç—É {client_chat_id}"
        )
        
        logger.info(f"Manager {manager_id} replied to client {client_chat_id}")
        
    except ValueError:
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π Chat ID. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —á–∏—Å–ª–æ–≤–æ–π ID.")
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {str(e)}")
        logger.error(f"Error in reply_command: {e}")


# ============= –ó–ê–ü–£–°–ö –ë–û–¢–ê =============

def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ polling"""
    if not TELEGRAM_BOT_TOKEN:
        logger.error("‚ùå TELEGRAM_BOT_TOKEN not set!")
        return
    
    application = Application.builder().token(TELEGRAM_BOT_TOKEN).build()
    
    # –ü—É–±–ª–∏—á–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("link", link_command))
    
    # –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
    application.add_handler(CommandHandler("reply", reply_command))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫
    application.add_handler(CallbackQueryHandler(button_handler))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text_message))
    
    logger.info("ü§ñ InBack Telegram Bot –∑–∞–ø—É—â–µ–Ω!")
    logger.info("üìç –°–æ—á–∏, –ö—Ä–∞—Å–Ω–æ–¥–∞—Ä—Å–∫–∏–π –∫—Ä–∞–π")
    logger.info("üí∞ –ö—ç—à–±–µ–∫ –¥–æ 500,000‚ÇΩ")
    
    application.run_polling(allowed_updates=Update.ALL_TYPES)


if __name__ == '__main__':
    main()
