#!/usr/bin/env python3
"""
–ü–æ–ª–Ω—ã–π –∏–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –∏–∑ Excel —Ñ–∞–π–ª–æ–≤
"""

import pandas as pd
import numpy as np
import os
import re
import json
from app import app, db
from models import *
from datetime import datetime
from werkzeug.security import generate_password_hash

def generate_slug(name):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è slug –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"""
    if not name:
        return 'unnamed'
    slug = re.sub(r'[^\w\s-]', '', str(name).lower())
    slug = re.sub(r'[-\s]+', '-', slug)
    return slug.strip('-')

def safe_get(row, field, default=None):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ–ª—è"""
    try:
        value = row.get(field, default)
        if pd.isna(value) or value is None or value == '':
            return default
        return value
    except:
        return default

def safe_str(value, default=''):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –≤ —Å—Ç—Ä–æ–∫—É"""
    if pd.isna(value) or value is None:
        return default
    return str(value).strip()

def safe_int(value, default=0):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –≤ int"""
    if pd.isna(value) or value is None:
        return default
    try:
        return int(float(value))
    except:
        return default

def safe_float(value, default=0.0):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –≤ float"""
    if pd.isna(value) or value is None:
        return default
    try:
        return float(value)
    except:
        return default

def import_file(file_path, model_class, field_mapping):
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∏–º–ø–æ—Ä—Ç–∞ –∏–∑ Excel"""
    try:
        print(f"üìä –ò–º–ø–æ—Ä—Ç {file_path}...")
        df = pd.read_excel(file_path)
        
        if df.empty:
            print(f"‚ö†Ô∏è –§–∞–π–ª {file_path} –ø—É—Å—Ç–æ–π")
            return 0
        
        count = 0
        for _, row in df.iterrows():
            try:
                # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç —Å –ø–æ–ª—è–º–∏ –∏–∑ mapping
                obj_data = {}
                for db_field, excel_field in field_mapping.items():
                    if excel_field in row:
                        value = safe_get(row, excel_field)
                        
                        # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –ø–æ–ª–µ–π
                        if db_field in ['created_at', 'updated_at', 'parsed_at', 'last_used']:
                            obj_data[db_field] = datetime.utcnow()
                        elif db_field == 'slug':
                            obj_data[db_field] = generate_slug(value) + f'-{count}'
                        elif db_field == 'password_hash':
                            obj_data[db_field] = generate_password_hash('demo123')
                        elif 'is_' in db_field or db_field in ['active', 'published', 'verified']:
                            obj_data[db_field] = bool(value) if value is not None else False
                        elif db_field in ['gallery', 'features', 'amenities', 'transport', 'filters']:
                            obj_data[db_field] = json.dumps(value if isinstance(value, list) else [])
                        else:
                            obj_data[db_field] = value
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
                if 'name' in field_mapping.values() and not obj_data.get('name'):
                    continue
                if 'title' in field_mapping.values() and not obj_data.get('title'):
                    continue
                    
                # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç
                obj = model_class(**obj_data)
                db.session.add(obj)
                count += 1
                
            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ —Å—Ç—Ä–æ–∫–∏: {e}")
                continue
        
        db.session.commit()
        print(f"‚úÖ –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ {count} –∑–∞–ø–∏—Å–µ–π –∏–∑ {file_path}")
        return count
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ {file_path}: {e}")
        db.session.rollback()
        return 0

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∏–º–ø–æ—Ä—Ç–∞"""
    with app.app_context():
        print("üöÄ –ü–û–õ–ù–´–ô –ò–ú–ü–û–†–¢ –î–ê–ù–ù–´–• –ò–ó EXCEL –§–ê–ô–õ–û–í")
        print("=" * 60)
        
        # –û—á–∏—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —á–∏—Å—Ç–æ–≥–æ –∏–º–ø–æ—Ä—Ç–∞
        print("üßπ –û—á–∏—Å—Ç–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
        try:
            # –£–¥–∞–ª—è–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∫—Ä–æ–º–µ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö
            for table in ['properties', 'residential_complexes', 'blog_articles', 'blog_categories']:
                db.session.execute(f"DELETE FROM {table}")
            db.session.commit()
            print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –æ—á–∏—â–µ–Ω–∞")
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏: {e}")
            db.session.rollback()
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ–∞–π–ª—ã –∏ –∏—Ö –º–∞–ø–ø–∏–Ω–≥–∏
        files_mapping = {
            'attached_assets/properties_1756280785033.xlsx': {
                'model': Property,
                'fields': {
                    'title': 'title',
                    'slug': 'title',  # –ë—É–¥–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
                    'rooms': 'rooms',
                    'area': 'area',
                    'floor': 'floor',
                    'total_floors': 'total_floors',
                    'price': 'price',
                    'price_per_sqm': 'price_per_sqm',
                    'district': 'district',
                    'location': 'address',
                    'building_type': 'building_type',
                    'finishing': 'finishing',
                    'description': 'description',
                    'created_at': 'created_at'
                }
            },
            'attached_assets/residential_complexes (5)_1756280785029.xlsx': {
                'model': ResidentialComplex,
                'fields': {
                    'name': 'name',
                    'slug': 'name',
                    'district': 'district',
                    'address': 'address',
                    'completion_date': 'completion_date',
                    'building_type': 'building_type',
                    'class_type': 'class_type',
                    'description': 'description',
                    'created_at': 'created_at'
                }
            },
            'attached_assets/developers (5)_1756280785030.xlsx': {
                'model': Developer,
                'fields': {
                    'name': 'name',
                    'slug': 'name',
                    'description': 'description',
                    'phone': 'phone',
                    'email': 'email',
                    'website': 'website',
                    'address': 'address',
                    'created_at': 'created_at'
                }
            },
            'attached_assets/blog_categories (4)_1756280785032.xlsx': {
                'model': BlogCategory,
                'fields': {
                    'name': 'name',
                    'slug': 'name',
                    'description': 'description',
                    'created_at': 'created_at'
                }
            },
            'attached_assets/blog_posts (4)_1756280785031.xlsx': {
                'model': BlogArticle,
                'fields': {
                    'title': 'title',
                    'slug': 'title',
                    'content': 'content',
                    'excerpt': 'excerpt',
                    'featured_image': 'featured_image',
                    'is_published': 'is_published',
                    'created_at': 'created_at'
                }
            }
        }
        
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã
        total_imported = 0
        for file_path, config in files_mapping.items():
            if os.path.exists(file_path):
                imported = import_file(file_path, config['model'], config['fields'])
                total_imported += imported
            else:
                print(f"‚ö†Ô∏è –§–∞–π–ª {file_path} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        print(f"\nüìä –ò–¢–û–ì–û –ò–ú–ü–û–†–¢–ò–†–û–í–ê–ù–û: {total_imported} –∑–∞–ø–∏—Å–µ–π")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        print("\nüìà –§–ò–ù–ê–õ–¨–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
        try:
            print(f"–ó–∞—Å—Ç—Ä–æ–π—â–∏–∫–∏: {Developer.query.count()}")
            print(f"–ñ–∏–ª—ã–µ –∫–æ–º–ø–ª–µ–∫—Å—ã: {ResidentialComplex.query.count()}")
            print(f"–û–±—ä–µ–∫—Ç—ã –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏: {Property.query.count()}")
            print(f"–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –±–ª–æ–≥–∞: {BlogCategory.query.count()}")
            print(f"–°—Ç–∞—Ç—å–∏ –±–ª–æ–≥–∞: {BlogArticle.query.count()}")
            print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: {User.query.count()}")
            print(f"–ú–µ–Ω–µ–¥–∂–µ—Ä—ã: {Manager.query.count()}")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        
        print("\n‚úÖ –ò–ú–ü–û–†–¢ –ó–ê–í–ï–†–®–ï–ù!")

if __name__ == "__main__":
    main()