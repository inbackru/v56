#!/usr/bin/env python3
"""
–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤ –∏–∑ Excel
–°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–µ—Ç:
1. –ù–æ–≤—ã—Ö –∑–∞—Å—Ç—Ä–æ–π—â–∏–∫–æ–≤ (–µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç –≤ –±–∞–∑–µ)
2. –ù–æ–≤—ã–µ –ñ–ö (–µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç –≤ –±–∞–∑–µ)
3. –ù–æ–≤—ã–µ –∫–≤–∞—Ä—Ç–∏—Ä—ã (–¥–æ–±–∞–≤–ª—è–µ—Ç –≤ —Ç–∞–±–ª–∏—Ü—É excel_properties)
"""

import pandas as pd
import json
from flask import Flask
from app import app, db
from sqlalchemy import text
import os

def show_current_state():
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    
    with app.app_context():
        print("üìä –¢–ï–ö–£–©–ï–ï –°–û–°–¢–û–Ø–ù–ò–ï –ë–ê–ó–´ –î–ê–ù–ù–´–•:")
        print("=" * 50)
        
        # –ó–∞—Å—Ç—Ä–æ–π—â–∏–∫–∏
        developers_count = db.session.execute(text("SELECT COUNT(*) FROM developers")).scalar()
        print(f"üèóÔ∏è –ó–∞—Å—Ç—Ä–æ–π—â–∏–∫–∏: {developers_count}")
        
        # –ñ–ö
        complexes_count = db.session.execute(text("SELECT COUNT(*) FROM residential_complexes")).scalar()  
        print(f"üè¢ –ñ–∏–ª—ã–µ –∫–æ–º–ø–ª–µ–∫—Å—ã: {complexes_count}")
        
        # –ö–≤–∞—Ä—Ç–∏—Ä—ã –≤ Excel —Ç–∞–±–ª–∏—Ü–µ
        properties_count = db.session.execute(text("SELECT COUNT(*) FROM excel_properties")).scalar()
        print(f"üè† –ö–≤–∞—Ä—Ç–∏—Ä—ã –≤ excel_properties: {properties_count}")
        
        print("\nüìã –ü–û–°–õ–ï–î–ù–ò–ï –ó–ê–°–¢–†–û–ô–©–ò–ö–ò:")
        developers = db.session.execute(text("SELECT name FROM developers ORDER BY id DESC LIMIT 5")).fetchall()
        for dev in developers:
            print(f"   ‚Ä¢ {dev[0]}")
            
        print("\nüè¢ –ü–û–°–õ–ï–î–ù–ò–ï –ñ–ö:")
        complexes = db.session.execute(text("SELECT name FROM residential_complexes ORDER BY id DESC LIMIT 5")).fetchall()
        for comp in complexes:
            print(f"   ‚Ä¢ {comp[0]}")

def analyze_excel_file(filename):
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç Excel —Ñ–∞–π–ª –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —á—Ç–æ –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω–æ"""
    
    print(f"\nüîç –ê–ù–ê–õ–ò–ó –§–ê–ô–õ–ê: {filename}")
    print("=" * 50)
    
    try:
        df = pd.read_excel(filename)
        print(f"üìä –ó–∞–ø–∏—Å–µ–π –≤ —Ñ–∞–π–ª–µ: {len(df)}")
        print(f"üìã –ö–æ–ª–æ–Ω–æ–∫: {len(df.columns)}")
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∑–∞—Å—Ç—Ä–æ–π—â–∏–∫–æ–≤
        unique_developers = df['developer_name'].dropna().unique()
        print(f"\nüèóÔ∏è –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∑–∞—Å—Ç—Ä–æ–π—â–∏–∫–æ–≤: {len(unique_developers)}")
        for dev in unique_developers[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
            print(f"   ‚Ä¢ {dev}")
        if len(unique_developers) > 10:
            print(f"   ... –∏ –µ—â—ë {len(unique_developers) - 10}")
            
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ñ–ö
        unique_complexes = df['complex_name'].dropna().unique()
        print(f"\nüè¢ –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ñ–ö: {len(unique_complexes)}")
        for comp in unique_complexes[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
            print(f"   ‚Ä¢ {comp}")
        if len(unique_complexes) > 10:
            print(f"   ... –∏ –µ—â—ë {len(unique_complexes) - 10}")
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
        photos_count = df['photos'].notna().sum()
        print(f"\nüì∑ –ó–∞–ø–∏—Å–µ–π —Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º–∏: {photos_count}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ñ–∞–π–ª–∞: {e}")
        return False

def import_to_excel_table_only(filename):
    """–ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ —Ç–æ–ª—å–∫–æ –≤ —Ç–∞–±–ª–∏—Ü—É excel_properties"""
    
    print(f"\n‚ö° –ë–´–°–¢–†–´–ô –ò–ú–ü–û–†–¢ –í excel_properties")
    print("=" * 50)
    
    with app.app_context():
        try:
            df = pd.read_excel(filename)
            
            # –û—á–∏—â–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
            db.session.execute(text("DELETE FROM excel_properties"))
            print("üßπ –û—á–∏—â–µ–Ω–∞ —Ç–∞–±–ª–∏—Ü–∞ excel_properties")
            
            # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
            imported = 0
            
            for index, row in df.iterrows():
                try:
                    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
                    data = {}
                    for col in df.columns:
                        value = row[col]
                        if pd.isna(value):
                            data[col] = None
                        elif col == 'photos' and isinstance(value, str):
                            try:
                                data[col] = json.loads(value)
                            except:
                                data[col] = [value] if value else []
                        else:
                            data[col] = value
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –µ—Å–ª–∏ –Ω–µ—Ç
                    if 'inner_id' not in data or not data['inner_id']:
                        data['inner_id'] = f"new_prop_{imported + 1}"
                    
                    # –°–æ–∑–¥–∞–µ–º SQL –∑–∞–ø—Ä–æ—Å
                    columns = ', '.join([f'"{k}"' for k in data.keys()])
                    placeholders = ', '.join([f':{k}' for k in data.keys()])
                    
                    query = f'INSERT INTO excel_properties ({columns}) VALUES ({placeholders})'
                    db.session.execute(text(query), data)
                    
                    imported += 1
                    
                    if imported % 100 == 0:
                        print(f"   üì¶ –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ: {imported} –∫–≤–∞—Ä—Ç–∏—Ä...")
                        
                except Exception as e:
                    print(f"   ‚ùå –û—à–∏–±–∫–∞ —Å—Ç—Ä–æ–∫–∏ {index}: {e}")
                    continue
            
            db.session.commit()
            print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ: {imported} –∫–≤–∞—Ä—Ç–∏—Ä")
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
            db.session.rollback()
            return False

if __name__ == "__main__":
    print("üéØ –î–ï–ú–û: –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ï –°–û–ó–î–ê–ù–ò–ï –û–ë–™–ï–ö–¢–û–í –ò–ó EXCEL")
    print("=" * 60)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    show_current_state()
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–æ–≤—ã–π —Ñ–∞–π–ª
    filename = "attached_assets/–°–æ—á–∏_1756384471034.xlsx"
    if os.path.exists(filename):
        if analyze_excel_file(filename):
            # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
            success = import_to_excel_table_only(filename)
            
            if success:
                print(f"\nüéâ –ò–ú–ü–û–†–¢ –ó–ê–í–ï–†–®–ï–ù!")
                print("=" * 30)
                print("üìà –ù–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ:")
                show_current_state()
                
                print(f"\nüí° –ö–ê–ö –†–ê–ë–û–¢–ê–ï–¢ –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ï –°–û–ó–î–ê–ù–ò–ï:")
                print("=" * 50)
                print("1. üèóÔ∏è –°–∏—Å—Ç–µ–º–∞ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –∑–∞—Å—Ç—Ä–æ–π—â–∏–∫–æ–≤ –≤ excel_properties")
                print("2. üîÑ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã—Ö –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç –≤ –±–∞–∑–µ developers")
                print("3. üè¢ –ê–Ω–∞–ª–æ–≥–∏—á–Ω–æ —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–µ –ñ–ö –≤ residential_complexes")
                print("4. üè† –í—Å–µ –∫–≤–∞—Ä—Ç–∏—Ä—ã —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ excel_properties —Å –ø–æ–ª–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏")
                print("5. üîó –°–≤—è–∑–∏ –º–µ–∂–¥—É –æ–±—ä–µ–∫—Ç–∞–º–∏ —Å–æ–∑–¥–∞—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—è–º")
                print("6. üì∏ –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∏–∑–≤–ª–µ–∫–∞—é—Ç—Å—è –∏–∑ JSON –∏ –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è –Ω–∞ —Å–∞–π—Ç–µ")
                print("\nüéØ –†–ï–ó–£–õ–¨–¢–ê–¢: –í—Å–µ –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ—è–≤–ª—è—é—Ç—Å—è –Ω–∞ —Å–∞–π—Ç–µ!")
            
    else:
        print(f"‚ùå –§–∞–π–ª {filename} –Ω–µ –Ω–∞–π–¥–µ–Ω!")