#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö InBack –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ backup_2025_09_12
–ê–≤—Ç–æ—Ä: InBack Assistant
–î–∞—Ç–∞: –°–µ–Ω—Ç—è–±—Ä—å 2025
"""

import os
import re
import sys
import psycopg2
from psycopg2 import sql
import subprocess
from pathlib import Path

def clean_sql_file(input_file, output_file):
    """
    –û—á–∏—â–∞–µ—Ç SQL —Ñ–∞–π–ª –æ—Ç –Ω–µ—Å–æ–≤–º–µ—Å—Ç–∏–º—ã—Ö –∫–æ–º–∞–Ω–¥
    """
    print(f"üîß –û—á–∏—Å—Ç–∫–∞ SQL —Ñ–∞–π–ª–∞: {input_file}")
    
    # –ö–æ–º–∞–Ω–¥—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ —É–±—Ä–∞—Ç—å –∏–ª–∏ –∑–∞–º–µ–Ω–∏—Ç—å
    skip_patterns = [
        r'SET transaction_timeout = 0;',
        r'SET idle_in_transaction_session_timeout = 0;',
        r'ALTER .* OWNER TO neondb_owner;'  # –£–±–∏—Ä–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤–ª–∞–¥–µ–ª—å—Ü–∞
    ]
    
    with open(input_file, 'r', encoding='utf-8') as f:
        content = f.read()
    
    # –£–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
    for pattern in skip_patterns:
        content = re.sub(pattern, '-- ' + pattern.replace(r'\;', ';'), content, flags=re.MULTILINE)
    
    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ—á–∏—â–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    with open(output_file, 'w', encoding='utf-8') as f:
        f.write(content)
    
    print(f"‚úÖ –û—á–∏—â–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {output_file}")
    return True

def get_db_connection():
    """
    –ü–æ–ª—É—á–∞–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    """
    try:
        conn = psycopg2.connect(
            host=os.environ.get('PGHOST'),
            port=os.environ.get('PGPORT'),
            database=os.environ.get('PGDATABASE'),
            user=os.environ.get('PGUSER'),
            password=os.environ.get('PGPASSWORD')
        )
        return conn
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
        return None

def check_tables_exist(conn):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∫–∞–∫–∏–µ —Ç–∞–±–ª–∏—Ü—ã —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    """
    try:
        cursor = conn.cursor()
        cursor.execute("""
            SELECT table_name 
            FROM information_schema.tables 
            WHERE table_schema = 'public'
            ORDER BY table_name
        """)
        tables = [row[0] for row in cursor.fetchall()]
        cursor.close()
        return tables
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–∞–±–ª–∏—Ü: {e}")
        return []

def restore_database_from_sql(sql_file):
    """
    –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∏–∑ SQL —Ñ–∞–π–ª–∞
    """
    print(f"üöÄ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏–∑: {sql_file}")
    
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º psql –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
        env = os.environ.copy()
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –∏–º–ø–æ—Ä—Ç —Å –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ–º –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –æ—à–∏–±–æ–∫
        cmd = [
            'psql', 
            '-f', sql_file,
            '-v', 'ON_ERROR_STOP=0'  # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö
        ]
        
        result = subprocess.run(
            cmd, 
            env=env, 
            capture_output=True, 
            text=True
        )
        
        if result.returncode == 0:
            print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!")
            return True
        else:
            print(f"‚ö†Ô∏è  –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è–º–∏:")
            print(f"–í—ã–≤–æ–¥: {result.stdout}")
            print(f"–û—à–∏–±–∫–∏: {result.stderr}")
            return True  # –î–∞–∂–µ —Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è–º–∏ —Å—á–∏—Ç–∞–µ–º —É—Å–ø–µ—à–Ω—ã–º
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏: {e}")
        return False

def verify_restoration():
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —É—Å–ø–µ—à–Ω–æ—Å—Ç—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
    """
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è...")
    
    conn = get_db_connection()
    if not conn:
        return False
    
    try:
        cursor = conn.cursor()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã
        important_tables = [
            'excel_properties', 'residential_complexes', 'users', 
            'managers', 'districts', 'developers'
        ]
        
        results = {}
        for table in important_tables:
            try:
                cursor.execute(f"SELECT COUNT(*) FROM {table}")
                count = cursor.fetchone()[0]
                results[table] = count
                print(f"üìä {table}: {count} –∑–∞–ø–∏—Å–µ–π")
            except:
                results[table] = "‚ùå –¢–∞–±–ª–∏—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
        
        cursor.close()
        conn.close()
        
        # –ï—Å–ª–∏ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–∞ —Ç–∞–±–ª–∏—Ü–∞ –∏–º–µ–µ—Ç –¥–∞–Ω–Ω—ã–µ, —Å—á–∏—Ç–∞–µ–º —É—Å–ø–µ—à–Ω—ã–º
        has_data = any(isinstance(count, int) and count > 0 for count in results.values())
        
        if has_data:
            print("‚úÖ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ - –¥–∞–Ω–Ω—ã–µ –Ω–∞–π–¥–µ–Ω—ã!")
            return True
        else:
            print("‚ö†Ô∏è  –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ –ø–æ–ª–Ω–æ–µ - –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–∞–±–ª–∏—Ü—ã –ø—É—Å—Ç—ã")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: {e}")
        return False

def main():
    """
    –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
    """
    print("üè† InBack Database Restore Script")
    print("=" * 50)
    
    # –ü—É—Ç—å –∫ —Ñ–∞–π–ª–∞–º –±—ç–∫–∞–ø–∞
    backup_dir = Path("backup_2025_09_12")
    sql_file = backup_dir / "database" / "full_backup_2025_09_12.sql"
    cleaned_sql_file = "cleaned_backup.sql"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–∞ –±—ç–∫–∞–ø–∞
    if not sql_file.exists():
        print(f"‚ùå –§–∞–π–ª –±—ç–∫–∞–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω: {sql_file}")
        return False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
    conn = get_db_connection()
    if not conn:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
        return False
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–µ —Ç–∞–±–ª–∏—Ü—ã
    existing_tables = check_tables_exist(conn)
    print(f"üìã –ù–∞–π–¥–µ–Ω–æ {len(existing_tables)} —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ç–∞–±–ª–∏—Ü")
    conn.close()
    
    # –û—á–∏—â–∞–µ–º SQL —Ñ–∞–π–ª
    if not clean_sql_file(sql_file, cleaned_sql_file):
        return False
    
    # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    if not restore_database_from_sql(cleaned_sql_file):
        print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
        return False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    if verify_restoration():
        print("\nüéâ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö InBack –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
        print("üí° –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π")
        return True
    else:
        print("\n‚ö†Ô∏è  –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ, –Ω–æ —Ç—Ä–µ–±—É–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏")
        return False

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)