#!/usr/bin/env python3
"""
–ò–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –∏–∑ JSON —Ñ–∞–π–ª–æ–≤ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö PostgreSQL
"""

import json
import os
import re
from app import app, db
from models import *
from datetime import datetime

def generate_slug(name):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è slug –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"""
    # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ —Å–∏–º–≤–æ–ª—ã –∏ –ø—Ä–∏–≤–æ–¥–∏–º –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É
    slug = re.sub(r'[^\w\s-]', '', name.lower())
    # –ó–∞–º–µ–Ω—è–µ–º –ø—Ä–æ–±–µ–ª—ã –Ω–∞ –¥–µ—Ñ–∏—Å—ã
    slug = re.sub(r'[-\s]+', '-', slug)
    # –£–±–∏—Ä–∞–µ–º –¥–µ—Ñ–∏—Å—ã –≤ –Ω–∞—á–∞–ª–µ –∏ –∫–æ–Ω—Ü–µ
    return slug.strip('-')

def import_developers():
    """–ò–º–ø–æ—Ä—Ç –∑–∞—Å—Ç—Ä–æ–π—â–∏–∫–æ–≤"""
    try:
        with open('inback_production_ready_v3/data/developers.json', 'r', encoding='utf-8') as f:
            developers_data = json.load(f)
        
        print(f"üèóÔ∏è –ò–º–ø–æ—Ä—Ç {len(developers_data)} –∑–∞—Å—Ç—Ä–æ–π—â–∏–∫–æ–≤...")
        
        for dev_data in developers_data:
            existing = Developer.query.filter_by(name=dev_data['name']).first()
            if not existing:
                developer = Developer(
                    name=dev_data['name'],
                    slug=generate_slug(dev_data['name']),
                    description=dev_data.get('description', ''),
                    phone=dev_data.get('phone', ''),
                    email=dev_data.get('email', ''),
                    website=dev_data.get('website', ''),
                    logo_url=dev_data.get('logo_url', ''),
                    address=dev_data.get('address', '')
                )
                db.session.add(developer)
        
        db.session.commit()
        print(f"‚úÖ –ó–∞—Å—Ç—Ä–æ–π—â–∏–∫–∏ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã: {Developer.query.count()}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –∑–∞—Å—Ç—Ä–æ–π—â–∏–∫–æ–≤: {e}")

def import_residential_complexes():
    """–ò–º–ø–æ—Ä—Ç –∂–∏–ª—ã—Ö –∫–æ–º–ø–ª–µ–∫—Å–æ–≤"""
    try:
        with open('inback_production_ready_v3/data/residential_complexes.json', 'r', encoding='utf-8') as f:
            complexes_data = json.load(f)
        
        print(f"üè¢ –ò–º–ø–æ—Ä—Ç {len(complexes_data)} –∂–∏–ª—ã—Ö –∫–æ–º–ø–ª–µ–∫—Å–æ–≤...")
        
        for complex_data in complexes_data:
            existing = ResidentialComplex.query.filter_by(name=complex_data['name']).first()
            if not existing:
                # –ù–∞—Ö–æ–¥–∏–º –∑–∞—Å—Ç—Ä–æ–π—â–∏–∫–∞
                developer = Developer.query.filter_by(name=complex_data.get('developer', '')).first()
                if not developer:
                    developer = Developer.query.first()  # –ë–µ—Ä—ë–º –ø–µ—Ä–≤–æ–≥–æ –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ
                
                complex_obj = ResidentialComplex(
                    name=complex_data['name'],
                    slug=generate_slug(complex_data['name']),
                    developer_id=developer.id if developer else None,
                    district=complex_data.get('district', ''),
                    address=complex_data.get('address', ''),
                    completion_date=complex_data.get('completion_date', ''),
                    building_type=complex_data.get('building_type', ''),
                    class_type=complex_data.get('class_type', ''),
                    description=complex_data.get('description', ''),
                    amenities=json.dumps(complex_data.get('amenities', [])),
                    transport=json.dumps(complex_data.get('transport', [])),
                    image_url=complex_data.get('image_url', ''),
                    gallery=json.dumps(complex_data.get('gallery', []))
                )
                db.session.add(complex_obj)
        
        db.session.commit()
        print(f"‚úÖ –ñ–∏–ª—ã–µ –∫–æ–º–ø–ª–µ–∫—Å—ã –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã: {ResidentialComplex.query.count()}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –∂–∏–ª—ã—Ö –∫–æ–º–ø–ª–µ–∫—Å–æ–≤: {e}")

def import_properties():
    """–ò–º–ø–æ—Ä—Ç –æ–±—ä–µ–∫—Ç–æ–≤ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏"""
    try:
        with open('inback_production_ready_v3/data/properties.json', 'r', encoding='utf-8') as f:
            properties_data = json.load(f)
        
        print(f"üè† –ò–º–ø–æ—Ä—Ç {len(properties_data)} –æ–±—ä–µ–∫—Ç–æ–≤ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏...")
        
        for prop_data in properties_data:
            existing = Property.query.filter_by(
                title=prop_data['title']
            ).first()
            
            if not existing:
                # –ù–∞—Ö–æ–¥–∏–º –∑–∞—Å—Ç—Ä–æ–π—â–∏–∫–∞
                developer = Developer.query.filter_by(name=prop_data.get('developer', '')).first()
                if not developer:
                    developer = Developer.query.first()
                
                # –ù–∞—Ö–æ–¥–∏–º –∂–∏–ª–æ–π –∫–æ–º–ø–ª–µ–∫—Å
                residential_complex = ResidentialComplex.query.filter_by(
                    name=prop_data.get('residential_complex', '')
                ).first()
                
                property_obj = Property(
                    title=prop_data['title'],
                    slug=generate_slug(prop_data['title']),
                    rooms=prop_data.get('rooms', 1),
                    area=float(prop_data.get('area', 0)),
                    floor=prop_data.get('floor', 1),
                    total_floors=prop_data.get('total_floors', 1),
                    price=int(prop_data.get('price', 0)),
                    price_per_sqm=int(prop_data.get('price_per_sqm', 0)),
                    district=prop_data.get('district', ''),
                    location=prop_data.get('address', ''),  # –ò—Å–ø–æ–ª—å–∑—É–µ–º location –≤–º–µ—Å—Ç–æ address
                    building_type=prop_data.get('building_type', ''),
                    finishing=prop_data.get('finishing', ''),
                    has_balcony=prop_data.get('has_balcony', False),
                    mortgage_available=prop_data.get('mortgage_available', True),
                    preferential_mortgage=prop_data.get('preferential_mortgage', False),
                    family_mortgage=prop_data.get('family_mortgage', False),
                    it_mortgage=prop_data.get('it_mortgage', False),
                    property_type=prop_data.get('property_type', '–ö–≤–∞—Ä—Ç–∏—Ä–∞'),
                    description=prop_data.get('description', ''),
                    image=prop_data.get('image', ''),
                    gallery=json.dumps(prop_data.get('gallery', [])),
                    developer_id=developer.id if developer else None,
                    residential_complex_id=residential_complex.id if residential_complex else None,
                    created_at=datetime.utcnow()
                )
                db.session.add(property_obj)
        
        db.session.commit()
        print(f"‚úÖ –û–±—ä–µ–∫—Ç—ã –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã: {Property.query.count()}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –æ–±—ä–µ–∫—Ç–æ–≤ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏: {e}")

def import_blog_categories():
    """–ò–º–ø–æ—Ä—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–π –±–ª–æ–≥–∞"""
    try:
        with open('inback_production_ready_v3/data/blog_categories.json', 'r', encoding='utf-8') as f:
            categories_data = json.load(f)
        
        print(f"üìö –ò–º–ø–æ—Ä—Ç {len(categories_data)} –∫–∞—Ç–µ–≥–æ—Ä–∏–π –±–ª–æ–≥–∞...")
        
        for cat_data in categories_data:
            existing = BlogCategory.query.filter_by(name=cat_data['name']).first()
            if not existing:
                category = BlogCategory(
                    name=cat_data['name'],
                    slug=generate_slug(cat_data['name']),
                    description=cat_data.get('description', ''),
                    created_at=datetime.utcnow()
                )
                db.session.add(category)
        
        db.session.commit()
        print(f"‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –±–ª–æ–≥–∞ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã: {BlogCategory.query.count()}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –±–ª–æ–≥–∞: {e}")

def import_blog_articles():
    """–ò–º–ø–æ—Ä—Ç —Å—Ç–∞—Ç–µ–π –±–ª–æ–≥–∞"""
    try:
        with open('inback_production_ready_v3/data/blog_articles.json', 'r', encoding='utf-8') as f:
            articles_data = json.load(f)
        
        print(f"üìù –ò–º–ø–æ—Ä—Ç {len(articles_data)} —Å—Ç–∞—Ç–µ–π –±–ª–æ–≥–∞...")
        
        for article_data in articles_data:
            existing = BlogArticle.query.filter_by(title=article_data['title']).first()
            if not existing:
                # –ù–∞—Ö–æ–¥–∏–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é
                category = BlogCategory.query.filter_by(
                    name=article_data.get('category', '')
                ).first()
                
                article = BlogArticle(
                    title=article_data['title'],
                    slug=generate_slug(article_data['title']),
                    content=article_data.get('content', ''),
                    excerpt=article_data.get('excerpt', ''),
                    featured_image=article_data.get('featured_image', ''),
                    category_id=category.id if category else None,
                    is_published=article_data.get('is_published', True),
                    created_at=datetime.utcnow(),
                    updated_at=datetime.utcnow()
                )
                db.session.add(article)
        
        db.session.commit()
        print(f"‚úÖ –°—Ç–∞—Ç—å–∏ –±–ª–æ–≥–∞ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã: {BlogArticle.query.count()}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ —Å—Ç–∞—Ç–µ–π –±–ª–æ–≥–∞: {e}")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∏–º–ø–æ—Ä—Ç–∞"""
    with app.app_context():
        print("üöÄ –ò–ú–ü–û–†–¢ –î–ê–ù–ù–´–• –ò–ó JSON –§–ê–ô–õ–û–í")
        print("=" * 50)
        
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
        import_developers()
        import_residential_complexes()
        import_properties()
        import_blog_categories()
        import_blog_articles()
        
        print("\nüìä –§–ò–ù–ê–õ–¨–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê")
        try:
            print(f"–ó–∞—Å—Ç—Ä–æ–π—â–∏–∫–∏: {Developer.query.count()}")
            print(f"–ñ–∏–ª—ã–µ –∫–æ–º–ø–ª–µ–∫—Å—ã: {ResidentialComplex.query.count()}")
            print(f"–û–±—ä–µ–∫—Ç—ã –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏: {Property.query.count()}")
            print(f"–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –±–ª–æ–≥–∞: {BlogCategory.query.count()}")
            print(f"–°—Ç–∞—Ç—å–∏ –±–ª–æ–≥–∞: {BlogArticle.query.count()}")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            db.session.rollback()
        
        print("\n‚úÖ –ò–ú–ü–û–†–¢ –ó–ê–í–ï–†–®–ï–ù!")

if __name__ == "__main__":
    main()