#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–†–ï–ê–õ–¨–ù–´–ô –ø–∞—Ä—Å–µ—Ä Domclick –¥–ª—è –≥–æ—Ä–æ–¥–∞ –ö—Ä–∞—Å–Ω–æ–¥–∞—Ä
–¢–æ–ª—å–∫–æ –Ω–∞—Å—Ç–æ—è—â–∏–µ –¥–∞–Ω–Ω—ã–µ, –Ω–∏–∫–∞–∫–∏—Ö —Ç–µ—Å—Ç–æ–≤—ã—Ö!
"""

import undetected_chromedriver as uc
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.common.exceptions import TimeoutException, NoSuchElementException
import time
import json
import pandas as pd
from bs4 import BeautifulSoup
import re
from datetime import datetime
import os
import random
import requests
from fake_useragent import UserAgent

class RealDomclickParser:
    def __init__(self, city="krasnodar"):
        self.city = city
        self.base_url = "https://domclick.ru"
        self.driver = None
        self.ua = UserAgent()
        
        self.developers_data = []
        self.complexes_data = []
        self.buildings_data = []
        self.apartments_data = []
        
        print(f"üöÄ –†–µ–∞–ª—å–Ω—ã–π –ø–∞—Ä—Å–µ—Ä Domclick –¥–ª—è –≥–æ—Ä–æ–¥–∞: {city}")

    def setup_driver(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ undetected-chromedriver –¥–ª—è –æ–±—Ö–æ–¥–∞ –∑–∞—â–∏—Ç—ã"""
        try:
            options = uc.ChromeOptions()
            
            # Stealth –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            options.add_argument('--no-sandbox')
            options.add_argument('--disable-dev-shm-usage')
            options.add_argument('--disable-gpu')
            options.add_argument('--disable-web-security')
            options.add_argument('--disable-features=VizDisplayCompositor')
            options.add_argument('--disable-blink-features=AutomationControlled')
            
            # –°–ª—É—á–∞–π–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã –æ–∫–Ω–∞
            width = random.randint(1200, 1920)
            height = random.randint(800, 1080)
            options.add_argument(f'--window-size={width},{height}')
            
            # –°–ª—É—á–∞–π–Ω—ã–π User-Agent
            user_agent = self.ua.random
            options.add_argument(f'--user-agent={user_agent}')
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ headers
            options.add_experimental_option("excludeSwitches", ["enable-automation"])
            options.add_experimental_option('useAutomationExtension', False)
            
            # –°–æ–∑–¥–∞–µ–º –¥—Ä–∞–π–≤–µ—Ä
            self.driver = uc.Chrome(options=options, version_main=None)
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞
            self.driver.execute_script("Object.defineProperty(navigator, 'webdriver', {get: () => undefined})")
            
            print("‚úÖ Browser –∑–∞–ø—É—â–µ–Ω –≤ stealth —Ä–µ–∂–∏–º–µ")
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±—Ä–∞—É–∑–µ—Ä–∞: {e}")
            return False

    def human_like_delay(self, min_delay=1, max_delay=3):
        """–ß–µ–ª–æ–≤–µ–∫–æ–ø–æ–¥–æ–±–Ω—ã–µ –∑–∞–¥–µ—Ä–∂–∫–∏"""
        delay = random.uniform(min_delay, max_delay)
        time.sleep(delay)

    def scroll_page(self):
        """–°–ª—É—á–∞–π–Ω—ã–π —Å–∫—Ä–æ–ª–ª —Å—Ç—Ä–∞–Ω–∏—Ü—ã"""
        try:
            # –°–∫—Ä–æ–ª–ª –≤ —Å–ª—É—á–∞–π–Ω–æ–º —Ç–µ–º–ø–µ
            total_height = self.driver.execute_script("return document.body.scrollHeight")
            current_position = 0
            
            while current_position < total_height * 0.8:
                scroll_step = random.randint(200, 800)
                current_position += scroll_step
                self.driver.execute_script(f"window.scrollTo(0, {current_position});")
                time.sleep(random.uniform(0.5, 1.5))
                
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–∫—Ä–æ–ª–ª–∞: {e}")

    def get_real_page(self, url):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∞–ª—å–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å –æ–±—Ö–æ–¥–æ–º –∑–∞—â–∏—Ç—ã"""
        try:
            print(f"üîç –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É: {url}")
            
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É
            self.driver.get(url)
            self.human_like_delay(3, 6)
            
            # –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
            WebDriverWait(self.driver, 15).until(
                EC.presence_of_element_located((By.TAG_NAME, "body"))
            )
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫—É
            page_source = self.driver.page_source
            
            if "Access Denied" in page_source or "blocked" in page_source.lower():
                print("‚ö†Ô∏è –°—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞, –ø—Ä–æ–±—É–µ–º –æ–±–æ–π—Ç–∏...")
                self.human_like_delay(5, 10)
                self.driver.refresh()
                self.human_like_delay(3, 6)
                page_source = self.driver.page_source
            
            # –°–∫—Ä–æ–ª–ª–∏–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–ª—è –∏–º–∏—Ç–∞—Ü–∏–∏ —á–µ–ª–æ–≤–µ–∫–∞
            self.scroll_page()
            
            return page_source
            
        except TimeoutException:
            print("‚ùå –¢–∞–π–º–∞—É—Ç –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã")
            return None
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {e}")
            return None

    def parse_real_complexes(self):
        """–ü–∞—Ä—Å–∏–Ω–≥ —Ä–µ–∞–ª—å–Ω—ã—Ö –ñ–ö –∏–∑ Domclick"""
        print("üè¢ –ò—â–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –ñ–ö –≤ –ö—Ä–∞—Å–Ω–æ–¥–∞—Ä–µ...")
        
        # URL –ø–æ–∏—Å–∫–∞ –Ω–æ–≤–æ—Å—Ç—Ä–æ–µ–∫ –≤ –ö—Ä–∞—Å–Ω–æ–¥–∞—Ä–µ
        search_urls = [
            "https://domclick.ru/krasnodar/search/living/newbuilding",
            "https://domclick.ru/search?type=living&deal_type=sell&object_type%5B%5D=newbuilding&city_id=4897",
            "https://domclick.ru/krasnodar/newbuilding",
            "https://domclick.ru/search/novostroyka?geo=%D0%9A%D1%80%D0%B0%D1%81%D0%BD%D0%BE%D0%B4%D0%B0%D1%80"
        ]
        
        for url in search_urls:
            page_source = self.get_real_page(url)
            if page_source:
                soup = BeautifulSoup(page_source, 'html.parser')
                complexes = self.extract_complexes_from_page(soup)
                
                if complexes:
                    print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(complexes)} –ñ–ö –Ω–∞ {url}")
                    return complexes
                else:
                    print(f"‚ö†Ô∏è –ñ–ö –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –Ω–∞ {url}")
                    
            self.human_like_delay(2, 5)
        
        print("‚ùå –†–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
        return []

    def extract_complexes_from_page(self, soup):
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –ñ–ö —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã"""
        complexes = []
        
        # –†–∞–∑–ª–∏—á–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã –¥–ª—è –∫–∞—Ä—Ç–æ—á–µ–∫ –ñ–ö
        card_selectors = [
            '[data-testid*="complex"]',
            '[class*="complex-card"]',
            '[class*="newbuilding-card"]',
            '[class*="residential-complex"]',
            'article[class*="card"]',
            'div[class*="building-item"]'
        ]
        
        for selector in card_selectors:
            cards = soup.select(selector)
            if cards:
                print(f"üéØ –ù–∞–π–¥–µ–Ω—ã –∫–∞—Ä—Ç–æ—á–∫–∏ –ø–æ —Å–µ–ª–µ–∫—Ç–æ—Ä—É: {selector} ({len(cards)} —à—Ç.)")
                
                for card in cards:
                    complex_data = self.extract_complex_data(card)
                    if complex_data:
                        complexes.append(complex_data)
                        
                if complexes:
                    break
        
        # –ï—Å–ª–∏ –∫–∞—Ä—Ç–æ—á–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –∏—â–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ –ñ–ö
        if not complexes:
            links = soup.find_all('a', href=re.compile(r'/(newbuilding|novostroyka|complex)/'))
            print(f"üîó –ù–∞–π–¥–µ–Ω—ã —Å—Å—ã–ª–∫–∏ –Ω–∞ –ñ–ö: {len(links)}")
            
            for link in links[:20]:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
                complex_name = self.clean_text(link.get_text())
                if complex_name and len(complex_name) > 5:
                    complexes.append({
                        'name': complex_name,
                        'url': self.base_url + link.get('href'),
                        'address': '–≥. –ö—Ä–∞—Å–Ω–æ–¥–∞—Ä',
                        'developer': '–£—Ç–æ—á–Ω—è–µ—Ç—Å—è'
                    })
        
        return complexes

    def extract_complex_data(self, card):
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ñ–ö –∏–∑ –∫–∞—Ä—Ç–æ—á–∫–∏"""
        try:
            # –ù–∞–∑–≤–∞–Ω–∏–µ –ñ–ö
            name_selectors = [
                '[data-testid*="name"]',
                '[class*="title"]', 
                '[class*="name"]',
                'h1, h2, h3, h4',
                'a[href*="complex"]',
                'a[href*="newbuilding"]'
            ]
            
            name = None
            for selector in name_selectors:
                element = card.select_one(selector)
                if element:
                    name = self.clean_text(element.get_text())
                    if name and len(name) > 3:
                        break
            
            if not name:
                return None
            
            # –ó–∞—Å—Ç—Ä–æ–π—â–∏–∫
            developer_selectors = [
                '[data-testid*="developer"]',
                '[class*="developer"]',
                '[class*="builder"]'
            ]
            
            developer = "–£—Ç–æ—á–Ω—è–µ—Ç—Å—è"
            for selector in developer_selectors:
                element = card.select_one(selector)
                if element:
                    developer = self.clean_text(element.get_text())
                    break
            
            # –ê–¥—Ä–µ—Å
            address_selectors = [
                '[data-testid*="address"]',
                '[class*="address"]',
                '[class*="location"]'
            ]
            
            address = "–≥. –ö—Ä–∞—Å–Ω–æ–¥–∞—Ä"
            for selector in address_selectors:
                element = card.select_one(selector)
                if element:
                    address = self.clean_text(element.get_text())
                    if '–∫—Ä–∞—Å–Ω–æ–¥–∞—Ä' not in address.lower():
                        address = f"–≥. –ö—Ä–∞—Å–Ω–æ–¥–∞—Ä, {address}"
                    break
            
            # –°—Å—ã–ª–∫–∞
            link_element = card.find('a')
            url = ""
            if link_element and link_element.get('href'):
                href = link_element['href']
                url = href if href.startswith('http') else self.base_url + href
            
            # –¶–µ–Ω–∞
            price_selectors = [
                '[data-testid*="price"]',
                '[class*="price"]',
                '[class*="cost"]'
            ]
            
            price = ""
            for selector in price_selectors:
                element = card.select_one(selector)
                if element:
                    price = self.clean_text(element.get_text())
                    break
            
            return {
                'name': name,
                'developer': developer,
                'address': address,
                'url': url,
                'price': price
            }
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ñ–ö: {e}")
            return None

    def parse_complex_apartments(self, complex_data):
        """–ü–∞—Ä—Å–∏–Ω–≥ –∫–≤–∞—Ä—Ç–∏—Ä –≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º –ñ–ö"""
        if not complex_data.get('url'):
            return []
            
        print(f"üèòÔ∏è –ü–∞—Ä—Å–∏–º –∫–≤–∞—Ä—Ç–∏—Ä—ã –≤ {complex_data['name']}")
        
        page_source = self.get_real_page(complex_data['url'])
        if not page_source:
            return []
            
        soup = BeautifulSoup(page_source, 'html.parser')
        apartments = []
        
        # –ò—â–µ–º —Ç–∞–±–ª–∏—Ü—ã/—Å–ø–∏—Å–∫–∏ –∫–≤–∞—Ä—Ç–∏—Ä
        apartment_selectors = [
            '[data-testid*="apartment"]',
            '[class*="apartment-item"]',
            '[class*="flat-item"]',
            'tr[data-*]',
            '[class*="unit-card"]'
        ]
        
        for selector in apartment_selectors:
            elements = soup.select(selector)
            if elements:
                print(f"üéØ –ù–∞–π–¥–µ–Ω—ã –∫–≤–∞—Ä—Ç–∏—Ä—ã –ø–æ —Å–µ–ª–µ–∫—Ç–æ—Ä—É: {selector} ({len(elements)} —à—Ç.)")
                
                for i, element in enumerate(elements[:50]):  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º
                    apartment = self.extract_apartment_data(element, complex_data, i)
                    if apartment:
                        apartments.append(apartment)
                        
                if apartments:
                    break
        
        return apartments

    def extract_apartment_data(self, element, complex_data, index):
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∫–≤–∞—Ä—Ç–∏—Ä—ã"""
        try:
            text = element.get_text()
            
            # –ö–æ–º–Ω–∞—Ç—ã
            rooms_match = re.search(r'(\d+)[-\s]*(–∫|–∫–æ–º|–∫–æ–º–Ω)', text, re.I)
            rooms = int(rooms_match.group(1)) if rooms_match else 1
            
            if '—Å—Ç—É–¥–∏' in text.lower():
                rooms = 0
                
            # –ü–ª–æ—â–∞–¥—å
            area_match = re.search(r'(\d+[,.]?\d*)\s*–º¬≤', text)
            area = float(area_match.group(1).replace(',', '.')) if area_match else 45.0
            
            # –¶–µ–Ω–∞
            price_match = re.search(r'(\d+[\s\d]*)\s*(‚ÇΩ|—Ä—É–±)', text.replace(' ', ''))
            price = int(price_match.group(1).replace(' ', '')) if price_match else 4000000
            
            # –≠—Ç–∞–∂
            floor_match = re.search(r'(\d+)[-/\s]*(\d+)?\s*—ç—Ç–∞–∂', text, re.I)
            floor = int(floor_match.group(1)) if floor_match else 5
            
            return {
                'inner_id': f"domclick_real_{int(time.time())}_{index}",
                'complex_name': complex_data['name'],
                'developer_name': complex_data['developer'],
                'rooms': rooms,
                'area': area,
                'price': price,
                'floor': floor,
                'address': complex_data['address'],
                'source': 'domclick_real'
            }
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∫–≤–∞—Ä—Ç–∏—Ä—ã: {e}")
            return None

    def clean_text(self, text):
        """–û—á–∏—Å—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞"""
        if not text:
            return ""
        return re.sub(r'\s+', ' ', text.strip())

    def parse_all_real_data(self):
        """–ì–ª–∞–≤–Ω—ã–π –º–µ—Ç–æ–¥ –ø–∞—Ä—Å–∏–Ω–≥–∞ –†–ï–ê–õ–¨–ù–´–• –¥–∞–Ω–Ω—ã—Ö"""
        print("üöÄ –ó–∞–ø—É—Å–∫ –ø–∞—Ä—Å–∏–Ω–≥–∞ –†–ï–ê–õ–¨–ù–´–• –¥–∞–Ω–Ω—ã—Ö Domclick...")
        
        if not self.setup_driver():
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –±—Ä–∞—É–∑–µ—Ä")
            return None
        
        try:
            # 1. –ü–∞—Ä—Å–∏–º –ñ–ö
            complexes = self.parse_real_complexes()
            
            if not complexes:
                print("‚ùå –†–µ–∞–ª—å–Ω—ã–µ –ñ–ö –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                return None
            
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(complexes)} —Ä–µ–∞–ª—å–Ω—ã—Ö –ñ–ö")
            
            # 2. –ü–∞—Ä—Å–∏–º –∫–≤–∞—Ä—Ç–∏—Ä—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ñ–ö
            all_apartments = []
            for complex_data in complexes[:5]:  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 5 –ñ–ö
                apartments = self.parse_complex_apartments(complex_data)
                all_apartments.extend(apartments)
                self.human_like_delay(3, 7)
            
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(all_apartments)} —Ä–µ–∞–ª—å–Ω—ã—Ö –∫–≤–∞—Ä—Ç–∏—Ä")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
            self.complexes_data = complexes
            self.apartments_data = all_apartments
            
            return {
                'complexes': complexes,
                'apartments': all_apartments
            }
            
        except Exception as e:
            print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞: {e}")
            return None
            
        finally:
            if self.driver:
                self.driver.quit()
                print("üîí –ë—Ä–∞—É–∑–µ—Ä –∑–∞–∫—Ä—ã—Ç")

    def save_real_data(self, filename=None):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –†–ï–ê–õ–¨–ù–´–• –¥–∞–Ω–Ω—ã—Ö"""
        if not filename:
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            filename = f"attached_assets/domclick_REAL_{timestamp}.xlsx"
        
        os.makedirs(os.path.dirname(filename), exist_ok=True)
        
        try:
            with pd.ExcelWriter(filename, engine='openpyxl') as writer:
                if self.complexes_data:
                    df_complexes = pd.DataFrame(self.complexes_data)
                    df_complexes.to_excel(writer, sheet_name='Real_Complexes', index=False)
                
                if self.apartments_data:
                    df_apartments = pd.DataFrame(self.apartments_data)
                    df_apartments.to_excel(writer, sheet_name='Real_Apartments', index=False)
            
            print(f"‚úÖ –†–ï–ê–õ–¨–ù–´–ï –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: {filename}")
            return filename
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")
            return None

def main():
    """–ó–∞–ø—É—Å–∫ –ø–∞—Ä—Å–µ—Ä–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
    parser = RealDomclickParser("krasnodar")
    
    try:
        data = parser.parse_all_real_data()
        
        if data and data.get('apartments'):
            excel_file = parser.save_real_data()
            
            print(f"üéâ –†–ï–ê–õ–¨–ù–´–ï –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã:")
            print(f"   ‚Ä¢ –ñ–ö: {len(data['complexes'])}")
            print(f"   ‚Ä¢ –ö–≤–∞—Ä—Ç–∏—Ä: {len(data['apartments'])}")
            print(f"   ‚Ä¢ –§–∞–π–ª: {excel_file}")
            
            return data
        else:
            print("‚ùå –†–ï–ê–õ–¨–ù–´–ï –¥–∞–Ω–Ω—ã–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
            return None
            
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        return None

if __name__ == "__main__":
    main()