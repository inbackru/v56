#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import os
import sys
import json
import time
import logging
from sqlalchemy import create_engine, text
from sqlalchemy.orm import sessionmaker
from infrastructure_api import get_infrastructure_summary

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(message)s')

def update_all_districts_infrastructure():
    """
    –û–±–Ω–æ–≤–ª—è–µ—Ç –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–ª—è –í–°–ï–• —Ä–∞–π–æ–Ω–æ–≤ —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏
    """
    
    database_url = os.environ.get('DATABASE_URL')
    if not database_url:
        logging.error("‚ùå DATABASE_URL –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False
    
    try:
        engine = create_engine(database_url)
        Session = sessionmaker(bind=engine)
        session = Session()
        
        # –ü–æ–ª—É—á–∞–µ–º –í–°–ï —Ä–∞–π–æ–Ω—ã —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏, —É –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ—Ç –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∏–ª–∏ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è
        districts_query = text("""
            SELECT id, name, slug, latitude, longitude 
            FROM districts 
            WHERE latitude IS NOT NULL AND longitude IS NOT NULL
            AND (infrastructure_data IS NULL OR distance_to_center IS NULL)
            ORDER BY name
        """)
        
        districts = session.execute(districts_query).fetchall()
        total_districts = len(districts)
        
        logging.info(f"üèòÔ∏è –ù–∞–π–¥–µ–Ω–æ {total_districts} —Ä–∞–π–æ–Ω–æ–≤ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã")
        
        success_count = 0
        error_count = 0
        
        for i, district in enumerate(districts, 1):
            district_id, name, slug, lat, lng = district
            
            logging.info(f"üìç [{i}/{total_districts}] –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Ä–∞–π–æ–Ω: {name}")
            
            try:
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—É
                infrastructure = get_infrastructure_summary(float(lat), float(lng))
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
                update_query = text("""
                    UPDATE districts 
                    SET 
                        distance_to_center = :distance,
                        infrastructure_data = :infrastructure_json,
                        updated_at = NOW()
                    WHERE id = :district_id
                """)
                
                session.execute(update_query, {
                    'distance': infrastructure['distance_to_center'],
                    'infrastructure_json': json.dumps(infrastructure, ensure_ascii=False),
                    'district_id': district_id
                })
                
                session.commit()
                success_count += 1
                
                logging.info(f"  ‚úÖ {name}: {infrastructure['distance_to_center']} –∫–º –æ—Ç —Ü–µ–Ω—Ç—Ä–∞")
                logging.info(f"     üè• –ú–µ–¥–∏—Ü–∏–Ω–∞: {infrastructure['medical_count']}, üéì –û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ: {infrastructure['education_count']}")
                
                # –ü–∞—É–∑–∞ –¥–ª—è API
                time.sleep(1)
                
            except Exception as e:
                logging.error(f"  ‚ùå –û—à–∏–±–∫–∞ –¥–ª—è —Ä–∞–π–æ–Ω–∞ {name}: {e}")
                error_count += 1
                session.rollback()
                continue
        
        session.close()
        
        logging.info(f"\\nüìà –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
        logging.info(f"   ‚úÖ –£—Å–ø–µ—à–Ω–æ: {success_count}")
        logging.info(f"   ‚ùå –û—à–∏–±–∫–∏: {error_count}")
        
        return success_count > 0
        
    except Exception as e:
        logging.error(f"‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    logging.info("üöÄ –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ä–∞–π–æ–Ω–æ–≤")
    success = update_all_districts_infrastructure()
    
    if success:
        logging.info("‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ")
        exit(0)
    else:
        logging.error("‚ùå –û—à–∏–±–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è")
        exit(1)

if __name__ == "__main__":
    main()