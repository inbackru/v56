#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import os
import sys
import json
import time
import logging
import requests
from sqlalchemy import create_engine, text
from sqlalchemy.orm import sessionmaker

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(message)s')

def get_yandex_coordinates(query, api_key, max_retries=3):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç —á–µ—Ä–µ–∑ Yandex Geocoder API"""
    
    for attempt in range(max_retries):
        try:
            url = "https://geocode-maps.yandex.ru/1.x/"
            params = {
                'apikey': api_key,
                'geocode': query,
                'format': 'json',
                'results': 1,
                'kind': 'street'
            }
            
            response = requests.get(url, params=params, timeout=10)
            
            if response.status_code == 200:
                data = response.json()
                
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
                try:
                    pos = data['response']['GeoObjectCollection']['featureMember'][0]['GeoObject']['Point']['pos']
                    lng, lat = map(float, pos.split())
                    return lat, lng
                except (KeyError, IndexError):
                    return None, None
            else:
                logging.warning(f"–û—à–∏–±–∫–∞ API (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}): {response.status_code}")
                
        except Exception as e:
            logging.warning(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}): {e}")
            
        if attempt < max_retries - 1:
            time.sleep(2 ** attempt)  # –≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
    
    return None, None

def process_streets_batch(batch_size=25):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —É–ª–∏—Ü—ã –ø–∞–∫–µ—Ç–∞–º–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
    """
    
    database_url = os.environ.get('DATABASE_URL')
    api_key = os.environ.get('YANDEX_MAPS_API_KEY')
    
    if not database_url or not api_key:
        logging.error("‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        return False
    
    try:
        engine = create_engine(database_url)
        Session = sessionmaker(bind=engine)
        session = Session()
        
        # –ü–æ–ª—É—á–∞–µ–º —É–ª–∏—Ü—ã –±–µ–∑ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
        streets_query = text("""
            SELECT id, name 
            FROM streets 
            WHERE latitude IS NULL OR longitude IS NULL
            ORDER BY name
            LIMIT :batch_size
        """)
        
        streets = session.execute(streets_query, {'batch_size': batch_size}).fetchall()
        
        if not streets:
            logging.info("‚úÖ –í—Å–µ —É–ª–∏—Ü—ã —É–∂–µ –∏–º–µ—é—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã!")
            return True
        
        logging.info(f"üõ£Ô∏è –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –ø–∞–∫–µ—Ç –∏–∑ {len(streets)} —É–ª–∏—Ü")
        
        success_count = 0
        error_count = 0
        
        for i, street in enumerate(streets, 1):
            street_id, name = street
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–∏—Å–∫–æ–≤–æ–π –∑–∞–ø—Ä–æ—Å
            query = f"{name}, –ö—Ä–∞—Å–Ω–æ–¥–∞—Ä"
            
            logging.info(f"[{i}/{len(streets)}] –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é: {name}")
            
            try:
                lat, lng = get_yandex_coordinates(query, api_key)
                
                if lat and lng:
                    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
                    update_query = text("""
                        UPDATE streets 
                        SET latitude = :lat, longitude = :lng, updated_at = NOW()
                        WHERE id = :street_id
                    """)
                    
                    session.execute(update_query, {
                        'lat': lat,
                        'lng': lng,
                        'street_id': street_id
                    })
                    
                    success_count += 1
                    logging.info(f"  ‚úÖ {name}: {lat:.6f}, {lng:.6f}")
                else:
                    error_count += 1
                    logging.warning(f"  ‚ö†Ô∏è –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è: {name}")
                
                # –ü–∞—É–∑–∞ –¥–ª—è API
                time.sleep(0.5)
                
            except Exception as e:
                logging.error(f"  ‚ùå –û—à–∏–±–∫–∞ –¥–ª—è —É–ª–∏—Ü—ã {name}: {e}")
                error_count += 1
                continue
        
        session.commit()
        session.close()
        
        logging.info(f"\\nüìà –ü–∞–∫–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω:")
        logging.info(f"   ‚úÖ –£—Å–ø–µ—à–Ω–æ: {success_count}")
        logging.info(f"   ‚ö†Ô∏è –û—à–∏–±–∫–∏: {error_count}")
        
        return success_count > 0
        
    except Exception as e:
        logging.error(f"‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è - –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–¥–∏–Ω –ø–∞–∫–µ—Ç"""
    logging.info("üöÄ –ó–∞–ø—É—Å–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç —É–ª–∏—Ü")
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–¥–∏–Ω –ø–∞–∫–µ—Ç
    success = process_streets_batch(batch_size=25)
    
    if success:
        logging.info("‚úÖ –ü–∞–∫–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        exit(0)
    else:
        logging.info("‚ö†Ô∏è –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ (–≤–æ–∑–º–æ–∂–Ω–æ, –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏)")
        exit(0)

if __name__ == "__main__":
    main()