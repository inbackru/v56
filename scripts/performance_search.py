"""
–°—É–ø–µ—Ä-–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–∏—Å–∫ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏
–ö–æ–º–∞–Ω–¥–∞ —á–µ–º–ø–∏–æ–Ω–æ–≤ –ø–æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
"""
import re
import time
from typing import List, Dict, Any, Optional
from sqlalchemy import text, and_, or_
from app import db

class SuperSmartSearch:
    """–°–∞–º—ã–π –±—ã—Å—Ç—Ä—ã–π –∏ —É–º–Ω—ã–π –ø–æ–∏—Å–∫ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ –≤ –º–∏—Ä–µ"""
    
    def __init__(self):
        # –°–∏–Ω–æ–Ω–∏–º—ã –∏ —Å–æ–∫—Ä–∞—â–µ–Ω–∏—è –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –ø–æ–∏—Å–∫–∞
        self.synonyms = {
            '—Å—Ç—É–¥–∏—è': ['—Å—Ç—É–¥', 'st', 'studio', '0–∫', '0 –∫–æ–º–Ω'],
            '1-–∫–æ–º–Ω–∞—Ç–Ω–∞—è': ['1–∫', '1 –∫–æ–º–Ω', '1–∫–æ–º–Ω', '–æ–¥–Ω—É—à–∫–∞', '–æ–¥–Ω–æ–∫–æ–º–Ω–∞—Ç–Ω–∞—è'],
            '2-–∫–æ–º–Ω–∞—Ç–Ω–∞—è': ['2–∫', '2 –∫–æ–º–Ω', '2–∫–æ–º–Ω', '–¥–≤—É—à–∫–∞', '–¥–≤—É—Ö–∫–æ–º–Ω–∞—Ç–Ω–∞—è'],
            '3-–∫–æ–º–Ω–∞—Ç–Ω–∞—è': ['3–∫', '3 –∫–æ–º–Ω', '3–∫–æ–º–Ω', '—Ç—Ä–µ—à–∫–∞', '—Ç—Ä–µ—Ö–∫–æ–º–Ω–∞—Ç–Ω–∞—è'],
            '4-–∫–æ–º–Ω–∞—Ç–Ω–∞—è': ['4–∫', '4 –∫–æ–º–Ω', '4–∫–æ–º–Ω', '—á–µ—Ç—ã—Ä–µ—Ö–∫–æ–º–Ω–∞—Ç–Ω–∞—è'],
            
            # –†–∞–π–æ–Ω—ã
            '—Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π': ['—Ü–µ–Ω—Ç—Ä', 'downtown', 'central'],
            '—Ö–æ—Å—Ç–∏–Ω—Å–∫–∏–π': ['—Ö–æ—Å—Ç–∞', 'khosta'],
            '–∫—É–¥–µ–ø—Å—Ç–∞': ['–∫—É–¥–µ–ø—Å—Ç–∞ –º-–Ω', '–∫—É–¥–µ–ø—Å—Ç–∏–Ω—Å–∫–∏–π'],
            '–∞–¥–ª–µ—Ä': ['–∞–¥–ª–µ—Ä –º-–Ω', 'adler'],
            
            # –ó–∞—Å—Ç—Ä–æ–π—â–∏–∫–∏
            '–Ω–µ–æ–º–µ—Ç—Ä–∏—è': ['–Ω–µ–æ–º–µ—Ç—Ä', 'geometria', 'geo'],
            '–∞–≤–∞': ['ava group'],
            
            # –¢–∏–ø—ã –æ–±—ä–µ–∫—Ç–æ–≤
            '–∫–≤–∞—Ä—Ç–∏—Ä–∞': ['–∫–≤', 'apt', 'apartment', 'flat'],
            '–Ω–æ–≤–æ—Å—Ç—Ä–æ–π–∫–∞': ['–Ω–æ–≤–æ—Å—Ç—Ä–æ–π', '–Ω–æ–≤–∞—è', '–Ω–æ–≤—ã–π –¥–æ–º'],
        }
        
        # –°—Ç–æ–ø-—Å–ª–æ–≤–∞
        self.stop_words = {'–≤', '–Ω–∞', '—Å', '–ø–æ', '–æ—Ç', '–¥–æ', '–¥–ª—è', '–∏–ª–∏', '–∏', '–∞', '–Ω–æ'}
        
        # –ö—ç—à –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è
        self.cache = {}
    
    def normalize_query(self, query: str) -> str:
        """–ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞"""
        query = query.lower().strip()
        
        # –£–±–∏—Ä–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
        query = re.sub(r'[^\w\s\-]', ' ', query)
        
        # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
        query = ' '.join(query.split())
        
        return query
    
    def extract_search_criteria(self, query: str) -> Dict[str, Any]:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∫—Ä–∏—Ç–µ—Ä–∏–∏ –ø–æ–∏—Å–∫–∞ –∏–∑ –∑–∞–ø—Ä–æ—Å–∞"""
        normalized = self.normalize_query(query)
        criteria = {
            'rooms': [],
            'districts': [],
            'complexes': [],
            'developers': [],
            'price_min': None,
            'price_max': None,
            'area_min': None,
            'area_max': None,
            'keywords': [],
            'streets': []
        }
        
        words = normalized.split()
        
        for word in words:
            if word in self.stop_words:
                continue
                
            # –ü–æ–∏—Å–∫ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫–æ–º–Ω–∞—Ç
            if word in ['—Å—Ç—É–¥–∏—è', '—Å—Ç—É–¥', 'studio']:
                criteria['rooms'].append(0)
            elif re.match(r'^(\d)[–∫-]?–∫–æ–º–Ω?$', word):
                match = re.match(r'^(\d)', word)
                if match:
                    rooms = int(match.group(1))
                    criteria['rooms'].append(rooms)
            
            # –ü–æ–∏—Å–∫ —Ü–µ–Ω—ã
            price_match = re.search(r'(\d+)(?:–º–ª–Ω|–º–∏–ª|m)', word)
            if price_match:
                price = int(price_match.group(1)) * 1000000
                if not criteria['price_min']:
                    criteria['price_min'] = price
                else:
                    criteria['price_max'] = price
            
            # –ü–æ–∏—Å–∫ –ø–ª–æ—â–∞–¥–∏
            area_match = re.search(r'(\d+)(?:–º|–∫–≤)', word)
            if area_match:
                area = int(area_match.group(1))
                if not criteria['area_min']:
                    criteria['area_min'] = area
                else:
                    criteria['area_max'] = area
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
            criteria['keywords'].append(word)
        
        return criteria
    
    def build_optimized_query(self, criteria: Dict[str, Any]) -> tuple:
        """–°—Ç—Ä–æ–∏—Ç –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π SQL –∑–∞–ø—Ä–æ—Å"""
        
        base_query = """
        SELECT DISTINCT
            p.inner_id as id,
            p.object_rooms as rooms,
            p.object_area as area,
            p.price,
            p.complex_name,
            p.developer_name,
            p.parsed_district as district,
            p.complex_sales_address as address,
            p.address_position_lat as lat,
            p.address_position_lon as lon,
            p.photos,
            p.url
        FROM excel_properties p
        WHERE 1=1
        """
        
        conditions = []
        params = {}
        
        # –§–∏–ª—å—Ç—Ä –ø–æ –∫–æ–º–Ω–∞—Ç–∞–º
        if criteria['rooms']:
            conditions.append("p.object_rooms = ANY(:rooms)")
            params['rooms'] = criteria['rooms']
        
        # –§–∏–ª—å—Ç—Ä –ø–æ —Ü–µ–Ω–µ
        if criteria['price_min']:
            conditions.append("p.price >= :price_min")
            params['price_min'] = criteria['price_min']
        if criteria['price_max']:
            conditions.append("p.price <= :price_max")
            params['price_max'] = criteria['price_max']
        
        # –§–∏–ª—å—Ç—Ä –ø–æ –ø–ª–æ—â–∞–¥–∏
        if criteria['area_min']:
            conditions.append("p.object_area >= :area_min")
            params['area_min'] = criteria['area_min']
        if criteria['area_max']:
            conditions.append("p.object_area <= :area_max")
            params['area_max'] = criteria['area_max']
        
        # –¢–µ–∫—Å—Ç–æ–≤—ã–π –ø–æ–∏—Å–∫ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –∏–Ω–¥–µ–∫—Å–æ–≤
        text_conditions = []
        for i, keyword in enumerate(criteria['keywords'][:5]):  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ 5 —Å–ª–æ–≤
            param_name = f'keyword_{i}'
            text_conditions.append(f"""
                (LOWER(p.complex_name) LIKE :%{param_name}% OR
                 LOWER(p.developer_name) LIKE :%{param_name}% OR
                 LOWER(p.parsed_district) LIKE :%{param_name}% OR
                 LOWER(p.complex_sales_address) LIKE :%{param_name}%)
            """)
            params[param_name] = f'%{keyword}%'
        
        if text_conditions:
            conditions.append(f"({' OR '.join(text_conditions)})")
        
        # –î–æ–±–∞–≤–ª—è–µ–º —É—Å–ª–æ–≤–∏—è –∫ –∑–∞–ø—Ä–æ—Å—É
        if conditions:
            base_query += " AND " + " AND ".join(conditions)
        
        # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏
        base_query += """
        ORDER BY 
            CASE WHEN LOWER(p.complex_name) LIKE :main_query THEN 1 ELSE 2 END,
            p.price ASC
        LIMIT 50
        """
        params['main_query'] = f"%{' '.join(criteria['keywords'][:3])}%"
        
        return base_query, params
    
    def search_suggestions(self, query: str, limit: int = 8) -> List[Dict[str, Any]]:
        """–ë—ã—Å—Ç—Ä—ã–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏ –¥–ª—è –∞–≤—Ç–æ–¥–æ–ø–æ–ª–Ω–µ–Ω–∏—è"""
        if len(query) < 2:
            return []
        
        # ‚ùå –û–¢–ö–õ–Æ–ß–ê–ï–ú –ö–≠–® –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ —Ç–∏–ø–æ–≤ –∫–≤–∞—Ä—Ç–∏—Ä 
        # cache_key = f"suggestions_{query.lower()}_{limit}"
        # if cache_key in self.cache:
        #     cached_data, timestamp = self.cache[cache_key]
        #     if time.time() - timestamp < 30:
        #         return cached_data
        
        suggestions = []
        query_lower = f'%{query.lower()}%'
        
        try:
            # üè† –ü–†–ò–û–†–ò–¢–ï–¢ 1: –¢–ò–ü–´ –ö–í–ê–†–¢–ò–† - –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ–ø–∞–≤—à–∏–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏!
            query_clean = query.lower().strip()
# print(f"üîç DEBUG: Searching for '{query_clean}'")
            
            # ‚úÖ –£–õ–£–ß–®–ï–ù–ù–ê–Ø –õ–û–ì–ò–ö–ê: –°—Ç—É–¥–∏–∏ (object_rooms = 0) 
            studio_keywords = ['—Å—Ç—É–¥', 'studio', '0–∫', '0 –∫', '0-–∫', '—Å—Ç—É–¥–∏–π']
            if any(word in query_clean for word in studio_keywords) or query_clean == '0':
                count = db.session.execute(text("SELECT COUNT(*) FROM excel_properties WHERE object_rooms = 0")).scalar()
                if count > 0:
                    suggestions.append({
                        'text': '–°—Ç—É–¥–∏–∏',
                        'subtitle': f'{count} –∫–≤–∞—Ä—Ç–∏—Ä –¥–æ—Å—Ç—É–ø–Ω–æ',
                        'type': 'rooms',
                        'icon': 'fas fa-home',
                        'url': '/properties?rooms=0',
                        'priority': 1  # ‚úÖ –ü–†–ò–û–†–ò–¢–ï–¢ 1 - —Å–∞–º—ã–π –≤–∞–∂–Ω—ã–π
                    })
            
            # ‚úÖ –ú–ê–ö–°–ò–ú–ê–õ–¨–ù–û –ì–ò–ë–ö–ò–ô –ü–û–ò–°–ö: 1-–∫–æ–º–Ω–∞—Ç–Ω—ã–µ (object_rooms = 1)
            one_room_keywords = ['1–∫', '1 –∫', '1-–∫', '1-–∫–æ–º', '1 –∫–æ–º', '–æ–¥–Ω', '–æ–¥–Ω–æ–∫', '–æ–¥–Ω–æ–∫–æ–º–Ω', 
                                '–æ–¥–Ω–æ–∫–æ–º–Ω–∞—Ç–Ω', '–æ–¥–Ω–æ–∫–æ–º–Ω–∞—Ç–Ω–∞—è', '–æ–¥–Ω–æ–∫–æ–º–Ω–∞—Ç–Ω—ã–µ', '–æ–¥–Ω—É—à–∫', '–æ–¥–Ω—É—à–∫–∞', '–æ–¥–Ω–æ–∫–æ–º']
            if any(word in query_clean for word in one_room_keywords) or query_clean == '1':
                count = db.session.execute(text("SELECT COUNT(*) FROM excel_properties WHERE object_rooms = 1")).scalar()
                if count > 0:
                    suggestions.append({
                        'text': '1-–∫–æ–º–Ω–∞—Ç–Ω—ã–µ –∫–≤–∞—Ä—Ç–∏—Ä—ã',
                        'subtitle': f'{count} –∫–≤–∞—Ä—Ç–∏—Ä –¥–æ—Å—Ç—É–ø–Ω–æ',
                        'type': 'rooms',
                        'icon': 'fas fa-home',
                        'url': '/properties?rooms=1',
                        'priority': 1  # ‚úÖ –ü–†–ò–û–†–ò–¢–ï–¢ 1 - —Å–∞–º—ã–π –≤–∞–∂–Ω—ã–π
                    })
                    
            # ‚úÖ –ú–ê–ö–°–ò–ú–ê–õ–¨–ù–û –ì–ò–ë–ö–ò–ô –ü–û–ò–°–ö: 2-–∫–æ–º–Ω–∞—Ç–Ω—ã–µ (object_rooms = 2)  
            two_room_keywords = ['2–∫', '2 –∫', '2-–∫', '2-–∫–æ–º', '2 –∫–æ–º', '–¥–≤—É—Ö', '–¥–≤—É—Ö–∫', '–¥–≤—É—Ö–∫–æ–º',
                                '–¥–≤—É—Ö–∫–æ–º–Ω–∞—Ç–Ω', '–¥–≤—É—Ö–∫–æ–º–Ω–∞—Ç–Ω–∞—è', '–¥–≤—É—Ö–∫–æ–º–Ω–∞—Ç–Ω—ã–µ', '–¥–≤—É—à–∫', '–¥–≤—É—à–∫–∞', '–¥–≤—É–∫–æ–º', '–¥–≤—É—Ö–∫–æ–º']
            if any(word in query_clean for word in two_room_keywords) or query_clean == '2':
                count = db.session.execute(text("SELECT COUNT(*) FROM excel_properties WHERE object_rooms = 2")).scalar()
                if count > 0:
                    suggestions.append({
                        'text': '2-–∫–æ–º–Ω–∞—Ç–Ω—ã–µ –∫–≤–∞—Ä—Ç–∏—Ä—ã',
                        'subtitle': f'{count} –∫–≤–∞—Ä—Ç–∏—Ä –¥–æ—Å—Ç—É–ø–Ω–æ',
                        'type': 'rooms',
                        'icon': 'fas fa-home',
                        'url': '/properties?rooms=2',
                        'priority': 1  # ‚úÖ –ü–†–ò–û–†–ò–¢–ï–¢ 1 - —Å–∞–º—ã–π –≤–∞–∂–Ω—ã–π
                    })
                    
            # ‚úÖ –ú–ê–ö–°–ò–ú–ê–õ–¨–ù–û –ì–ò–ë–ö–ò–ô –ü–û–ò–°–ö: 3-–∫–æ–º–Ω–∞—Ç–Ω—ã–µ (object_rooms = 3)
            three_room_keywords = ['3–∫', '3 –∫', '3-–∫', '3-–∫–æ–º', '3 –∫–æ–º', '—Ç—Ä–µ—Ö', '—Ç—Ä—ë—Ö', '—Ç—Ä–µ—Ö–∫', '—Ç—Ä—ë—Ö–∫',
                                  '—Ç—Ä–µ—Ö–∫–æ–º–Ω–∞—Ç–Ω', '—Ç—Ä–µ—Ö–∫–æ–º–Ω–∞—Ç–Ω–∞—è', '—Ç—Ä–µ—Ö–∫–æ–º–Ω–∞—Ç–Ω—ã–µ', '—Ç—Ä—ë—Ö–∫–æ–º–Ω–∞—Ç–Ω', '—Ç—Ä—ë—Ö–∫–æ–º–Ω–∞—Ç–Ω–∞—è', '—Ç—Ä—ë—Ö–∫–æ–º–Ω–∞—Ç–Ω—ã–µ', '—Ç—Ä–µ—à–∫', '—Ç—Ä–µ—à–∫–∞', '—Ç—Ä—ë—à–∫–∞', '—Ç—Ä–∏–∫–æ–º']
            if any(word in query_clean for word in three_room_keywords) or query_clean == '3':
                count = db.session.execute(text("SELECT COUNT(*) FROM excel_properties WHERE object_rooms = 3")).scalar()
                if count > 0:
                    suggestions.append({
                        'text': '3-–∫–æ–º–Ω–∞—Ç–Ω—ã–µ –∫–≤–∞—Ä—Ç–∏—Ä—ã',
                        'subtitle': f'{count} –∫–≤–∞—Ä—Ç–∏—Ä –¥–æ—Å—Ç—É–ø–Ω–æ',
                        'type': 'rooms',
                        'icon': 'fas fa-home',
                        'url': '/properties?rooms=3',
                        'priority': 1  # ‚úÖ –ü–†–ò–û–†–ò–¢–ï–¢ 1 - —Å–∞–º—ã–π –≤–∞–∂–Ω—ã–π
                    })
                    
            # ‚úÖ –£–õ–£–ß–®–ï–ù–ù–ê–Ø –õ–û–ì–ò–ö–ê: 4-–∫–æ–º–Ω–∞—Ç–Ω—ã–µ (object_rooms = 4)
            four_room_keywords = ['4–∫', '4 –∫', '4-–∫', '4-–∫–æ–º', '4 –∫–æ–º', '—á–µ—Ç—ã—Ä', '—á–µ—Ç—ã—Ä–µ—Ö', '—á–µ—Ç—ã—Ä—ë—Ö',
                                 '—á–µ—Ç—ã—Ä–µ—Ö–∫–æ–º–Ω–∞—Ç–Ω', '—á–µ—Ç—ã—Ä–µ—Ö–∫–æ–º–Ω–∞—Ç–Ω–∞—è', '—á–µ—Ç—ã—Ä–µ—Ö–∫–æ–º–Ω–∞—Ç–Ω—ã–µ', '—á–µ—Ç—ã—Ä—ë—Ö–∫–æ–º–Ω–∞—Ç–Ω', '—á–µ—Ç—ã—Ä—ë—Ö–∫–æ–º–Ω–∞—Ç–Ω–∞—è', '—á–µ—Ç—ã—Ä—ë—Ö–∫–æ–º–Ω–∞—Ç–Ω—ã–µ']
            if any(word in query_clean for word in four_room_keywords) or query_clean == '4':
                count = db.session.execute(text("SELECT COUNT(*) FROM excel_properties WHERE object_rooms = 4")).scalar()
                if count > 0:
                    suggestions.append({
                        'text': '4-–∫–æ–º–Ω–∞—Ç–Ω—ã–µ –∫–≤–∞—Ä—Ç–∏—Ä—ã',
                        'subtitle': f'{count} –∫–≤–∞—Ä—Ç–∏—Ä –¥–æ—Å—Ç—É–ø–Ω–æ', 
                        'type': 'rooms',
                        'icon': 'fas fa-home',
                        'url': '/properties?rooms=4',
                        'priority': 1  # ‚úÖ –ü–†–ò–û–†–ò–¢–ï–¢ 1 - —Å–∞–º—ã–π –≤–∞–∂–Ω—ã–π
                    })
            
            # –û–±—â–∏–π –ø–æ–∏—Å–∫ –ø–æ "–∫–æ–º–Ω" –µ—Å–ª–∏ –Ω–∏—á–µ–≥–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –Ω–µ –Ω–∞—à–ª–∏
            if ('–∫–æ–º–Ω' in query_clean or '–∫–æ–º–Ω–∞—Ç' in query_clean) and not any(suggestions):
                for room_num in [1, 2, 3, 4]:
                    count = db.session.execute(text("SELECT COUNT(*) FROM excel_properties WHERE object_rooms = :rooms"), {'rooms': room_num}).scalar()
                    if count > 0:
                        suggestions.append({
                            'text': f'{room_num}-–∫–æ–º–Ω–∞—Ç–Ω—ã–µ –∫–≤–∞—Ä—Ç–∏—Ä—ã',
                            'subtitle': f'{count} –∫–≤–∞—Ä—Ç–∏—Ä –¥–æ—Å—Ç—É–ø–Ω–æ',
                            'type': 'rooms',
                            'icon': 'fas fa-home',
                            'url': f'/properties?rooms={room_num}'
                        })
            
            # –ñ–ö (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç 2)  
            complexes = db.session.execute(text("""
                SELECT DISTINCT complex_name, COUNT(*) as count
                FROM excel_properties 
                WHERE LOWER(complex_name) LIKE :query
                AND complex_name IS NOT NULL 
                GROUP BY complex_name
                ORDER BY count DESC, complex_name
                LIMIT 50
            """), {'query': query_lower}).fetchall()
            
            for row in complexes:
                suggestions.append({
                    'type': 'complex',
                    'title': row[0],
                    'subtitle': f'{row[1]} –∫–≤–∞—Ä—Ç–∏—Ä',
                    'icon': 'building',
                    'url': f'/properties?residential_complex={row[0]}',
                    'priority': 3
                })
            
            # –£–ª–∏—Ü—ã (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç 2)
            streets = db.session.execute(text("""
                SELECT DISTINCT 
                    CASE 
                        WHEN complex_sales_address LIKE '%—É–ª–∏—Ü–∞%' THEN
                            TRIM(SUBSTRING(complex_sales_address FROM '([^,]*—É–ª–∏—Ü–∞[^,]*)'))
                        ELSE complex_sales_address
                    END as street_name,
                    COUNT(*) as count
                FROM excel_properties 
                WHERE LOWER(complex_sales_address) LIKE :query
                AND complex_sales_address IS NOT NULL 
                AND complex_sales_address LIKE '%—É–ª–∏—Ü–∞%'
                GROUP BY street_name
                ORDER BY count DESC
                LIMIT 20
            """), {'query': query_lower}).fetchall()
            
            for row in streets:
                suggestions.append({
                    'type': 'street',
                    'title': row[0],
                    'subtitle': f'{row[1]} –æ–±—ä–µ–∫—Ç–æ–≤',
                    'icon': 'road',
                    'url': f'/properties?search={row[0]}',
                    'priority': 4
                })
            
            # –ì–æ—Ä–æ–¥–∞ (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç 1 - —Å–∞–º—ã–π –≤–∞–∂–Ω—ã–π!)
            cities = db.session.execute(text("""
                SELECT DISTINCT 
                    CASE 
                        WHEN complex_sales_address LIKE '%–°–æ—á–∏%' THEN '–°–æ—á–∏'
                        WHEN complex_sales_address LIKE '%–ö—Ä–∞—Å–Ω–æ–¥–∞—Ä%' THEN '–ö—Ä–∞—Å–Ω–æ–¥–∞—Ä'
                        WHEN complex_sales_address LIKE '%–ê–Ω–∞–ø–∞%' THEN '–ê–Ω–∞–ø–∞'
                        WHEN complex_sales_address LIKE '%–ù–æ–≤–æ—Ä–æ—Å—Å–∏–π—Å–∫%' THEN '–ù–æ–≤–æ—Ä–æ—Å—Å–∏–π—Å–∫'
                        WHEN complex_sales_address LIKE '%–ì–µ–ª–µ–Ω–¥–∂–∏–∫%' THEN '–ì–µ–ª–µ–Ω–¥–∂–∏–∫'
                        ELSE NULL
                    END as city,
                    COUNT(*) as count
                FROM excel_properties 
                WHERE complex_sales_address IS NOT NULL
                AND LOWER(
                    CASE 
                        WHEN complex_sales_address LIKE '%–°–æ—á–∏%' THEN '–°–æ—á–∏'
                        WHEN complex_sales_address LIKE '%–ö—Ä–∞—Å–Ω–æ–¥–∞—Ä%' THEN '–ö—Ä–∞—Å–Ω–æ–¥–∞—Ä'
                        WHEN complex_sales_address LIKE '%–ê–Ω–∞–ø–∞%' THEN '–ê–Ω–∞–ø–∞'
                        WHEN complex_sales_address LIKE '%–ù–æ–≤–æ—Ä–æ—Å—Å–∏–π—Å–∫%' THEN '–ù–æ–≤–æ—Ä–æ—Å—Å–∏–π—Å–∫'
                        WHEN complex_sales_address LIKE '%–ì–µ–ª–µ–Ω–¥–∂–∏–∫%' THEN '–ì–µ–ª–µ–Ω–¥–∂–∏–∫'
                        ELSE ''
                    END
                ) LIKE :query
                GROUP BY 
                    CASE 
                        WHEN complex_sales_address LIKE '%–°–æ—á–∏%' THEN '–°–æ—á–∏'
                        WHEN complex_sales_address LIKE '%–ö—Ä–∞—Å–Ω–æ–¥–∞—Ä%' THEN '–ö—Ä–∞—Å–Ω–æ–¥–∞—Ä'
                        WHEN complex_sales_address LIKE '%–ê–Ω–∞–ø–∞%' THEN '–ê–Ω–∞–ø–∞'
                        WHEN complex_sales_address LIKE '%–ù–æ–≤–æ—Ä–æ—Å—Å–∏–π—Å–∫%' THEN '–ù–æ–≤–æ—Ä–æ—Å—Å–∏–π—Å–∫'
                        WHEN complex_sales_address LIKE '%–ì–µ–ª–µ–Ω–¥–∂–∏–∫%' THEN '–ì–µ–ª–µ–Ω–¥–∂–∏–∫'
                        ELSE NULL
                    END
                HAVING 
                    CASE 
                        WHEN complex_sales_address LIKE '%–°–æ—á–∏%' THEN '–°–æ—á–∏'
                        WHEN complex_sales_address LIKE '%–ö—Ä–∞—Å–Ω–æ–¥–∞—Ä%' THEN '–ö—Ä–∞—Å–Ω–æ–¥–∞—Ä'
                        WHEN complex_sales_address LIKE '%–ê–Ω–∞–ø–∞%' THEN '–ê–Ω–∞–ø–∞'
                        WHEN complex_sales_address LIKE '%–ù–æ–≤–æ—Ä–æ—Å—Å–∏–π—Å–∫%' THEN '–ù–æ–≤–æ—Ä–æ—Å—Å–∏–π—Å–∫'
                        WHEN complex_sales_address LIKE '%–ì–µ–ª–µ–Ω–¥–∂–∏–∫%' THEN '–ì–µ–ª–µ–Ω–¥–∂–∏–∫'
                        ELSE NULL
                    END IS NOT NULL
                ORDER BY count DESC
                LIMIT 20
            """), {'query': query_lower}).fetchall()
            
            for row in cities:
                suggestions.append({
                    'type': 'city',
                    'title': row[0],
                    'subtitle': f'{row[1]} –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π',
                    'icon': 'map-marker-alt',
                    'url': f'/properties?search={row[0]}',
                    'priority': 1
                })

            # –†–∞–π–æ–Ω—ã (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç 2)
            districts = db.session.execute(text("""
                SELECT DISTINCT parsed_district, COUNT(*) as count
                FROM excel_properties 
                WHERE LOWER(parsed_district) LIKE :query
                AND parsed_district IS NOT NULL 
                GROUP BY parsed_district
                ORDER BY count DESC
                LIMIT 15
            """), {'query': query_lower}).fetchall()
            
            for row in districts:
                suggestions.append({
                    'type': 'district',
                    'title': row[0],
                    'subtitle': f'{row[1]} –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π',
                    'icon': 'map-pin',
                    'url': f'/properties?district={row[0]}',
                    'priority': 2
                })
            
            # –ó–∞—Å—Ç—Ä–æ–π—â–∏–∫–∏ (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç 5)
            developers = db.session.execute(text("""
                SELECT DISTINCT developer_name, COUNT(*) as count
                FROM excel_properties 
                WHERE LOWER(developer_name) LIKE :query
                AND developer_name IS NOT NULL 
                GROUP BY developer_name
                ORDER BY count DESC
                LIMIT 15
            """), {'query': query_lower}).fetchall()
            
            for row in developers:
                suggestions.append({
                    'type': 'developer',
                    'title': row[0],
                    'subtitle': f'{row[1]} –æ–±—ä–µ–∫—Ç–æ–≤',
                    'icon': 'user-tie',
                    'url': f'/properties?developer={row[0]}',
                    'priority': 4
                })
            
            # –¢–∏–ø—ã –∫–≤–∞—Ä—Ç–∏—Ä - –¢–û–õ–¨–ö–û –µ—Å–ª–∏ —è–≤–Ω–æ –∏—â—É—Ç –∫–≤–∞—Ä—Ç–∏—Ä—ã
            query_has_room_keywords = any(word in query.lower() for word in ['—Å—Ç—É–¥', '–∫–æ–º–Ω', '–∫–≤–∞—Ä—Ç–∏—Ä'])
            if query_has_room_keywords:
                room_suggestions = []
                if '—Å—Ç—É–¥' in query.lower():
                    room_suggestions.append({'rooms': 0, 'name': '–°—Ç—É–¥–∏–∏'})
                
                # –ò—â–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ü–∏—Ñ—Ä—ã —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç –∫–≤–∞—Ä—Ç–∏—Ä
                if '–∫–æ–º–Ω' in query.lower() or '–∫–≤–∞—Ä—Ç–∏—Ä' in query.lower():
                    for i in range(1, 5):
                        if str(i) in query or f'{i}–∫' in query or f'{i} –∫–æ–º–Ω' in query:
                            room_suggestions.append({'rooms': i, 'name': f'{i}-–∫–æ–º–Ω–∞—Ç–Ω—ã–µ'})
                
                for room_type in room_suggestions[:2]:
                    result = db.session.execute(text("""
                        SELECT COUNT(*) FROM excel_properties WHERE object_rooms = :rooms
                    """), {'rooms': room_type['rooms']}).fetchone()
                    count = result[0] if result else 0
                    
                    suggestions.append({
                        'type': 'rooms',
                        'title': room_type['name'],
                        'subtitle': f'{count} –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π',
                        'icon': 'home',
                        'url': f'/properties?rooms={room_type["rooms"]}',
                        'priority': 5
                    })
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –±–æ–ª—å—à–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            suggestions = sorted(suggestions, key=lambda x: x['priority'])[:min(limit, 100)]
            
            # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –£–±–∏—Ä–∞–µ–º priority –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å)
            for suggestion in suggestions:
                if 'priority' in suggestion:
                    suggestion.pop('priority', None)
            
            # ‚ùå –ö–≠–®–ò–†–û–í–ê–ù–ò–ï –ü–û–õ–ù–û–°–¢–¨–Æ –û–¢–ö–õ–Æ–ß–ï–ù–û –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ —Ç–∏–ø–æ–≤ –∫–≤–∞—Ä—Ç–∏—Ä
            # self.cache[cache_key] = (suggestions, time.time())
            
            return suggestions
            
        except Exception as e:
            print(f"Search suggestions error: {e}")
            return []
    
    def search_properties(self, query: str, limit: int = 50) -> Dict[str, Any]:
        """–û—Å–Ω–æ–≤–Ω–æ–π –ø–æ–∏—Å–∫ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏"""
        if len(query) < 2:
            return {'results': [], 'total': 0, 'criteria': {}}
        
        criteria = self.extract_search_criteria(query)
        sql_query, params = self.build_optimized_query(criteria)
        
        try:
            results = db.session.execute(text(sql_query), params).fetchall()
            
            properties = []
            for row in results:
                properties.append({
                    'id': row[0],
                    'rooms': row[1] or 0,
                    'area': row[2] or 0,
                    'price': row[3] or 0,
                    'complex_name': row[4] or '',
                    'developer_name': row[5] or '',
                    'district': row[6] or '',
                    'address': row[7] or '',
                    'lat': row[8],
                    'lon': row[9],
                    'photos': row[10] or 0,
                    'url': row[11] or f'/object/{row[0]}'
                })
            
            return {
                'results': properties,
                'total': len(properties),
                'criteria': criteria,
                'query': query
            }
            
        except Exception as e:
            print(f"Search properties error: {e}")
            return {'results': [], 'total': 0, 'criteria': criteria}

# –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
super_search = SuperSmartSearch()