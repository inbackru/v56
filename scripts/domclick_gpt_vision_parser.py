#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
GPT-4 Vision –ø–∞—Ä—Å–µ—Ä –¥–ª—è —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö Domclick
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç –¥–ª—è –æ–±—Ö–æ–¥–∞ –∑–∞—â–∏—Ç—ã –∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
"""

import os
import json
import base64
import time
import random
import pandas as pd
from datetime import datetime
from playwright.sync_api import sync_playwright
import requests
from typing import Dict, List, Optional

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ OpenAI
try:
    import openai
    OPENAI_AVAILABLE = True
except ImportError:
    OPENAI_AVAILABLE = False
    print("‚ö†Ô∏è OpenAI –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install openai")

class DomclickGPTVisionParser:
    def __init__(self):
        self.openai_api_key = os.environ.get("OPENAI_API_KEY")
        if self.openai_api_key and OPENAI_AVAILABLE:
            self.client = openai.OpenAI(api_key=self.openai_api_key)
            print("‚úÖ OpenAI API –ø–æ–¥–∫–ª—é—á–µ–Ω")
        else:
            self.client = None
            print("‚ö†Ô∏è OpenAI API –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        self.scraped_data = []
        self.base_urls = [
            "https://domclick.ru/krasnodar/search/living/newbuilding",
            "https://domclick.ru/search?type=living&deal_type=sell&object_type%5B%5D=newbuilding&city_id=4897"
        ]
        
        print("ü§ñ GPT-4 Vision –ø–∞—Ä—Å–µ—Ä Domclick –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

    def setup_stealth_browser(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±—Ä–∞—É–∑–µ—Ä–∞ —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Å–∫—Ä—ã—Ç–Ω–æ—Å—Ç—å—é"""
        try:
            with sync_playwright() as p:
                # –°–ª—É—á–∞–π–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –±—Ä–∞—É–∑–µ—Ä–∞
                width = random.randint(1200, 1920)
                height = random.randint(800, 1080)
                
                browser = p.chromium.launch(
                    headless=True,
                    args=[
                        '--no-sandbox',
                        '--disable-dev-shm-usage',
                        '--disable-gpu',
                        '--disable-web-security',
                        '--disable-features=VizDisplayCompositor',
                        '--disable-blink-features=AutomationControlled',
                        f'--window-size={width},{height}',
                        '--user-agent=Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36'
                    ]
                )
                
                context = browser.new_context(
                    viewport={'width': width, 'height': height},
                    locale='ru-RU',
                    timezone_id='Europe/Moscow'
                )
                
                page = context.new_page()
                
                # –£–¥–∞–ª—è–µ–º –ø—Ä–∏–∑–Ω–∞–∫–∏ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏
                page.add_init_script("""
                    Object.defineProperty(navigator, 'webdriver', {
                        get: () => undefined,
                    });
                    
                    Object.defineProperty(navigator, 'plugins', {
                        get: () => [1, 2, 3, 4, 5],
                    });
                    
                    Object.defineProperty(navigator, 'languages', {
                        get: () => ['ru-RU', 'ru', 'en-US', 'en'],
                    });
                """)
                
                return browser, context, page
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±—Ä–∞—É–∑–µ—Ä–∞: {e}")
            return None, None, None

    def human_like_navigation(self, page, url: str) -> bool:
        """–ß–µ–ª–æ–≤–µ–∫–æ–ø–æ–¥–æ–±–Ω–∞—è –Ω–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ —Å–∞–π—Ç—É"""
        try:
            print(f"üîç –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞: {url}")
            
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É
            response = page.goto(url, wait_until='networkidle', timeout=30000)
            
            if not response or response.status >= 400:
                print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: —Å—Ç–∞—Ç—É—Å {response.status if response else 'timeout'}")
                return False
            
            # –°–ª—É—á–∞–π–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
            time.sleep(random.uniform(2, 5))
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∑–∞—â–∏—Ç—ã
            page_content = page.content()
            if any(block in page_content.lower() for block in ['access denied', 'blocked', 'captcha', 'challenge']):
                print("‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –∑–∞—â–∏—Ç–∞ –æ—Ç –±–æ—Ç–æ–≤")
                
                # –ü—Ä–æ–±—É–µ–º –æ–±–æ–π—Ç–∏
                page.mouse.move(random.randint(100, 500), random.randint(100, 500))
                time.sleep(random.uniform(1, 3))
                page.mouse.click(random.randint(100, 500), random.randint(100, 500))
                time.sleep(random.uniform(3, 7))
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—â–µ —Ä–∞–∑
                page_content = page.content()
                if any(block in page_content.lower() for block in ['access denied', 'blocked']):
                    print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–æ–π—Ç–∏ –∑–∞—â–∏—Ç—É")
                    return False
            
            # –ò–º–∏—Ç–∞—Ü–∏—è —á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–≥–æ –ø–æ–≤–µ–¥–µ–Ω–∏—è
            self.simulate_human_behavior(page)
            
            print("‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏: {e}")
            return False

    def simulate_human_behavior(self, page):
        """–ò–º–∏—Ç–∞—Ü–∏—è –ø–æ–≤–µ–¥–µ–Ω–∏—è —á–µ–ª–æ–≤–µ–∫–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ"""
        try:
            # –°–∫—Ä–æ–ª–ª —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            for _ in range(random.randint(2, 5)):
                scroll_y = random.randint(300, 800)
                page.evaluate(f"window.scrollBy(0, {scroll_y})")
                time.sleep(random.uniform(0.5, 2))
            
            # –°–ª—É—á–∞–π–Ω—ã–µ –¥–≤–∏–∂–µ–Ω–∏—è –º—ã—à–∏
            for _ in range(random.randint(2, 4)):
                x = random.randint(100, 800)
                y = random.randint(100, 600)
                page.mouse.move(x, y)
                time.sleep(random.uniform(0.2, 1))
                
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∏–º–∏—Ç–∞—Ü–∏–∏ –ø–æ–≤–µ–¥–µ–Ω–∏—è: {e}")

    def take_smart_screenshot(self, page, selector: str = None) -> Optional[str]:
        """–£–º–Ω—ã–π —Å–∫—Ä–∏–Ω—à–æ—Ç —Å —Ñ–æ–∫—É—Å–æ–º –Ω–∞ –Ω—É–∂–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã"""
        try:
            if selector:
                # –°–∫—Ä–∏–Ω—à–æ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
                element = page.locator(selector).first
                if element.count() > 0:
                    screenshot_bytes = element.screenshot()
                else:
                    print(f"‚ö†Ô∏è –≠–ª–µ–º–µ–Ω—Ç {selector} –Ω–µ –Ω–∞–π–¥–µ–Ω, –¥–µ–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç –≤—Å–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã")
                    screenshot_bytes = page.screenshot(full_page=True)
            else:
                # –°–∫—Ä–∏–Ω—à–æ—Ç –≤—Å–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                screenshot_bytes = page.screenshot(full_page=True)
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ base64
            screenshot_base64 = base64.b64encode(screenshot_bytes).decode('utf-8')
            
            print(f"üì∏ –°–∫—Ä–∏–Ω—à–æ—Ç —Å–¥–µ–ª–∞–Ω: {len(screenshot_base64)} —Å–∏–º–≤–æ–ª–æ–≤")
            return screenshot_base64
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–∫—Ä–∏–Ω—à–æ—Ç–∞: {e}")
            return None

    def extract_property_data_with_gpt(self, screenshot_base64: str) -> List[Dict]:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ —Å –ø–æ–º–æ—â—å—é GPT-4 Vision"""
        if not self.client:
            print("‚ùå OpenAI API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            return []
        
        try:
            prompt = """
–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å–∫—Ä–∏–Ω—à–æ—Ç —Å–∞–π—Ç–∞ Domclick —Å –æ–±—ä—è–≤–ª–µ–Ω–∏—è–º–∏ –æ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ –≤ –ö—Ä–∞—Å–Ω–æ–¥–∞—Ä–µ.

–ò–∑–≤–ª–µ–∫–∏ –í–°–ï –≤–∏–¥–∏–º—ã–µ –æ–±—ä–µ–∫—Ç—ã –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON –º–∞—Å—Å–∏–≤–∞:

[
    {
        "name": "–Ω–∞–∑–≤–∞–Ω–∏–µ –ñ–ö –∏–ª–∏ –∞–¥—Ä–µ—Å –æ–±—ä–µ–∫—Ç–∞",
        "price": "—Ü–µ–Ω–∞ –≤ —Ä—É–±–ª—è—Ö (—Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ)",
        "rooms": "–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–Ω–∞—Ç (0 –¥–ª—è —Å—Ç—É–¥–∏–∏)",
        "area": "–ø–ª–æ—â–∞–¥—å –≤ –º¬≤ (—Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ)",
        "floor": "—ç—Ç–∞–∂",
        "floors_total": "–≤—Å–µ–≥–æ —ç—Ç–∞–∂–µ–π –≤ –¥–æ–º–µ",
        "developer": "–∑–∞—Å—Ç—Ä–æ–π—â–∏–∫ –∏–ª–∏ –∞–≥–µ–Ω—Ç—Å—Ç–≤–æ",
        "district": "—Ä–∞–π–æ–Ω –ö—Ä–∞—Å–Ω–æ–¥–∞—Ä–∞",
        "address": "–ø–æ–ª–Ω—ã–π –∞–¥—Ä–µ—Å",
        "property_type": "–∫–≤–∞—Ä—Ç–∏—Ä–∞/–¥–æ–º/–∫–æ–º–º–µ—Ä—á–µ—Å–∫–∞—è",
        "status": "–Ω–æ–≤–æ—Å—Ç—Ä–æ–π–∫–∞/–≤—Ç–æ—Ä–∏—á–∫–∞",
        "year": "–≥–æ–¥ –ø–æ—Å—Ç—Ä–æ–π–∫–∏",
        "description": "–∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞"
    }
]

–í–ê–ñ–ù–û:
- –ò–∑–≤–ª–µ–∫–∞–π –¢–û–õ–¨–ö–û —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
- –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –Ω–µ—è—Å–Ω—ã, –ø–∏—à–∏ null
- –ß–∏—Å–ª–æ–≤—ã–µ –ø–æ–ª—è –¥–æ–ª–∂–Ω—ã —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã
- –ò—â–∏ –∫–∞—Ä—Ç–æ—á–∫–∏ –æ–±—ä–µ–∫—Ç–æ–≤, —Å–ø–∏—Å–∫–∏, —Ç–∞–±–ª–∏—Ü—ã –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏
- –§–æ–∫—É—Å–∏—Ä—É–π—Å—è –Ω–∞ –Ω–æ–≤–æ—Å—Ç—Ä–æ–π–∫–∞—Ö –¥–ª—è –ö—Ä–∞—Å–Ω–æ–¥–∞—Ä–∞
"""

            response = self.client.chat.completions.create(
                model="gpt-4o",  # GPT-4 Vision
                messages=[
                    {
                        "role": "user",
                        "content": [
                            {"type": "text", "text": prompt},
                            {
                                "type": "image_url",
                                "image_url": {
                                    "url": f"data:image/png;base64,{screenshot_base64}",
                                    "detail": "high"
                                }
                            }
                        ]
                    }
                ],
                max_tokens=2000,
                temperature=0.1
            )
            
            content = response.choices[0].message.content
            print(f"ü§ñ GPT –æ—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω: {len(content)} —Å–∏–º–≤–æ–ª–æ–≤")
            
            # –ü–∞—Ä—Å–∏–º JSON –∏–∑ –æ—Ç–≤–µ—Ç–∞
            try:
                # –ò—â–µ–º JSON –±–ª–æ–∫ –≤ –æ—Ç–≤–µ—Ç–µ
                json_start = content.find('[')
                json_end = content.rfind(']') + 1
                
                if json_start != -1 and json_end > json_start:
                    json_str = content[json_start:json_end]
                    properties = json.loads(json_str)
                    
                    print(f"‚úÖ –ò–∑–≤–ª–µ—á–µ–Ω–æ –æ–±—ä–µ–∫—Ç–æ–≤: {len(properties)}")
                    return properties
                else:
                    print("‚ö†Ô∏è JSON –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –æ—Ç–≤–µ—Ç–µ GPT")
                    return []
                    
            except json.JSONDecodeError as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {e}")
                print(f"–û—Ç–≤–µ—Ç GPT: {content[:500]}...")
                return []
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ GPT Vision: {e}")
            return []

    def process_extracted_data(self, properties: List[Dict]) -> List[Dict]:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        processed = []
        
        for prop in properties:
            try:
                # –û—á–∏—Å—Ç–∫–∞ –∏ –≤–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
                processed_prop = {
                    'inner_id': f"gpt_vision_{int(time.time())}_{len(processed)}",
                    'complex_name': self.clean_text(prop.get('name', '')),
                    'developer_name': self.clean_text(prop.get('developer', '–£—Ç–æ—á–Ω—è–µ—Ç—Å—è')),
                    'city': '–ö—Ä–∞—Å–Ω–æ–¥–∞—Ä',
                    'object_rooms': self.safe_int(prop.get('rooms')),
                    'object_area': self.safe_float(prop.get('area')),
                    'price': self.safe_int(prop.get('price')),
                    'object_min_floor': self.safe_int(prop.get('floor')),
                    'object_max_floor': self.safe_int(prop.get('floors_total')),
                    'address_display_name': self.clean_text(prop.get('address', '')),
                    'property_type': prop.get('property_type', '–∫–≤–∞—Ä—Ç–∏—Ä–∞'),
                    'status': prop.get('status', '–Ω–æ–≤–æ—Å—Ç—Ä–æ–π–∫–∞'),
                    'year_built': self.safe_int(prop.get('year')),
                    'description': self.clean_text(prop.get('description', '')),
                    'source': 'domclick_gpt_vision',
                    'scraped_at': datetime.now().isoformat()
                }
                
                # –ë–∞–∑–æ–≤–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è
                if processed_prop['price'] and processed_prop['price'] > 100000:
                    processed.append(processed_prop)
                    
            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–±—ä–µ–∫—Ç–∞: {e}")
                continue
        
        return processed

    def clean_text(self, text) -> str:
        """–û—á–∏—Å—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞"""
        if not text or text == 'null':
            return ''
        return str(text).strip()

    def safe_int(self, value) -> Optional[int]:
        """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ int"""
        if not value or value == 'null':
            return None
        try:
            # –£–¥–∞–ª—è–µ–º –ø—Ä–æ–±–µ–ª—ã –∏ –Ω–µ—á–∏—Å–ª–æ–≤—ã–µ —Å–∏–º–≤–æ–ª—ã
            clean_value = ''.join(filter(str.isdigit, str(value)))
            return int(clean_value) if clean_value else None
        except:
            return None

    def safe_float(self, value) -> Optional[float]:
        """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ float"""
        if not value or value == 'null':
            return None
        try:
            clean_value = str(value).replace(',', '.').replace(' ', '')
            return float(''.join(c for c in clean_value if c.isdigit() or c == '.'))
        except:
            return None

    def run_full_parsing(self) -> Dict:
        """–û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –ø–∞—Ä—Å–∏–Ω–≥–∞"""
        print("üöÄ –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ GPT-4 Vision –ø–∞—Ä—Å–∏–Ω–≥–∞...")
        
        all_properties = []
        
        browser, context, page = self.setup_stealth_browser()
        if not browser:
            return {'success': False, 'error': '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –±—Ä–∞—É–∑–µ—Ä'}
        
        try:
            for url in self.base_urls:
                print(f"\nüîç –ü–∞—Ä—Å–∏–Ω–≥: {url}")
                
                if not self.human_like_navigation(page, url):
                    continue
                
                # –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
                time.sleep(random.uniform(3, 7))
                
                # –î–µ–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç
                screenshot = self.take_smart_screenshot(page)
                if not screenshot:
                    continue
                
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å –ø–æ–º–æ—â—å—é GPT-4 Vision
                if self.client:
                    properties = self.extract_property_data_with_gpt(screenshot)
                    if properties:
                        processed = self.process_extracted_data(properties)
                        all_properties.extend(processed)
                        print(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –æ–±—ä–µ–∫—Ç–æ–≤: {len(processed)}")
                else:
                    print("‚ö†Ô∏è OpenAI API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω - —Å–∫—Ä–∏–Ω—à–æ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –¥–ª—è –±—É–¥—É—â–µ–≥–æ –∞–Ω–∞–ª–∏–∑–∞")
                
                # –ü–∞—É–∑–∞ –º–µ–∂–¥—É URL
                time.sleep(random.uniform(5, 10))
            
            self.scraped_data = all_properties
            
            return {
                'success': True,
                'properties_count': len(all_properties),
                'properties': all_properties
            }
            
        except Exception as e:
            print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞: {e}")
            return {'success': False, 'error': str(e)}
            
        finally:
            browser.close()
            print("üîí –ë—Ä–∞—É–∑–µ—Ä –∑–∞–∫—Ä—ã—Ç")

    def save_to_excel(self, filename: str = None) -> str:
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ Excel"""
        if not self.scraped_data:
            print("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è")
            return None
        
        if not filename:
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            filename = f"attached_assets/domclick_gpt_vision_{timestamp}.xlsx"
        
        os.makedirs(os.path.dirname(filename), exist_ok=True)
        
        try:
            df = pd.DataFrame(self.scraped_data)
            df.to_excel(filename, index=False)
            
            print(f"‚úÖ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: {filename}")
            print(f"üìä –û–±—ä–µ–∫—Ç–æ–≤ –≤ —Ñ–∞–π–ª–µ: {len(self.scraped_data)}")
            
            return filename
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")
            return None

def main():
    """–ó–∞–ø—É—Å–∫ GPT-4 Vision –ø–∞—Ä—Å–µ—Ä–∞"""
    parser = DomclickGPTVisionParser()
    
    if not parser.client:
        print("\n‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: OpenAI API –∫–ª—é—á –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
        print("–ü–∞—Ä—Å–µ—Ä –º–æ–∂–µ—Ç –¥–µ–ª–∞—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç—ã, –Ω–æ –Ω–µ –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∏—Ö")
        print("–î–æ–±–∞–≤—å—Ç–µ OPENAI_API_KEY –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —Å—Ä–µ–¥—ã –¥–ª—è –ø–æ–ª–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏")
    
    try:
        result = parser.run_full_parsing()
        
        if result['success']:
            print(f"\nüéâ –ü–ê–†–°–ò–ù–ì –ó–ê–í–ï–†–®–ï–ù –£–°–ü–ï–®–ù–û!")
            print(f"üìä –ù–∞–π–¥–µ–Ω–æ –æ–±—ä–µ–∫—Ç–æ–≤: {result['properties_count']}")
            
            if result['properties_count'] > 0:
                filename = parser.save_to_excel()
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã –¥–∞–Ω–Ω—ã—Ö
                print(f"\nüìã –ü—Ä–∏–º–µ—Ä—ã –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤:")
                for i, prop in enumerate(result['properties'][:3]):
                    print(f"{i+1}. {prop.get('complex_name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}")
                    print(f"   –¶–µ–Ω–∞: {prop.get('price', '–Ω–µ —É–∫–∞–∑–∞–Ω–∞')} ‚ÇΩ")
                    print(f"   –ü–ª–æ—â–∞–¥—å: {prop.get('object_area', '–Ω–µ —É–∫–∞–∑–∞–Ω–∞')} –º¬≤")
                    print(f"   –ö–æ–º–Ω–∞—Ç: {prop.get('object_rooms', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')}")
                
                return filename
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞: {result['error']}")
            return None
            
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        return None

if __name__ == "__main__":
    main()