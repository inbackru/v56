#!/usr/bin/env python3
"""
–°–∏—Å—Ç–µ–º–Ω–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤—Å–µ—Ö —É–ª–∏—Ü –Ω–∞ –±—É–∫–≤—É "–ì" –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∏ JSON —Ñ–∞–π–ª
"""

import json
import os
import sys
from app import app, db
from models import Street
from urllib.parse import quote
import random

# –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —É–ª–∏—Ü –Ω–∞ –±—É–∫–≤—É "–ì"
streets_g = [
    "–ì–∞–≤—Ä–∏–ª–æ–≤–∞ —É–ª.",
    "–ì–∞–≥–∞—Ä–∏–Ω–∞ —É–ª.", 
    "–ì–∞–≥–∞—Ä–∏–Ω—Å–∫–∏–π –±—É–ª—å–≤–∞—Ä",
    "–ì–∞–∑–æ–≤–∏–∫–æ–≤ —É–ª.",
    "–ì–∞–ª–ª—å—Å–∫–∞—è —É–ª.",
    "–ì–∞–º–±—É—Ä–≥—Å–∫–∞—è —É–ª.",
    "–ì–∞–Ω–Ω–æ–≤–µ—Ä—Å–∫–∞—è —É–ª.",
    "–ì–∞—Ä–∞–∂–Ω–∞—è —É–ª.",
    "–ì–∞—Ä–∞–∂–Ω—ã–π –ø–µ—Ä.",
    "–ì–∞—Å–∫–æ–Ω—Å–∫–∞—è —É–ª.",
    "–ì–∞—Å—Ç–µ–ª–ª–æ —É–ª.",
    "–ì–µ–ª–µ–Ω–¥–∂–∏–∫—Å–∫–∞—è —É–ª.",
    "–ì–µ–ª–µ–Ω–¥–∂–∏–∫—Å–∫–∏–π –ø—Ä–æ–µ–∑–¥",
    "–ì–µ–Ω–µ—Ä–∞–ª–∞ –ú–∏—â–µ–Ω–∫–æ —É–ª.",
    "–ì–µ–Ω–µ—Ä–∞–ª–∞ –ü–µ—Ç—Ä–æ–≤–∞ —É–ª.",
    "–ì–µ–Ω–µ—Ä–∞–ª–∞ –¢—Ä–æ—à–µ–≤–∞ —É–ª.",
    "–ì–µ–Ω–µ—Ä–∞–ª—å–Ω–∞—è —É–ª.",
    "–ì–µ–æ–¥–µ–∑–∏—á–µ—Å–∫–∞—è —É–ª.",
    "–ì–µ–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—è —É–ª.",
    "–ì–µ–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –ø–µ—Ä.",
    "–ì–µ–æ—Ä–≥–∏—è –î–∏–º–∏—Ç—Ä–æ–≤–∞ –ø–ª.",
    "–ì–µ—Ä–æ–µ–≤-–†–∞–∑–≤–µ–¥—á–∏–∫–æ–≤ —É–ª.",
    "–ì–µ—Ä–æ—è –ê–≤–µ—Ä–∫–∏–µ–≤–∞ —É–ª.",
    "–ì–µ—Ä–æ—è –í–ª–∞–¥–∏—Å–ª–∞–≤–∞ –ü–æ—Å–∞–¥—Å–∫–æ–≥–æ —É–ª.",
    "–ì–µ—Ä–æ—è –°–∞—Ä–∞–±–µ–µ–≤–∞ —É–ª.",
    "–ì–µ—Ä–æ—è –Ø—Ü–∫–æ–≤–∞ —É–ª.",
    "–ì–µ—Ä—Ü–µ–Ω–∞ –ø—Ä–æ–µ–∑–¥",
    "–ì–µ—Ä—Ü–µ–Ω–∞ —É–ª.",
    "–ì—ë—Ç–µ –ø—Ä-–∫—Ç.",
    "–ì–∏–∞–≥–∏–Ω—Å–∫–∞—è —É–ª.",
    "–ì–∏–¥—Ä–æ—Å—Ç—Ä–æ–∏—Ç–µ–ª–µ–π —É–ª.",
    "–ì–∏–º–Ω–∞–∑–∏—á–µ—Å–∫–∞—è —É–ª.",
    "–ì–ª–∏–Ω–∫–∏ —É–ª.",
    "–ì–ª–∏–Ω—è–Ω—ã–π –ø–µ—Ä.",
    "–ì–ª—É–±–∏–Ω–Ω—ã–π –ø–µ—Ä.",
    "–ì–ª—É—Ö–æ–π –ø–µ—Ä.",
    "–ì–æ–≥–æ–ª—è —É–ª.",
    "–ì–æ–≥–æ–ª—è –ø–µ—Ä.",
    "–ì–æ–≥–æ–ª—è (–ü–∞—à–∫–æ–≤—Å–∫–∏–π) —É–ª.",
    "–ì–æ–ª—É–±–∏–Ω–∞—è —É–ª.",
    "–ì–æ–ª—É–±–∏—Ü–∫–∞—è —É–ª.",
    "–ì–æ–º–µ–ª—å—Å–∫–∞—è —É–ª.",
    "–ì–æ–Ω—á–∞—Ä–Ω–∞—è —É–ª.",
    "–ì–æ—Ä–Ω–∞—è —É–ª.",
    "–ì–æ—Ä–æ–≥–æ—Ä–æ–¥—ã —É–ª.",
    "–ì–æ—Ä—å–∫–æ–≥–æ —É–ª.",
    "–ì–æ—Ä—å–∫–æ–≥–æ —Å–∫–≤–µ—Ä",
    "–ì–æ—Ä—è—á–µ–∫–ª—é—á–µ–≤—Å–∫–∞—è —É–ª.",
    "–ì—Ä–∞–±–∏–Ω–∞ —É–ª.",
    "–ì—Ä–∞–∂–¥–∞–Ω—Å–∫–∞—è —É–ª.",
    "–ì—Ä–∞–Ω–∞—Ç–æ–≤–∞—è —É–ª.",
    "–ì—Ä–µ–Ω–∞–¥–µ—Ä—Å–∫–∞—è —É–ª.",
    "–ì—Ä–∏–±–æ–µ–¥–æ–≤–∞ —É–ª.",
    "–ì—Ä–∏–≥–æ—Ä–∏—è –ü–æ–Ω–æ–º–∞—Ä–µ–Ω–∫–æ —É–ª.",
    "–ì—Ä–æ–∑–Ω–µ–Ω—Å–∫–∞—è —É–ª.",
    "–ì—Ä—É—à–µ–≤–∞—è —É–ª.",
    "–ì—Ä—É—à–µ–≤–∞—è (–°–ù–¢ –í–µ—Ç–µ—Ä–æ–∫) —É–ª.",
    "–ì—Ä—É—à–µ–≤–∞—è (–°–ù–¢ –ñ–∏–≤–æ—Ç–Ω–æ–≤–æ–¥) —É–ª.",
    "–ì—Ä—É—à–µ–≤–∞—è (–°–ù–¢ –†–∞–¥–∏—Å—Ç) —É–ª.",
    "–ì—Ä—É—à–µ–≤–∞—è (–°–ù–¢ –£—Ä–æ–∂–∞–π) —É–ª.",
    "–ì—Ä—É—à–µ–≤–∞—è (–°–ù–¢ –Ø–Ω—Ç–∞—Ä—å) —É–ª.",
    "–ì—É–¥–µ–Ω–∫–æ —É–ª.",
    "–ì—É–¥–∏–º—ã —É–ª."
]

# –†–∞–π–æ–Ω—ã –ö—Ä–∞—Å–Ω–æ–¥–∞—Ä–∞ –¥–ª—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —É–ª–∏—Ü
districts = [
    "–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π",
    "–ó–∞–ø–∞–¥–Ω—ã–π", 
    "–ü—Ä–∏–∫—É–±–∞–Ω—Å–∫–∏–π",
    "–ö–∞—Ä–∞—Å—É–Ω—Å–∫–∏–π",
    "–§–µ—Å—Ç–∏–≤–∞–ª—å–Ω—ã–π",
    "–ü–∞—à–∫–æ–≤—Å–∫–∏–π"
]

def create_street_slug(name):
    """–°–æ–∑–¥–∞—Ç—å —Å–ª–∞–≥ –¥–ª—è —É–ª–∏—Ü—ã"""
    return (name.lower()
            .replace(' ', '-')
            .replace('.', '')
            .replace('—ë', '–µ')
            .replace('–π', '–∏')
            .replace('(', '')
            .replace(')', '')
            .replace(',', '')
            .replace('‚Äî', '-')
            .replace('‚Äì', '-'))

def generate_street_data(name):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —É–ª–∏—Ü—ã"""
    # –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π random seed –¥–ª—è –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏
    random.seed(hash(name))
    
    # –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤ —Ä–∞–π–æ–Ω–µ –ö—Ä–∞—Å–Ω–æ–¥–∞—Ä–∞ (45.035-45.085, 38.976-39.138)
    latitude = round(random.uniform(45.035, 45.085), 6)
    longitude = round(random.uniform(38.976, 39.138), 6)
    
    # –°–ª—É—á–∞–π–Ω—ã–π —Ä–∞–π–æ–Ω –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—ä–µ–∫—Ç–æ–≤
    district = random.choice(districts)
    properties_count = random.randint(2, 15)
    
    return {
        "name": name,
        "district": district,
        "properties_count": properties_count,
        "coordinates": {
            "latitude": latitude,
            "longitude": longitude
        },
        "description": f"–ù–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å –≤ –Ω–æ–≤–æ—Å—Ç—Ä–æ–π–∫–∞—Ö –Ω–∞ —É–ª–∏—Ü–µ {name} –≤ {district} —Ä–∞–π–æ–Ω–µ –ö—Ä–∞—Å–Ω–æ–¥–∞—Ä–∞ —Å –∫—ç—à–±–µ–∫–æ–º –¥–æ 350 000 ‚ÇΩ. –ü–æ–¥–±–µ—Ä—ë–º –∫–≤–∞—Ä—Ç–∏—Ä—É –≤ –ª—É—á—à–∏—Ö –ñ–ö —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º –∫—ç—à–±–µ–∫–æ–º.",
        "meta_title": f"{name} - –Ω–æ–≤–æ—Å—Ç—Ä–æ–π–∫–∏ —Å –∫—ç—à–±–µ–∫–æ–º | InBack",
        "meta_description": f"–ö–≤–∞—Ä—Ç–∏—Ä—ã –≤ –Ω–æ–≤–æ—Å—Ç—Ä–æ–π–∫–∞—Ö –Ω–∞ {name} –≤ –ö—Ä–∞—Å–Ω–æ–¥–∞—Ä–µ. –ö—ç—à–±–µ–∫ –¥–æ 350 000 ‚ÇΩ. –û—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –ø–∞—Ä—Ç–Ω—ë—Ä –∑–∞—Å—Ç—Ä–æ–π—â–∏–∫–æ–≤. –ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è."
    }

def add_streets_to_database():
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —É–ª–∏—Ü –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö PostgreSQL"""
    with app.app_context():
        added_count = 0
        
        for street_name in streets_g:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–ª–∏—Ü–∞
            slug = create_street_slug(street_name)
            existing = Street.query.filter_by(slug=slug).first()
            
            if not existing:
                street = Street(
                    name=street_name,
                    slug=slug,
                    district_id=None  # –ü–æ–∫–∞ –±–µ–∑ –ø—Ä–∏–≤—è–∑–∫–∏ –∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É —Ä–∞–π–æ–Ω—É
                )
                db.session.add(street)
                added_count += 1
                print(f"‚úì –î–æ–±–∞–≤–ª–µ–Ω–∞ —É–ª–∏—Ü–∞: {street_name}")
            else:
                print(f"‚Ä¢ –£–ª–∏—Ü–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {street_name}")
        
        try:
            db.session.commit()
            print(f"\nüìä –î–æ–±–∞–≤–ª–µ–Ω–æ {added_count} –Ω–æ–≤—ã—Ö —É–ª–∏—Ü –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö")
        except Exception as e:
            db.session.rollback()
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤ –ë–î: {e}")
            return False
        
        return True

def update_streets_json():
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ JSON —Ñ–∞–π–ª–∞ —Å —É–ª–∏—Ü–∞–º–∏"""
    json_path = 'data/streets.json'
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ
    existing_streets = []
    if os.path.exists(json_path):
        try:
            with open(json_path, 'r', encoding='utf-8') as f:
                existing_streets = json.load(f)
        except Exception as e:
            print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è {json_path}: {e}")
    
    # –°–æ–±–∏—Ä–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è —É–ª–∏—Ü
    existing_names = {street['name'] for street in existing_streets}
    
    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ —É–ª–∏—Ü—ã
    added_count = 0
    for street_name in streets_g:
        if street_name not in existing_names:
            street_data = generate_street_data(street_name)
            existing_streets.append(street_data)
            added_count += 1
            print(f"‚úì –î–æ–±–∞–≤–ª–µ–Ω–∞ –≤ JSON: {street_name}")
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
    existing_streets.sort(key=lambda x: x['name'])
    
    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    os.makedirs('data', exist_ok=True)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    try:
        with open(json_path, 'w', encoding='utf-8') as f:
            json.dump(existing_streets, f, ensure_ascii=False, indent=2)
        print(f"\nüìÅ –î–æ–±–∞–≤–ª–µ–Ω–æ {added_count} —É–ª–∏—Ü –≤ {json_path}")
        print(f"üìä –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–ª–∏—Ü –≤ —Ñ–∞–π–ª–µ: {len(existing_streets)}")
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è JSON: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –ù–∞—á–∏–Ω–∞–µ–º —Å–∏—Å—Ç–µ–º–Ω–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —É–ª–∏—Ü –Ω–∞ –±—É–∫–≤—É '–ì'...")
    print(f"üìã –í—Å–µ–≥–æ —É–ª–∏—Ü –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è: {len(streets_g)}")
    print()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    print("1Ô∏è‚É£  –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö PostgreSQL:")
    db_success = add_streets_to_database()
    
    print()
    
    # –û–±–Ω–æ–≤–ª—è–µ–º JSON —Ñ–∞–π–ª
    print("2Ô∏è‚É£  –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ JSON —Ñ–∞–π–ª–∞:")
    json_success = update_streets_json()
    
    print()
    
    if db_success and json_success:
        print("‚úÖ –í—Å–µ —É–ª–∏—Ü—ã –Ω–∞ –±—É–∫–≤—É '–ì' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã!")
        print("üåê –¢–µ–ø–µ—Ä—å –¥–ª—è –∫–∞–∂–¥–æ–π —É–ª–∏—Ü—ã –¥–æ—Å—Ç—É–ø–Ω–∞ –æ—Ç–¥–µ–ª—å–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞")
        print("üîó –°—Ç—Ä–∞–Ω–∏—Ü—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ—Å—Ç—É–ø–Ω—ã –ø–æ –∞–¥—Ä–µ—Å—É /streets/–Ω–∞–∑–≤–∞–Ω–∏–µ-—É–ª–∏—Ü—ã")
    else:
        print("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∏ –æ—à–∏–±–∫–∏ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —É–ª–∏—Ü")
        sys.exit(1)

if __name__ == "__main__":
    main()