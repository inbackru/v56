#!/usr/bin/env python3
"""
–£–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –æ—Å–Ω–æ–≤–Ω—ã–º–∏ —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
"""
import json
import random
from datetime import datetime, timedelta
from app import app, db
from models import (
    User, Manager, Admin, BlogPost, Collection, CollectionProperty, 
    CashbackApplication, FavoriteProperty, SavedSearch, UserNotification,
    CashbackRecord, Application, Favorite, District, Developer,
    ResidentialComplex, SearchCategory, SentSearch
)

def create_test_users():
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    print("\nüìù –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...")
    
    users_data = [
        {
            'email': 'demo@inback.ru',
            'full_name': '–î–µ–º–æ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
            'phone': '+7-918-123-45-67',
            'role': 'buyer',
            'is_demo': True,
            'is_verified': True,
            'client_status': '–ê–∫—Ç–∏–≤–Ω—ã–π'
        },
        {
            'email': 'ivan.petrov@email.ru',
            'full_name': '–ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤',
            'phone': '+7-918-234-56-78',
            'role': 'buyer',
            'client_status': '–ê–∫—Ç–∏–≤–Ω—ã–π'
        },
        {
            'email': 'maria.sidorova@email.ru',
            'full_name': '–ú–∞—Ä–∏—è –°–∏–¥–æ—Ä–æ–≤–∞',
            'phone': '+7-918-345-67-89',
            'role': 'buyer',
            'client_status': '–ù–æ–≤—ã–π'
        },
        {
            'email': 'alex.kozlov@email.ru',
            'full_name': '–ê–ª–µ–∫—Å–∞–Ω–¥—Ä –ö–æ–∑–ª–æ–≤',
            'phone': '+7-918-456-78-90',
            'role': 'buyer',
            'client_status': '–í —Ä–∞–±–æ—Ç–µ'
        },
        {
            'email': 'elena.smirnova@email.ru',
            'full_name': '–ï–ª–µ–Ω–∞ –°–º–∏—Ä–Ω–æ–≤–∞',
            'phone': '+7-918-567-89-01',
            'role': 'buyer',
            'client_status': '–ê–∫—Ç–∏–≤–Ω—ã–π'
        }
    ]
    
    created_users = []
    for user_data in users_data:
        existing_user = User.query.filter_by(email=user_data['email']).first()
        if not existing_user:
            user = User(**user_data)
            user.set_password('demo123')
            db.session.add(user)
            created_users.append(user)
        else:
            created_users.append(existing_user)
    
    db.session.commit()
    print(f"‚úì –°–æ–∑–¥–∞–Ω–æ/–Ω–∞–π–¥–µ–Ω–æ {len(created_users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
    return created_users

def create_test_managers():
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤"""
    print("\nüë• –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã—Ö –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤...")
    
    managers_data = [
        {
            'email': 'manager@inback.ru',
            'first_name': '–î–µ–º–æ',
            'last_name': '–ú–µ–Ω–µ–¥–∂–µ—Ä',
            'phone': '+7-918-111-22-33',
            'position': '–°—Ç–∞—Ä—à–∏–π –º–µ–Ω–µ–¥–∂–µ—Ä'
        },
        {
            'email': 'anna.manager@inback.ru',
            'first_name': '–ê–Ω–Ω–∞',
            'last_name': '–ú–µ–Ω–µ–¥–∂–µ—Ä–æ–≤–∞',
            'phone': '+7-918-222-33-44',
            'position': '–ú–µ–Ω–µ–¥–∂–µ—Ä –ø–æ –ø—Ä–æ–¥–∞–∂–∞–º'
        }
    ]
    
    created_managers = []
    for manager_data in managers_data:
        existing_manager = Manager.query.filter_by(email=manager_data['email']).first()
        if not existing_manager:
            manager = Manager(**manager_data)
            manager.set_password('demo123')
            db.session.add(manager)
            created_managers.append(manager)
        else:
            created_managers.append(existing_manager)
    
    db.session.commit()
    print(f"‚úì –°–æ–∑–¥–∞–Ω–æ/–Ω–∞–π–¥–µ–Ω–æ {len(created_managers)} –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤")
    return created_managers

def create_test_admins():
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤"""
    print("\nüîë –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤...")
    
    admins_data = [
        {
            'email': 'admin@inback.ru',
            'full_name': '–°—É–ø–µ—Ä –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä',
            'phone': '+7-918-000-11-22',
            'role': 'Super Admin',
            'is_super_admin': True
        }
    ]
    
    created_admins = []
    for admin_data in admins_data:
        existing_admin = Admin.query.filter_by(email=admin_data['email']).first()
        if not existing_admin:
            admin = Admin(**admin_data)
            admin.set_password('admin123')
            db.session.add(admin)
            created_admins.append(admin)
        else:
            created_admins.append(existing_admin)
    
    db.session.commit()
    print(f"‚úì –°–æ–∑–¥–∞–Ω–æ/–Ω–∞–π–¥–µ–Ω–æ {len(created_admins)} –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤")
    return created_admins

def create_districts_and_developers():
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞–π–æ–Ω–æ–≤ –∏ –∑–∞—Å—Ç—Ä–æ–π—â–∏–∫–æ–≤"""
    print("\nüèòÔ∏è –°–æ–∑–¥–∞–µ–º —Ä–∞–π–æ–Ω—ã –∏ –∑–∞—Å—Ç—Ä–æ–π—â–∏–∫–æ–≤...")
    
    # –°–æ–∑–¥–∞–µ–º —Ä–∞–π–æ–Ω—ã
    districts_data = [
        '–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π', '–ó–∞–ø–∞–¥–Ω—ã–π', '–°–µ–≤–µ—Ä–Ω—ã–π', '–ö–∞—Ä–∞—Å—É–Ω—Å–∫–∏–π', 
        '–ü—Ä–∏–∫—É–±–∞–Ω—Å–∫–∏–π', '–§–µ—Å—Ç–∏–≤–∞–ª—å–Ω—ã–π', '–Æ–±–∏–ª–µ–π–Ω—ã–π', '–ö–æ–º—Å–æ–º–æ–ª—å—Å–∫–∏–π'
    ]
    
    created_districts = []
    for district_name in districts_data:
        slug = district_name.lower().replace(' ', '-').replace('—ã–π', 'y').replace('–∏–π', 'y')
        existing_district = District.query.filter_by(name=district_name).first()
        if not existing_district:
            district = District(name=district_name, slug=slug)
            db.session.add(district)
            created_districts.append(district)
        else:
            created_districts.append(existing_district)
    
    # –°–æ–∑–¥–∞–µ–º –∑–∞—Å—Ç—Ä–æ–π—â–∏–∫–æ–≤
    developers_data = [
        '–ì–ö "–ò–Ω–≤–µ—Å—Ç—Å—Ç—Ä–æ–π–∫—É–±"', '–°–ö "–°—Ç—Ä–æ–π–≥—Ä–∞–¥"', '–û–û–û "–ö—É–±–∞–Ω—å –°—Ç—Ä–æ–π"',
        '–ì–ö "–ü—Ä–µ–º—å–µ—Ä"', '–°–ö "–ù–æ–≤—ã–π –¥–æ–º"'
    ]
    
    created_developers = []
    for dev_name in developers_data:
        slug = dev_name.lower().replace(' ', '-').replace('¬´', '').replace('¬ª', '').replace('"', '').replace('.', '')
        existing_developer = Developer.query.filter_by(name=dev_name).first()
        if not existing_developer:
            developer = Developer(name=dev_name, slug=slug)
            db.session.add(developer)
            created_developers.append(developer)
        else:
            created_developers.append(existing_developer)
    
    db.session.commit()
    print(f"‚úì –°–æ–∑–¥–∞–Ω–æ/–Ω–∞–π–¥–µ–Ω–æ {len(created_districts)} —Ä–∞–π–æ–Ω–æ–≤")
    print(f"‚úì –°–æ–∑–¥–∞–Ω–æ/–Ω–∞–π–¥–µ–Ω–æ {len(created_developers)} –∑–∞—Å—Ç—Ä–æ–π—â–∏–∫–æ–≤")
    
    return created_districts, created_developers

def create_residential_complexes(developers, districts):
    """–°–æ–∑–¥–∞–Ω–∏–µ –∂–∏–ª—ã—Ö –∫–æ–º–ø–ª–µ–∫—Å–æ–≤"""
    print("\nüè¢ –°–æ–∑–¥–∞–µ–º –∂–∏–ª—ã–µ –∫–æ–º–ø–ª–µ–∫—Å—ã...")
    
    complexes_data = [
        {'name': '–ñ–ö ¬´–ü–µ—Ä–≤–æ–µ –º–µ—Å—Ç–æ¬ª', 'developer_idx': 0, 'district_idx': 4},
        {'name': '–ñ–ö ¬´–°–æ–ª–Ω–µ—á–Ω—ã–π –≥–æ—Ä–æ–¥¬ª', 'developer_idx': 1, 'district_idx': 0},
        {'name': '–ñ–ö ¬´–ü—Ä–µ–º—å–µ—Ä –ø–∞—Ä–∫¬ª', 'developer_idx': 3, 'district_idx': 0},
        {'name': '–ñ–ö ¬´–ö—É–±–∞–Ω—Å–∫–∏–µ –ø—Ä–æ—Å—Ç–æ—Ä—ã¬ª', 'developer_idx': 2, 'district_idx': 3},
        {'name': '–ñ–ö ¬´–ù–æ–≤—ã–π –∫–≤–∞—Ä—Ç–∞–ª¬ª', 'developer_idx': 4, 'district_idx': 1},
        {'name': '–ñ–ö ¬´–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –ø–∞—Ä–∫¬ª', 'developer_idx': 0, 'district_idx': 0},
        {'name': '–ñ–ö ¬´–ú–µ—á—Ç–∞¬ª', 'developer_idx': 1, 'district_idx': 2},
        {'name': '–ñ–ö ¬´–ó–µ–ª–µ–Ω—ã–π –±–µ—Ä–µ–≥¬ª', 'developer_idx': 2, 'district_idx': 4}
    ]
    
    created_complexes = []
    for complex_data in complexes_data:
        existing_complex = ResidentialComplex.query.filter_by(name=complex_data['name']).first()
        if not existing_complex:
            complex_slug = complex_data['name'].lower().replace(' ', '-').replace('¬´', '').replace('¬ª', '').replace('.', '')
            
            developer = developers[complex_data['developer_idx']] if complex_data['developer_idx'] < len(developers) else None
            district = districts[complex_data['district_idx']] if complex_data['district_idx'] < len(districts) else None
            
            complex_obj = ResidentialComplex(
                name=complex_data['name'],
                slug=complex_slug,
                developer_id=developer.id if developer else None,
                district_id=district.id if district else None
            )
            db.session.add(complex_obj)
            created_complexes.append(complex_obj)
        else:
            created_complexes.append(existing_complex)
    
    db.session.commit()
    print(f"‚úì –°–æ–∑–¥–∞–Ω–æ/–Ω–∞–π–¥–µ–Ω–æ {len(created_complexes)} –∂–∏–ª—ã—Ö –∫–æ–º–ø–ª–µ–∫—Å–æ–≤")
    return created_complexes

def create_search_categories():
    """–°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –ø–æ–∏—Å–∫–∞"""
    print("\nüîç –°–æ–∑–¥–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–∏—Å–∫–∞...")
    
    categories_data = [
        {'name': '–°—Ç—É–¥–∏–∏', 'category_type': 'rooms', 'slug': 'studio'},
        {'name': '1-–∫–æ–º–Ω–∞—Ç–Ω—ã–µ', 'category_type': 'rooms', 'slug': '1-room'},
        {'name': '2-–∫–æ–º–Ω–∞—Ç–Ω—ã–µ', 'category_type': 'rooms', 'slug': '2-room'},
        {'name': '3-–∫–æ–º–Ω–∞—Ç–Ω—ã–µ –∏ –±–æ–ª—å—à–µ', 'category_type': 'rooms', 'slug': '3-plus-room'},
        {'name': '–î–æ 5 –º–ª–Ω', 'category_type': 'price', 'slug': 'under-5m'},
        {'name': '–û—Ç 5 –¥–æ 10 –º–ª–Ω', 'category_type': 'price', 'slug': '5m-10m'},
        {'name': '–ü—Ä–µ–º–∏—É–º', 'category_type': 'price', 'slug': 'premium'}
    ]
    
    created_categories = []
    for category_data in categories_data:
        existing_category = SearchCategory.query.filter_by(name=category_data['name']).first()
        if not existing_category:
            category = SearchCategory(**category_data)
            db.session.add(category)
            created_categories.append(category)
        else:
            created_categories.append(existing_category)
    
    db.session.commit()
    print(f"‚úì –°–æ–∑–¥–∞–Ω–æ/–Ω–∞–π–¥–µ–Ω–æ {len(created_categories)} –∫–∞—Ç–µ–≥–æ—Ä–∏–π –ø–æ–∏—Å–∫–∞")
    return created_categories

def create_test_data(users, managers):
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö: –∏–∑–±—Ä–∞–Ω–Ω–æ–µ, –∑–∞—è–≤–∫–∏, —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
    print("\nüìã –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ...")
    
    # –°–æ–∑–¥–∞–µ–º –∏–∑–±—Ä–∞–Ω–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã
    favorites_created = 0
    for i, user in enumerate(users[:3]):  # –¢–æ–ª—å–∫–æ –¥–ª—è –ø–µ—Ä–≤—ã—Ö 3 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        for j in range(random.randint(2, 5)):
            existing_favorite = FavoriteProperty.query.filter_by(
                user_id=user.id, 
                property_id=f'prop_{i}_{j}'
            ).first()
            
            if not existing_favorite:
                favorite = FavoriteProperty(
                    user_id=user.id,
                    property_id=f'prop_{i}_{j}',
                    property_name=f"{random.choice(['1', '2', '3'])}-–∫–æ–º–Ω –∫–≤–∞—Ä—Ç–∏—Ä–∞",
                    property_type=random.choice(['1', '2', '3']),
                    property_size=random.randint(35, 120),
                    property_price=random.randint(3000000, 15000000),
                    complex_name=f'–ñ–ö "–¢–µ—Å—Ç–æ–≤—ã–π-{j+1}"',
                    developer_name='–¢–µ—Å—Ç–æ–≤—ã–π –∑–∞—Å—Ç—Ä–æ–π—â–∏–∫',
                    cashback_amount=random.randint(50000, 300000),
                    cashback_percent=2.0
                )
                db.session.add(favorite)
                favorites_created += 1
    
    # –°–æ–∑–¥–∞–µ–º –∑–∞—è–≤–∫–∏ –Ω–∞ –∫–µ—à–±–µ–∫
    applications_created = 0
    for i, user in enumerate(users[:4]):  # –¢–æ–ª—å–∫–æ –¥–ª—è –ø–µ—Ä–≤—ã—Ö 4 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        for j in range(random.randint(1, 3)):
            existing_app = CashbackApplication.query.filter_by(
                user_id=user.id,
                property_id=f'app_{i}_{j}'
            ).first()
            
            if not existing_app:
                price = random.randint(4000000, 12000000)
                cashback_amount = int(price * 0.02)
                application = CashbackApplication(
                    user_id=user.id,
                    property_id=f'app_{i}_{j}',
                    property_name=f"{random.choice(['1', '2', '3'])}-–∫–æ–º–Ω –∫–≤–∞—Ä—Ç–∏—Ä–∞",
                    property_type=random.choice(['1', '2', '3']),
                    property_size=random.randint(35, 120),
                    property_price=price,
                    complex_name=f'–ñ–ö "–ó–∞—è–≤–∫–∞-{j+1}"',
                    developer_name='–ó–∞—Å—Ç—Ä–æ–π—â–∏–∫ –∑–∞—è–≤–æ–∫',
                    cashback_amount=cashback_amount,
                    cashback_percent=2.0,
                    status=random.choice(['–ù–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏', '–û–¥–æ–±—Ä–µ–Ω–∞', '–í—ã–ø–ª–∞—á–µ–Ω–∞']),
                    approved_by_manager_id=managers[0].id if managers else None
                )
                db.session.add(application)
                applications_created += 1
    
    # –°–æ–∑–¥–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    notifications_created = 0
    notification_texts = [
        '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º—É!',
        '–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –∫–µ—à–±–µ–∫ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∞',
        '–ù–æ–≤—ã–µ –æ–±—ä–µ–∫—Ç—ã –ø–æ –≤–∞—à–∏–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º',
        '–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω –≤ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –ñ–ö'
    ]
    
    for user in users:
        for text in random.sample(notification_texts, 2):
            notification = UserNotification(
                user_id=user.id,
                title='–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ',
                message=text,
                notification_type='info',
                is_read=random.choice([True, False])
            )
            db.session.add(notification)
            notifications_created += 1
    
    # –°–æ–∑–¥–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –ø–æ–∏—Å–∫–∏
    searches_created = 0
    for user in users[:3]:
        search_params = [
            '{"rooms": ["1"], "price_max": 5000000}',
            '{"rooms": ["2", "3"], "district": "–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π"}',
            '{"price_min": 3000000, "price_max": 8000000}'
        ]
        
        for params in random.sample(search_params, 1):
            saved_search = SavedSearch(
                user_id=user.id,
                name=f"–ü–æ–∏—Å–∫ {random.randint(1, 100)}",
                filters=params,
                is_active=True
            )
            db.session.add(saved_search)
            searches_created += 1
    
    db.session.commit()
    
    print(f"‚úì –°–æ–∑–¥–∞–Ω–æ {favorites_created} –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤")
    print(f"‚úì –°–æ–∑–¥–∞–Ω–æ {applications_created} –∑–∞—è–≤–æ–∫ –Ω–∞ –∫–µ—à–±–µ–∫")
    print(f"‚úì –°–æ–∑–¥–∞–Ω–æ {notifications_created} —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
    print(f"‚úì –°–æ–∑–¥–∞–Ω–æ {searches_created} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –ø–æ–∏—Å–∫–æ–≤")

def create_blog_posts(admins):
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Å—Ç–∞—Ç–µ–π –±–ª–æ–≥–∞"""
    print("\nüìù –°–æ–∑–¥–∞–µ–º —Å—Ç–∞—Ç—å–∏ –±–ª–æ–≥–∞...")
    
    if not admins:
        print("‚ö†Ô∏è –ù–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç–∞—Ç–µ–π")
        return []
    
    blog_posts_data = [
        {
            'title': '–ö–∞–∫ –≤—ã–±—Ä–∞—Ç—å –∫–≤–∞—Ä—Ç–∏—Ä—É –≤ –Ω–æ–≤–æ—Å—Ç—Ä–æ–π–∫–µ',
            'content': '–ü–æ–ª–Ω–æ–µ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –ø–æ –≤—ã–±–æ—Ä—É –∫–≤–∞—Ä—Ç–∏—Ä—ã –≤ –Ω–æ–≤–æ—Å—Ç—Ä–æ–π–∫–µ. –ü—Ä–∏ –≤—ã–±–æ—Ä–µ –∫–≤–∞—Ä—Ç–∏—Ä—ã –≤ –Ω–æ–≤–æ—Å—Ç—Ä–æ–π–∫–µ –≤–∞–∂–Ω–æ —É—á–∏—Ç—ã–≤–∞—Ç—å –º–Ω–æ–∂–µ—Å—Ç–≤–æ —Ñ–∞–∫—Ç–æ—Ä–æ–≤: —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ, –∑–∞—Å—Ç—Ä–æ–π—â–∏–∫–∞, –ø–ª–∞–Ω–∏—Ä–æ–≤–∫—É, –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—É –∏ —Å—Ä–æ–∫–∏ —Å–¥–∞—á–∏ –æ–±—ä–µ–∫—Ç–∞.',
            'excerpt': '–û—Å–Ω–æ–≤–Ω—ã–µ –∫—Ä–∏—Ç–µ—Ä–∏–∏ –≤—ã–±–æ—Ä–∞ –∫–≤–∞—Ä—Ç–∏—Ä—ã –≤ –Ω–æ–≤–æ—Å—Ç—Ä–æ–π–∫–µ',
            'category': '–°–æ–≤–µ—Ç—ã –ø–æ–∫—É–ø–∞—Ç–µ–ª—è–º',
            'status': 'published'
        },
        {
            'title': '–ò–ø–æ—Ç–µ–∫–∞ –≤ 2024 –≥–æ–¥—É: –≤—Å–µ —á—Ç–æ –Ω—É–∂–Ω–æ –∑–Ω–∞—Ç—å',
            'content': '–ê–∫—Ç—É–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∏–ø–æ—Ç–µ—á–Ω—ã—Ö –ø—Ä–æ–≥—Ä–∞–º–º–∞—Ö 2024 –≥–æ–¥–∞. –õ—å–≥–æ—Ç–Ω—ã–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã, —É—Å–ª–æ–≤–∏—è –±–∞–Ω–∫–æ–≤, —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –∑–∞–µ–º—â–∏–∫–∞–º.',
            'excerpt': '–û–±–∑–æ—Ä –∏–ø–æ—Ç–µ—á–Ω—ã—Ö –ø—Ä–æ–≥—Ä–∞–º–º –∏ —É—Å–ª–æ–≤–∏–π',
            'category': '–ò–ø–æ—Ç–µ–∫–∞', 
            'status': 'published'
        },
        {
            'title': '–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏ –≤ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å –ö—Ä–∞—Å–Ω–æ–¥–∞—Ä–∞',
            'content': '–ê–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ –ö—Ä–∞—Å–Ω–æ–¥–∞—Ä–∞ –¥–ª—è –∏–Ω–≤–µ—Å—Ç–æ—Ä–æ–≤. –ü–µ—Ä—Å–ø–µ–∫—Ç–∏–≤–Ω—ã–µ —Ä–∞–π–æ–Ω—ã, –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å, —Ä–∏—Å–∫–∏.',
            'excerpt': '–ü–µ—Ä—Å–ø–µ–∫—Ç–∏–≤—ã –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π –≤ –∫—Ä–∞—Å–Ω–æ–¥–∞—Ä—Å–∫—É—é –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å',
            'category': '–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏',
            'status': 'published'
        }
    ]
    
    created_posts = []
    for post_data in blog_posts_data:
        existing_post = BlogPost.query.filter_by(title=post_data['title']).first()
        if not existing_post:
            post = BlogPost(
                title=post_data['title'],
                content=post_data['content'],
                excerpt=post_data['excerpt'],
                category=post_data['category'],
                status=post_data['status'],
                author_id=admins[0].id,
                published_at=datetime.utcnow() - timedelta(days=random.randint(1, 30))
            )
            db.session.add(post)
            created_posts.append(post)
        else:
            created_posts.append(existing_post)
    
    db.session.commit()
    print(f"‚úì –°–æ–∑–¥–∞–Ω–æ/–Ω–∞–π–¥–µ–Ω–æ {len(created_posts)} —Å—Ç–∞—Ç–µ–π –±–ª–æ–≥–∞")
    return created_posts

def assign_users_to_managers(users, managers):
    """–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º"""
    print("\nüë• –ù–∞–∑–Ω–∞—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º...")
    
    if not managers:
        print("‚ö†Ô∏è –ù–µ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è")
        return
    
    assigned_count = 0
    for i, user in enumerate(users):
        if not user.assigned_manager_id:  # –ï—Å–ª–∏ –µ—â–µ –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω
            manager = managers[i % len(managers)]
            user.assigned_manager_id = manager.id
            assigned_count += 1
    
    db.session.commit()
    print(f"‚úì –ù–∞–∑–Ω–∞—á–µ–Ω–æ {assigned_count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏...")
    
    with app.app_context():
        # –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        users = create_test_users()
        managers = create_test_managers()
        admins = create_test_admins()
        
        # –°–æ–∑–¥–∞–µ–º —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∏
        districts, developers = create_districts_and_developers()
        residential_complexes = create_residential_complexes(developers, districts)
        search_categories = create_search_categories()
        
        # –°–æ–∑–¥–∞–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        assign_users_to_managers(users, managers)
        create_test_data(users, managers)
        blog_posts = create_blog_posts(admins)
        
        print("\n‚úÖ –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
        print("\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
        print(f"   üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: {len(users)}")
        print(f"   üè¢ –ú–µ–Ω–µ–¥–∂–µ—Ä—ã: {len(managers)}")
        print(f"   üîë –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã: {len(admins)}")
        print(f"   üèòÔ∏è –†–∞–π–æ–Ω—ã: {len(districts)}")
        print(f"   üèóÔ∏è –ó–∞—Å—Ç—Ä–æ–π—â–∏–∫–∏: {len(developers)}")
        print(f"   üè¢ –ñ–∏–ª—ã–µ –∫–æ–º–ø–ª–µ–∫—Å—ã: {len(residential_complexes)}")
        print(f"   üîç –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–∏—Å–∫–∞: {len(search_categories)}")
        print(f"   üìù –°—Ç–∞—Ç—å–∏ –±–ª–æ–≥–∞: {len(blog_posts)}")
        
        print(f"\nüîê –¢–µ—Å—Ç–æ–≤—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã:")
        print(f"   üìß –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: demo@inback.ru / demo123")
        print(f"   üë• –ú–µ–Ω–µ–¥–∂–µ—Ä: manager@inback.ru / demo123")
        print(f"   üîë –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä: admin@inback.ru / admin123")

if __name__ == '__main__':
    main()