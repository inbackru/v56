#!/usr/bin/env python3
"""
–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –∏–º–ø–æ—Ä—Ç –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ Excel —Ñ–∞–π–ª–æ–≤
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã—Ö –∑–∞—Å—Ç—Ä–æ–π—â–∏–∫–æ–≤, –ñ–ö –∏ –∫–≤–∞—Ä—Ç–∏—Ä—ã
"""

import pandas as pd
import json
from flask import Flask
from app import app, db
from models import *
from werkzeug.security import generate_password_hash
import os
from datetime import datetime
from sqlalchemy import text

def import_new_excel_data(filename):
    """
    –ò–º–ø–æ—Ä—Ç –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ Excel —Ñ–∞–π–ª–∞
    –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–µ—Ç:
    1. –ù–æ–≤—ã—Ö –∑–∞—Å—Ç—Ä–æ–π—â–∏–∫–æ–≤ (–µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç –≤ –±–∞–∑–µ)
    2. –ù–æ–≤—ã–µ –ñ–ö (–µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç –≤ –±–∞–∑–µ) 
    3. –ù–æ–≤—ã–µ –∫–≤–∞—Ä—Ç–∏—Ä—ã (–æ–±–Ω–æ–≤–ª—è–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ)
    """
    
    print(f"üîÑ –ù–∞—á–∏–Ω–∞–µ–º –∏–º–ø–æ—Ä—Ç –∏–∑ —Ñ–∞–π–ª–∞: {filename}")
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º Excel —Ñ–∞–π–ª
    try:
        df = pd.read_excel(filename)
        print(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(df)} –∑–∞–ø–∏—Å–µ–π –≤ —Ñ–∞–π–ª–µ")
        print(f"üìã –ö–æ–ª–æ–Ω–∫–∏: {list(df.columns)}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞: {e}")
        return False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∫–æ–ª–æ–Ω–æ–∫
    required_columns = ['developer_name', 'complex_name']
    missing_columns = [col for col in required_columns if col not in df.columns]
    if missing_columns:
        print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏: {missing_columns}")
        return False
    
    with app.app_context():
        try:
            # 1. –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã—Ö –∑–∞—Å—Ç—Ä–æ–π—â–∏–∫–æ–≤
            import_developers_from_excel(df)
            
            # 2. –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ –ñ–ö 
            import_complexes_from_excel(df)
            
            # 3. –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤—Å–µ –∫–≤–∞—Ä—Ç–∏—Ä—ã –≤ —Ç–∞–±–ª–∏—Ü—É excel_properties
            import_properties_to_excel_table(df)
            
            db.session.commit()
            print("‚úÖ –ò–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
            db.session.rollback()
            return False

def import_developers_from_excel(df):
    """–°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã—Ö –∑–∞—Å—Ç—Ä–æ–π—â–∏–∫–æ–≤ –∏–∑ Excel –¥–∞–Ω–Ω—ã—Ö"""
    
    print("\nüèóÔ∏è –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∑–∞—Å—Ç—Ä–æ–π—â–∏–∫–æ–≤...")
    
    # –ü–æ–ª—É—á–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∑–∞—Å—Ç—Ä–æ–π—â–∏–∫–æ–≤ –∏–∑ Excel
    unique_developers = df['developer_name'].dropna().unique()
    
    created_count = 0
    
    for dev_name in unique_developers:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π –∑–∞—Å—Ç—Ä–æ–π—â–∏–∫
        existing = Developer.query.filter_by(name=dev_name.strip()).first()
        
        if not existing:
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –∑–∞—Å—Ç—Ä–æ–π—â–∏–∫–∞
            developer = Developer(
                name=dev_name.strip(),
                slug=dev_name.strip().replace(' ', '-').lower(),
                description=f'–ù–∞–¥—ë–∂–Ω—ã–π –∑–∞—Å—Ç—Ä–æ–π—â–∏–∫ {dev_name.strip()} —Å –º–Ω–æ–≥–æ–ª–µ—Ç–Ω–∏–º –æ–ø—ã—Ç–æ–º —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–∞ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∂–∏–ª—å—è.',
                website=f'https://{dev_name.strip().replace(" ", "").lower()}.ru',
                phone='+7-861-000-00-00',
                email=f'info@{dev_name.strip().replace(" ", "").lower()}.ru',
                rating=4.5,
                founded_year=2010,
                experience_years=14,
                completed_projects=5,
                completed_buildings=15,
                completed_complexes=5,
                is_active=True,
                logo_url='https://images.unsplash.com/photo-1486406146926-c627a92ad1ab?w=200',
                banner_image='https://images.unsplash.com/photo-1541888946425-d81bb19240f5?w=800',
                features=json.dumps([
                    '–°–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ',
                    '–°–¥–∞—á–∞ –æ–±—ä–µ–∫—Ç–æ–≤ –≤ —Å—Ä–æ–∫',
                    '–ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã',
                    '–ü–æ–ª–Ω–æ–µ —Å–æ–ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏–µ —Å–¥–µ–ª–∫–∏'
                ]),
                created_at=datetime.utcnow(),
                updated_at=datetime.utcnow()
            )
            
            db.session.add(developer)
            created_count += 1
            print(f"   ‚ûï –°–æ–∑–¥–∞–Ω –∑–∞—Å—Ç—Ä–æ–π—â–∏–∫: {dev_name}")
        else:
            print(f"   ‚úì –ó–∞—Å—Ç—Ä–æ–π—â–∏–∫ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {dev_name}")
    
    print(f"üèóÔ∏è –°–æ–∑–¥–∞–Ω–æ –Ω–æ–≤—ã—Ö –∑–∞—Å—Ç—Ä–æ–π—â–∏–∫–æ–≤: {created_count}")

def import_complexes_from_excel(df):
    """–°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–µ –ñ–ö –∏–∑ Excel –¥–∞–Ω–Ω—ã—Ö"""
    
    print("\nüè¢ –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∂–∏–ª—ã–µ –∫–æ–º–ø–ª–µ–∫—Å—ã...")
    
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –ñ–ö –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–æ–º–ø–ª–µ–∫—Å–æ–≤
    complex_groups = df.groupby(['developer_name', 'complex_name']).first().reset_index()
    
    created_count = 0
    
    for _, complex_data in complex_groups.iterrows():
        complex_name = complex_data['complex_name']
        developer_name = complex_data['developer_name'] 
        
        if pd.isna(complex_name) or pd.isna(developer_name):
            continue
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π –ñ–ö –ø–æ –∏–º–µ–Ω–∏
        existing = ResidentialComplex.query.filter_by(
            name=complex_name.strip()
        ).first()
        
        if not existing:
            # –ù–∞—Ö–æ–¥–∏–º ID –∑–∞—Å—Ç—Ä–æ–π—â–∏–∫–∞
            developer = Developer.query.filter_by(name=developer_name.strip()).first()
            developer_id = developer.id if developer else None
            
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –ñ–ö
            residential_complex = ResidentialComplex(
                name=complex_name.strip(),
                slug=complex_name.strip().replace(' ', '-').lower(),
                developer_id=developer_id,
                description=f'–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –∂–∏–ª–æ–π –∫–æ–º–ø–ª–µ–∫—Å {complex_name.strip()} –æ—Ç –∑–∞—Å—Ç—Ä–æ–π—â–∏–∫–∞ {developer_name.strip()}',
                district=complex_data.get('district', '–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π'),
                address=complex_data.get('address_short_display_name', '–ê–¥—Ä–µ—Å —É—Ç–æ—á–Ω—è–µ—Ç—Å—è'),
                min_price=int(complex_data.get('price', 5000000)) if pd.notna(complex_data.get('price')) else 5000000,
                total_units=100,  # –ë—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–æ –ø—Ä–∏ –ø–æ–¥—Å—á–µ—Ç–µ –∫–≤–∞—Ä—Ç–∏—Ä
                completion_year=int(complex_data.get('complex_end_build_year', 2025)) if pd.notna(complex_data.get('complex_end_build_year')) else 2025,
                completion_quarter=complex_data.get('complex_end_build_quarter', 'IV'),
                building_count=1,
                infrastructure=json.dumps([
                    '–î–µ—Ç—Å–∫–∞—è –ø–ª–æ—â–∞–¥–∫–∞',
                    '–ü–∞—Ä–∫–æ–≤–∫–∞',
                    '–í–∏–¥–µ–æ–Ω–∞–±–ª—é–¥–µ–Ω–∏–µ',
                    '–ë–ª–∞–≥–æ—É—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –¥–≤–æ—Ä'
                ]),
                latitude=float(complex_data.get('address_position_lat', 45.0)) if pd.notna(complex_data.get('address_position_lat')) else 45.0,
                longitude=float(complex_data.get('address_position_lon', 39.0)) if pd.notna(complex_data.get('address_position_lon')) else 39.0,
                is_active=True,
                images=json.dumps(['https://images.unsplash.com/photo-1545324418-cc1a3fa10c00?w=800']),
                created_at=datetime.utcnow(),
                updated_at=datetime.utcnow()
            )
            
            db.session.add(residential_complex)
            created_count += 1
            print(f"   ‚ûï –°–æ–∑–¥–∞–Ω –ñ–ö: {complex_name} ({developer_name})")
        else:
            print(f"   ‚úì –ñ–ö —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {complex_name}")
    
    print(f"üè¢ –°–æ–∑–¥–∞–Ω–æ –Ω–æ–≤—ã—Ö –ñ–ö: {created_count}")

def import_properties_to_excel_table(df):
    """–ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ç–∞–±–ª–∏—Ü—É excel_properties"""
    
    print(f"\nüè† –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º {len(df)} –∫–≤–∞—Ä—Ç–∏—Ä –≤ —Ç–∞–±–ª–∏—Ü—É excel_properties...")
    
    # –û—á–∏—â–∞–µ–º —Ç–∞–±–ª–∏—Ü—É excel_properties –ø–µ—Ä–µ–¥ –Ω–æ–≤—ã–º –∏–º–ø–æ—Ä—Ç–æ–º
    db.session.execute(text("DELETE FROM excel_properties"))
    print("   üßπ –û—á–∏—â–µ–Ω–∞ —Å—Ç–∞—Ä–∞—è —Ç–∞–±–ª–∏—Ü–∞ excel_properties")
    
    imported_count = 0
    
    for index, row in df.iterrows():
        try:
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
            property_data = {}
            
            # –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Å–µ–º –∫–æ–ª–æ–Ω–∫–∞–º Excel –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Ö
            for column in df.columns:
                value = row[column]
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö
                if pd.isna(value):
                    property_data[column] = None
                elif column == 'photos' and isinstance(value, str):
                    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º JSON —Å—Ç—Ä–æ–∫–∏ —Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º–∏
                    try:
                        property_data[column] = json.loads(value) if value else []
                    except:
                        property_data[column] = [value] if value else []
                elif isinstance(value, (int, float)):
                    property_data[column] = value
                else:
                    property_data[column] = str(value)
            
            # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π inner_id –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
            if 'inner_id' not in property_data or not property_data['inner_id']:
                property_data['inner_id'] = f"prop_{imported_count + 1}_{index}"
            
            # –í—Å—Ç–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ç–∞–±–ª–∏—Ü—É excel_properties
            columns = ', '.join(property_data.keys())
            placeholders = ', '.join([':' + key for key in property_data.keys()])
            
            insert_query = f"""
                INSERT INTO excel_properties ({columns})
                VALUES ({placeholders})
            """
            
            db.session.execute(text(insert_query), property_data)
            imported_count += 1
            
            if imported_count % 50 == 0:
                print(f"   üì¶ –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ {imported_count} –∫–≤–∞—Ä—Ç–∏—Ä...")
                
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –∫–≤–∞—Ä—Ç–∏—Ä—ã {index}: {e}")
            continue
    
    print(f"üè† –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ –∫–≤–∞—Ä—Ç–∏—Ä: {imported_count}")

if __name__ == "__main__":
    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–æ–≤—ã–π —Ñ–∞–π–ª
    filename = "attached_assets/–°–æ—á–∏_1756384471034.xlsx"
    
    if os.path.exists(filename):
        success = import_new_excel_data(filename)
        if success:
            print("\nüéâ –ò–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω! –ù–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –±–∞–∑—É.")
        else:
            print("\n‚ùå –ò–º–ø–æ—Ä—Ç –Ω–µ —É–¥–∞–ª—Å—è. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –æ—à–∏–±–æ–∫.")
    else:
        print(f"‚ùå –§–∞–π–ª {filename} –Ω–µ –Ω–∞–π–¥–µ–Ω!")