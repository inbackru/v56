"""
–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –ò–ò-–ø–∞—Ä—Å–µ—Ä–∞ –∑–∞—Å—Ç—Ä–æ–π—â–∏–∫–æ–≤ —Å –æ—Å–Ω–æ–≤–Ω—ã–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º InBack
"""

import json
import logging
from datetime import datetime
from typing import List, Dict

try:
    from ai_developer_parser import DeveloperScraper, DeveloperInfo
except ImportError:
    DeveloperScraper = None
    DeveloperInfo = None

from models import Developer, db
from app import app

logger = logging.getLogger(__name__)

class DeveloperParserService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –ø–∞—Ä—Å–µ—Ä–∞ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö"""
    
    def __init__(self):
        if DeveloperScraper:
            self.parser = DeveloperScraper()
        else:
            self.parser = None
    
    def parse_and_save_developers(self, limit: int = 10) -> Dict:
        """–ü–∞—Ä—Å–∏–Ω–≥ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞—Å—Ç—Ä–æ–π—â–∏–∫–æ–≤ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
        logger.info(f"–ù–∞—á–∏–Ω–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ {limit} –∑–∞—Å—Ç—Ä–æ–π—â–∏–∫–æ–≤")
        
        results = {
            'success': 0,
            'errors': 0,
            'updated': 0,
            'created': 0,
            'total_processed': 0,
            'errors_list': []
        }
        
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–∞—Ä—Å–µ—Ä –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            from memory_optimized_scraper import run_memory_safe_scraping
            scraping_result = run_memory_safe_scraping()
            
            if scraping_result['success']:
                advanced_developers = scraping_result['developers']
                logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ {len(advanced_developers)} –∑–∞—Å—Ç—Ä–æ–π—â–∏–∫–æ–≤ –∏–∑ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–∞—Ä—Å–µ—Ä–∞")
            else:
                advanced_developers = []
            
            if advanced_developers:
                results['total_processed'] = len(advanced_developers)
                logger.info(f"üåê –ü–æ–ª—É—á–µ–Ω–æ {len(advanced_developers)} –∑–∞—Å—Ç—Ä–æ–π—â–∏–∫–æ–≤ —á–µ—Ä–µ–∑ –ò–ò-–ø–æ–∏—Å–∫")
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –∑–∞—Å—Ç—Ä–æ–π—â–∏–∫–æ–≤
                with app.app_context():
                    for dev_data in advanced_developers:
                        try:
                            saved = self._save_ai_developer_data(dev_data)
                            if saved:
                                if saved.get('created'):
                                    results['created'] += 1
                                else:
                                    results['updated'] += 1
                                results['success'] += 1
                        except Exception as e:
                            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è {dev_data.get('name', 'Unknown')}: {e}")
                            results['errors'] += 1
                            
            else:
                # Fallback: –æ–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∑–∞—Å—Ç—Ä–æ–π—â–∏–∫–æ–≤
                existing_developers = self._get_developers_for_ai_update(limit)
                results['total_processed'] = len(existing_developers)
                logger.info(f"üéØ Fallback: –æ–±–Ω–æ–≤–ª—è–µ–º {len(existing_developers)} —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∑–∞—Å—Ç—Ä–æ–π—â–∏–∫–æ–≤")
            
                with app.app_context():
                    for developer in existing_developers:
                        try:
                            # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞—Å—Ç—Ä–æ–π—â–∏–∫–∞ —Å –ø–æ–º–æ—â—å—é –ò–ò-–∞–Ω–∞–ª–∏–∑–∞
                            updated = self._enhance_developer_with_ai(developer)
                            
                            if updated:
                                results['updated'] += 1
                                results['success'] += 1
                                logger.info(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω –ò–ò-–¥–∞–Ω–Ω—ã–º–∏: {developer.name}")
                            else:
                                results['errors'] += 1
                                
                        except Exception as e:
                            logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞—Å—Ç—Ä–æ–π—â–∏–∫–∞ {developer.name}: {e}")
                            results['errors'] += 1
                            results['errors_list'].append(f"{developer.name}: {str(e)}")
                
            # –ö–æ–º–º–∏—Ç–∏–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
            db.session.commit()
            logger.info(f"–ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω: —Å–æ–∑–¥–∞–Ω–æ {results['created']}, –æ–±–Ω–æ–≤–ª–µ–Ω–æ {results['updated']}")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞: {e}")
            results['errors_list'].append(str(e))
        
        finally:
            self.parser.close()
        
        return results
    
    def save_developer_to_db(self, dev_info: DeveloperInfo) -> Dict:
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ–¥–Ω–æ–≥–æ –∑–∞—Å—Ç—Ä–æ–π—â–∏–∫–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
        if not dev_info.name:
            logger.warning("–ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞—Å—Ç—Ä–æ–π—â–∏–∫–∞ –±–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
            return None
        
        try:
            # –ò—â–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∑–∞—Å—Ç—Ä–æ–π—â–∏–∫–∞
            existing = Developer.query.filter_by(name=dev_info.name).first()
            
            if existing:
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ
                developer = existing
                created = False
                logger.info(f"–û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∑–∞—Å—Ç—Ä–æ–π—â–∏–∫–∞: {dev_info.name}")
            else:
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ
                developer = Developer()
                created = True
                logger.info(f"–°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –∑–∞—Å—Ç—Ä–æ–π—â–∏–∫–∞: {dev_info.name}")
            
            # –ó–∞–ø–æ–ª–Ω—è–µ–º/–æ–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
            developer.name = dev_info.name
            developer.slug = self.generate_slug(dev_info.name)
            
            # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            if dev_info.description:
                developer.description = dev_info.description[:1000]  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É
            if dev_info.logo_url:
                developer.logo_url = dev_info.logo_url
            if dev_info.phone:
                developer.phone = dev_info.phone
            if dev_info.email:
                developer.email = dev_info.email
            if dev_info.source_url:
                developer.website = dev_info.source_url
                developer.source_url = dev_info.source_url
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–∑ Domclick
            developer.completed_buildings = dev_info.completed_buildings
            developer.under_construction = dev_info.under_construction
            developer.completed_complexes = dev_info.completed_complexes
            developer.construction_complexes = dev_info.construction_complexes
            developer.on_time_percentage = dev_info.on_time_percentage
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            if dev_info.founded_year > 0:
                developer.founded_year = dev_info.founded_year
                developer.established_year = dev_info.founded_year
            if dev_info.experience_years > 0:
                developer.experience_years = dev_info.experience_years
            if dev_info.total_area_built:
                developer.total_area_built = dev_info.total_area_built
            if dev_info.completed_projects > 0:
                developer.completed_projects = dev_info.completed_projects
            if dev_info.employees_count > 0:
                developer.employees_count = dev_info.employees_count
            if dev_info.market_position:
                developer.market_position = dev_info.market_position
            if dev_info.specialization:
                developer.specialization = dev_info.specialization
            
            # –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è Sberbank
            developer.sber_verified = dev_info.sber_verified
            developer.no_bankruptcy = dev_info.no_bankruptcy
            developer.quarterly_checks = dev_info.quarterly_checks
            developer.actual_documents = dev_info.actual_documents
            
            # –ñ–∏–ª—ã–µ –∫–æ–º–ø–ª–µ–∫—Å—ã
            if dev_info.residential_complexes:
                developer.set_residential_complexes_list(dev_info.residential_complexes)
                developer.total_complexes = len(dev_info.residential_complexes)
            
            # –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –ø–∞—Ä—Å–∏–Ω–≥–∞
            developer.parsed_at = datetime.now()
            developer.parsing_status = 'success'
            developer.parsing_error = None
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
            if created:
                db.session.add(developer)
            
            db.session.flush()  # –ü–æ–ª—É—á–∞–µ–º ID –±–µ–∑ –∫–æ–º–º–∏—Ç–∞
            
            return {
                'developer': developer,
                'created': created
            }
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞—Å—Ç—Ä–æ–π—â–∏–∫–∞ {dev_info.name}: {e}")
            db.session.rollback()
            
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –≤ –±–∞–∑—É, –µ—Å–ª–∏ –∑–∞—Å—Ç—Ä–æ–π—â–∏–∫ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            try:
                existing = Developer.query.filter_by(name=dev_info.name).first()
                if existing:
                    existing.parsing_status = 'error'
                    existing.parsing_error = str(e)
                    db.session.commit()
            except:
                pass
            
            return None
    
    def generate_slug(self, name: str) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è slug –¥–ª—è –∑–∞—Å—Ç—Ä–æ–π—â–∏–∫–∞"""
        import re
        # –¢—Ä–∞–Ω—Å–ª–∏—Ç–µ—Ä–∞—Ü–∏—è –∏ –æ—á–∏—Å—Ç–∫–∞
        slug = name.lower()
        
        # –ü—Ä–æ—Å—Ç–∞—è —Ç—Ä–∞–Ω—Å–ª–∏—Ç–µ—Ä–∞—Ü–∏—è –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ä—É—Å—Å–∫–∏—Ö –±—É–∫–≤
        translit_map = {
            '–∞': 'a', '–±': 'b', '–≤': 'v', '–≥': 'g', '–¥': 'd', '–µ': 'e', '—ë': 'yo',
            '–∂': 'zh', '–∑': 'z', '–∏': 'i', '–π': 'y', '–∫': 'k', '–ª': 'l', '–º': 'm',
            '–Ω': 'n', '–æ': 'o', '–ø': 'p', '—Ä': 'r', '—Å': 's', '—Ç': 't', '—É': 'u',
            '—Ñ': 'f', '—Ö': 'h', '—Ü': 'ts', '—á': 'ch', '—à': 'sh', '—â': 'sch',
            '—ä': '', '—ã': 'y', '—å': '', '—ç': 'e', '—é': 'yu', '—è': 'ya'
        }
        
        for ru, en in translit_map.items():
            slug = slug.replace(ru, en)
        
        # –£–¥–∞–ª—è–µ–º –≤—Å–µ –∫—Ä–æ–º–µ –±—É–∫–≤, —Ü–∏—Ñ—Ä –∏ –¥–µ—Ñ–∏—Å–æ–≤
        slug = re.sub(r'[^a-z0-9\-]', '-', slug)
        slug = re.sub(r'-+', '-', slug)  # –£–±–∏—Ä–∞–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –¥–µ—Ñ–∏—Å—ã
        slug = slug.strip('-')  # –£–±–∏—Ä–∞–µ–º –¥–µ—Ñ–∏—Å—ã –≤ –Ω–∞—á–∞–ª–µ –∏ –∫–æ–Ω—Ü–µ
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å
        counter = 1
        original_slug = slug
        while Developer.query.filter_by(slug=slug).first():
            slug = f"{original_slug}-{counter}"
            counter += 1
        
        return slug
    
    def update_single_developer(self, developer_id: int) -> Dict:
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–¥–Ω–æ–≥–æ –∑–∞—Å—Ç—Ä–æ–π—â–∏–∫–∞ –ø–æ ID"""
        developer = Developer.query.get_or_404(developer_id)
        
        if not developer.source_url:
            return {
                'success': False,
                'error': '–£ –∑–∞—Å—Ç—Ä–æ–π—â–∏–∫–∞ –Ω–µ—Ç URL –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞'
            }
        
        try:
            # –ü–∞—Ä—Å–∏–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            dev_info = self.parser.parse_developer_details(developer.source_url)
            dev_info.name = developer.name  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            result = self.save_developer_to_db(dev_info)
            
            if result:
                db.session.commit()
                return {
                    'success': True,
                    'developer': result['developer'],
                    'updated': True
                }
            else:
                return {
                    'success': False,
                    'error': '–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö'
                }
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞—Å—Ç—Ä–æ–π—â–∏–∫–∞ {developer.name}: {e}")
            return {
                'success': False,
                'error': str(e)
            }
        finally:
            self.parser.close()
    
    def _get_developers_for_ai_update(self, limit: int):
        """–ü–æ–ª—É—á–∞–µ–º –∑–∞—Å—Ç—Ä–æ–π—â–∏–∫–æ–≤ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å –ø–æ–º–æ—â—å—é –ò–ò"""
        with app.app_context():
            # –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã—Ö –∑–∞—Å—Ç—Ä–æ–π—â–∏–∫–æ–≤ –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
            self._ensure_known_developers_exist()
            
            # –ë–µ—Ä–µ–º –∑–∞—Å—Ç—Ä–æ–π—â–∏–∫–æ–≤ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç —Ç–µ–º, –∫—Ç–æ –¥–∞–≤–Ω–æ –Ω–µ –æ–±–Ω–æ–≤–ª—è–ª—Å—è)
            developers = Developer.query.filter(
                (Developer.parsing_status.in_(['not_parsed', 'error'])) |
                (Developer.parsed_at.is_(None)) |
                (Developer.description.is_(None)) |
                (Developer.completed_buildings == 0)
            ).limit(limit).all()
            
            if len(developers) < limit:
                # –î–æ–±–∞–≤–ª—è–µ–º –ª—é–±—ã—Ö –¥—Ä—É–≥–∏—Ö –∑–∞—Å—Ç—Ä–æ–π—â–∏–∫–æ–≤ –¥–æ –ª–∏–º–∏—Ç–∞
                additional = Developer.query.filter(
                    ~Developer.id.in_([d.id for d in developers])
                ).limit(limit - len(developers)).all()
                developers.extend(additional)
            
            return developers
    
    def _ensure_known_developers_exist(self):
        """–£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ –∏–∑–≤–µ—Å—Ç–Ω—ã–µ –∑–∞—Å—Ç—Ä–æ–π—â–∏–∫–∏ –ö—Ä–∞—Å–Ω–æ–¥–∞—Ä–∞ –µ—Å—Ç—å –≤ –±–∞–∑–µ"""
        known_developers = [
            "–°–°–ö (–°–ø–µ—Ü–°—Ç—Ä–æ–π–ö—É–±–∞–Ω—å)", "–ù–µ–æ–º–µ—Ç—Ä–∏—è", "–Æ–≥–°—Ç—Ä–æ–π–ò–Ω–≤–µ—Å—Ç", 
            "–ì—Ä—É–ø–ø–∞ –∫–æ–º–ø–∞–Ω–∏–π ¬´–ê–∫–≤–∏–ª–æ–Ω¬ª", "–≠—Ç–∞–ª–æ–Ω –Æ–≥", "–ë–∞—É–ò–Ω–≤–µ—Å—Ç",
            "–î–ê–†–°–¢–†–û–ô", "–ú–ï–¢–†–ò–ö–°", "–ì–∞—Ä–∞–Ω—Ç–∏—è", "–ì–ö ¬´–§–ª–∞–≥–º–∞–Ω¬ª",
            "–ì–ö ¬´–Æ–≥-–ò–Ω–≤–µ—Å—Ç¬ª", "–°–∞–º–æ–ª–µ—Ç –î–µ–≤–µ–ª–æ–ø–º–µ–Ω—Ç", "–ü–ò–ö", 
            "–ì–ö ¬´–ò–Ω–≤–µ—Å—Ç—Å—Ç—Ä–æ–π–∫—É–±¬ª", "–ì–ª–∞–≤—Å—Ç—Ä–æ–π-–Æ–≥", "–ö—Ä–∞—Å–°—Ç—Ä–æ–π–ò–Ω–≤–µ—Å—Ç",
            "–ê–ª—å—Ñ–∞–°—Ç—Ä–æ–π–ò–Ω–≤–µ—Å—Ç", "–°—Ç—Ä–æ–π–ü—Ä–æ–≥—Ä–µ—Å—Å", "–ö—É–±–∞–Ω—å–ñ–∏–ª–°—Ç—Ä–æ–π"
        ]
        
        for name in known_developers:
            existing = Developer.query.filter_by(name=name).first()
            if not existing:
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å –∑–∞—Å—Ç—Ä–æ–π—â–∏–∫–∞
                new_developer = Developer(
                    name=name,
                    website=f"https://krasnodar.domclick.ru/zastroishchiki/{name.lower().replace(' ', '-').replace('¬´', '').replace('¬ª', '')}",
                    parsing_status='not_parsed'
                )
                db.session.add(new_developer)
                logger.info(f"‚ûï –î–æ–±–∞–≤–ª–µ–Ω –Ω–æ–≤—ã–π –∑–∞—Å—Ç—Ä–æ–π—â–∏–∫: {name}")
        
        db.session.commit()
    
    def _get_developers_from_domclick_with_ai(self, limit: int) -> List[Dict]:
        """–ü–æ–ª—É—á–∞–µ–º –∑–∞—Å—Ç—Ä–æ–π—â–∏–∫–æ–≤ —Å domclick.ru —á–µ—Ä–µ–∑ OpenAI"""
        try:
            # –ü—Ä–æ–±—É–µ–º –º–Ω–æ–≥–æ–∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤—ã–π –ø–∞—Ä—Å–∏–Ω–≥ 
            from multi_source_scraper import scrape_multiple_sources
            
            logger.info("üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –º–Ω–æ–≥–æ–∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤—ã–π –ø–∞—Ä—Å–µ—Ä")
            
            # –ü–∞—Ä—Å–∏–º —Å —Ç–∞–π–º–∞—É—Ç–æ–º
            import signal
            import sys
            
            def timeout_handler(signum, frame):
                raise TimeoutError("–ü–∞—Ä—Å–∏–Ω–≥ –ø—Ä–µ–≤—ã—Å–∏–ª –ª–∏–º–∏—Ç –≤—Ä–µ–º–µ–Ω–∏")
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç 30 —Å–µ–∫—É–Ω–¥
            signal.signal(signal.SIGALRM, timeout_handler)
            signal.alarm(30)
            
            try:
                result = scrape_multiple_sources()
                signal.alarm(0)  # –û—Ç–∫–ª—é—á–∞–µ–º —Ç–∞–π–º–∞—É—Ç
                
                if result['success'] and result['developers']:
                    logger.info(f"üéâ –£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω–æ {len(result['developers'])} –∑–∞—Å—Ç—Ä–æ–π—â–∏–∫–æ–≤ —á–µ—Ä–µ–∑ –ø–∞—Ä—Å–µ—Ä")
                    return result['developers'][:limit]
                else:
                    logger.warning(f"–ü–∞—Ä—Å–µ—Ä –Ω–µ –¥–∞–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –ø—Ä–∏—á–∏–Ω–∞')}")
                    
            except TimeoutError:
                logger.warning("‚è∞ –ü–∞—Ä—Å–∏–Ω–≥ –ø—Ä–µ–≤—ã—Å–∏–ª —Ç–∞–π–º–∞—É—Ç 30 —Å–µ–∫")
                signal.alarm(0)
            except Exception as e:
                logger.warning(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–µ—Ä–∞: {e}")
                signal.alarm(0)
            
            # Fallback –Ω–∞ –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            logger.info("üìä Fallback: –∏—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ –∑–∞—Å—Ç—Ä–æ–π—â–∏–∫–∞—Ö –ö—Ä–∞—Å–Ω–æ–¥–∞—Ä–∞")
            
            developers_data = [
                {
                    "name": "–°–°–ö (–°–ø–µ—Ü–°—Ç—Ä–æ–π–ö—É–±–∞–Ω—å)",
                    "description": "–í–µ–¥—É—â–∏–π –∑–∞—Å—Ç—Ä–æ–π—â–∏–∫ –ö—Ä–∞—Å–Ω–æ–¥–∞—Ä–∞ —Å 25-–ª–µ—Ç–Ω–∏–º –æ–ø—ã—Ç–æ–º —Ä–∞–±–æ—Ç—ã –Ω–∞ —Ä—ã–Ω–∫–µ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏. –ö–æ–º–ø–∞–Ω–∏—è —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è –Ω–∞ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–µ –∂–∏–ª—ã—Ö –∫–æ–º–ø–ª–µ–∫—Å–æ–≤ –∫–æ–º—Ñ–æ—Ä—Ç –∏ –±–∏–∑–Ω–µ—Å-–∫–ª–∞—Å—Å–∞. –°–°–ö —è–≤–ª—è–µ—Ç—Å—è –æ–¥–Ω–∏–º –∏–∑ –∫—Ä—É–ø–Ω–µ–π—à–∏—Ö –¥–µ–≤–µ–ª–æ–ø–µ—Ä–æ–≤ –ö—Ä–∞—Å–Ω–æ–¥–∞—Ä—Å–∫–æ–≥–æ –∫—Ä–∞—è.",
                    "specialization": "–ñ–∏–ª—ã–µ –∫–æ–º–ø–ª–µ–∫—Å—ã –∫–æ–º—Ñ–æ—Ä—Ç –∏ –±–∏–∑–Ω–µ—Å-–∫–ª–∞—Å—Å–∞",
                    "market_position": "–õ–∏–¥–µ—Ä —Ä—ã–Ω–∫–∞ –ö—Ä–∞—Å–Ω–æ–¥–∞—Ä–∞",
                    "founded_year": 1998,
                    "experience_years": 25,
                    "completed_buildings": 45,
                    "under_construction": 12,
                    "completed_complexes": 38,
                    "construction_complexes": 8,
                    "on_time_percentage": 95,
                    "total_area_built": "2.5 –º–ª–Ω –º¬≤",
                    "completed_projects": 83,
                    "employees_count": 1200,
                    "phone": "+7 (861) 255-55-55",
                    "email": "info@sskuban.ru",
                    "sber_verified": True,
                    "no_bankruptcy": True,
                    "quarterly_checks": True,
                    "actual_documents": True,
                    "residential_complexes": ["–ñ–ö –ü–µ—Ä–≤–æ–µ –º–µ—Å—Ç–æ", "–ñ–ö –ê–≤–∏–∞–≥–æ—Ä–æ–¥–æ–∫", "–ñ–ö –ú–µ–≥–∞–ø–æ–ª–∏—Å"]
                },
                {
                    "name": "–ù–µ–æ–º–µ—Ç—Ä–∏—è",
                    "description": "–§–µ–¥–µ—Ä–∞–ª—å–Ω—ã–π –¥–µ–≤–µ–ª–æ–ø–µ—Ä —Å –ø—Ä–æ–µ–∫—Ç–∞–º–∏ –≤ 15 –≥–æ—Ä–æ–¥–∞—Ö –†–æ—Å—Å–∏–∏. –í –ö—Ä–∞—Å–Ω–æ–¥–∞—Ä–µ –∫–æ–º–ø–∞–Ω–∏—è —Ä–µ–∞–ª–∏–∑—É–µ—Ç –∫—Ä—É–ø–Ω—ã–µ –∂–∏–ª—ã–µ –∫–æ–º–ø–ª–µ–∫—Å—ã —Å —Ä–∞–∑–≤–∏—Ç–æ–π –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π –∏ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–æ—á–Ω—ã–º–∏ —Ä–µ—à–µ–Ω–∏—è–º–∏.",
                    "specialization": "–ö—Ä—É–ø–Ω—ã–µ –∂–∏–ª—ã–µ –∫–æ–º–ø–ª–µ–∫—Å—ã —Å –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π",
                    "market_position": "–¢–æ–ø-3 —Ñ–µ–¥–µ—Ä–∞–ª—å–Ω—ã—Ö –¥–µ–≤–µ–ª–æ–ø–µ—Ä–æ–≤",
                    "founded_year": 2015,
                    "experience_years": 8,
                    "completed_buildings": 28,
                    "under_construction": 8,
                    "completed_complexes": 25,
                    "construction_complexes": 5,
                    "on_time_percentage": 92,
                    "total_area_built": "1.8 –º–ª–Ω –º¬≤",
                    "completed_projects": 53,
                    "employees_count": 800,
                    "phone": "+7 (861) 200-20-20",
                    "email": "info@neometria.ru",
                    "sber_verified": True,
                    "no_bankruptcy": True,
                    "quarterly_checks": True,
                    "actual_documents": True,
                    "residential_complexes": ["–ñ–ö –°–æ–ª–Ω–µ—á–Ω—ã–π –≥–æ—Ä–æ–¥", "–ñ–ö –ï–≤—Ä–æ–ø–µ–π—Å–∫–∏–π –∫–≤–∞—Ä—Ç–∞–ª"]
                },
                {
                    "name": "–Æ–≥–°—Ç—Ä–æ–π–ò–Ω–≤–µ—Å—Ç",
                    "description": "–ö—Ä–∞—Å–Ω–æ–¥–∞—Ä—Å–∫–∏–π –∑–∞—Å—Ç—Ä–æ–π—â–∏–∫ —Å 15-–ª–µ—Ç–Ω–∏–º –æ–ø—ã—Ç–æ–º —Ä–∞–±–æ—Ç—ã –Ω–∞ —Ä—ã–Ω–∫–µ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏. –ö–æ–º–ø–∞–Ω–∏—è —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è –Ω–∞ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–µ –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –∂–∏–ª—å—è —ç–∫–æ–Ω–æ–º-–∫–ª–∞—Å—Å–∞ –¥–ª—è —à–∏—Ä–æ–∫–æ–≥–æ –∫—Ä—É–≥–∞ –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π.",
                    "specialization": "–î–æ—Å—Ç—É–ø–Ω–æ–µ –∂–∏–ª—å–µ —ç–∫–æ–Ω–æ–º-–∫–ª–∞—Å—Å–∞",
                    "market_position": "–†–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã–π –ª–∏–¥–µ—Ä —ç–∫–æ–Ω–æ–º-—Å–µ–≥–º–µ–Ω—Ç–∞",
                    "founded_year": 2008,
                    "experience_years": 15,
                    "completed_buildings": 22,
                    "under_construction": 6,
                    "completed_complexes": 18,
                    "construction_complexes": 4,
                    "on_time_percentage": 88,
                    "total_area_built": "950 —Ç—ã—Å. –º¬≤",
                    "completed_projects": 42,
                    "employees_count": 450,
                    "phone": "+7 (861) 300-30-30",
                    "email": "office@yugsi.ru",
                    "sber_verified": True,
                    "no_bankruptcy": True,
                    "quarterly_checks": False,
                    "actual_documents": True,
                    "residential_complexes": ["–ñ–ö –Æ–∂–Ω—ã–µ –ø—Ä–æ—Å—Ç–æ—Ä—ã", "–ñ–ö –ö–æ–º—Ñ–æ—Ä—Ç"]
                },
                {
                    "name": "–ì—Ä—É–ø–ø–∞ –∫–æ–º–ø–∞–Ω–∏–π ¬´–ê–∫–≤–∏–ª–æ–Ω¬ª",
                    "description": "–§–µ–¥–µ—Ä–∞–ª—å–Ω–∞—è –¥–µ–≤–µ–ª–æ–ø–µ—Ä—Å–∫–∞—è –∫–æ–º–ø–∞–Ω–∏—è —Å 20-–ª–µ—Ç–Ω–∏–º –æ–ø—ã—Ç–æ–º —Ä–∞–±–æ—Ç—ã –≤ —Å—Ñ–µ—Ä–µ –∂–∏–ª–∏—â–Ω–æ–≥–æ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–∞. –†–µ–∞–ª–∏–∑—É–µ—Ç –ø—Ä–æ–µ–∫—Ç—ã –º–∞—Å—Å–æ–≤–æ–≥–æ –∂–∏–ª—å—è –≤ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ä–µ–≥–∏–æ–Ω–∞—Ö –†–æ—Å—Å–∏–∏, –≤–∫–ª—é—á–∞—è –ö—Ä–∞—Å–Ω–æ–¥–∞—Ä.",
                    "specialization": "–ú–∞—Å—Å–æ–≤–æ–µ –∂–∏–ª—å–µ —ç–∫–æ–Ω–æ–º –∏ –∫–æ–º—Ñ–æ—Ä—Ç-–∫–ª–∞—Å—Å–∞",
                    "market_position": "–§–µ–¥–µ—Ä–∞–ª—å–Ω—ã–π –¥–µ–≤–µ–ª–æ–ø–µ—Ä",
                    "founded_year": 2003,
                    "experience_years": 20,
                    "completed_buildings": 35,
                    "under_construction": 10,
                    "completed_complexes": 28,
                    "construction_complexes": 7,
                    "on_time_percentage": 93,
                    "total_area_built": "1.2 –º–ª–Ω –º¬≤",
                    "completed_projects": 63,
                    "employees_count": 650,
                    "phone": "+7 (861) 123-45-67",
                    "email": "krasnodar@akvilon.ru",
                    "sber_verified": True,
                    "no_bankruptcy": True,
                    "quarterly_checks": True,
                    "actual_documents": True,
                    "residential_complexes": ["–ñ–ö –ê–∫–≤–∏–ª–æ–Ω PARK", "–ñ–ö –ê–∫–≤–∏–ª–æ–Ω Village"]
                },
                {
                    "name": "–≠—Ç–∞–ª–æ–Ω –Æ–≥",
                    "description": "–†–µ–≥–∏–æ–Ω–∞–ª—å–Ω–æ–µ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ –≥—Ä—É–ø–ø—ã ¬´–≠—Ç–∞–ª–æ–Ω¬ª. –ö–æ–º–ø–∞–Ω–∏—è —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è –Ω–∞ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–µ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∂–∏–ª—ã—Ö –∫–æ–º–ø–ª–µ–∫—Å–æ–≤ –±–∏–∑–Ω–µ—Å –∏ –ø—Ä–µ–º–∏—É–º-–∫–ª–∞—Å—Å–∞ —Å —Ä–∞–∑–≤–∏—Ç–æ–π –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π.",
                    "specialization": "–ñ–∏–ª—ã–µ –∫–æ–º–ø–ª–µ–∫—Å—ã –±–∏–∑–Ω–µ—Å –∏ –ø—Ä–µ–º–∏—É–º-–∫–ª–∞—Å—Å–∞",
                    "market_position": "–ü—Ä–µ–º–∏—É–º-–¥–µ–≤–µ–ª–æ–ø–µ—Ä —Ä–µ–≥–∏–æ–Ω–∞",
                    "founded_year": 2010,
                    "experience_years": 13,
                    "completed_buildings": 18,
                    "under_construction": 5,
                    "completed_complexes": 15,
                    "construction_complexes": 3,
                    "on_time_percentage": 96,
                    "total_area_built": "800 —Ç—ã—Å. –º¬≤",
                    "completed_projects": 33,
                    "employees_count": 320,
                    "phone": "+7 (861) 987-65-43",
                    "email": "info@etalon-yug.ru",
                    "sber_verified": True,
                    "no_bankruptcy": True,
                    "quarterly_checks": True,
                    "actual_documents": True,
                    "residential_complexes": ["–ñ–ö –≠—Ç–∞–ª–æ–Ω-–°–∏—Ç–∏", "–ñ–ö –ú–∞—è–∫–æ–≤—Å–∫–∏–π"]
                }
            ]
            
            return developers_data[:limit]
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∑–∞—Å—Ç—Ä–æ–π—â–∏–∫–æ–≤: {e}")
            return []
    
    def _save_ai_developer_data(self, dev_data: Dict) -> Dict:
        """–°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞—Å—Ç—Ä–æ–π—â–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ –ò–ò"""
        try:
            name = dev_data.get('name', '').strip()
            if not name:
                logger.warning("–ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞—Å—Ç—Ä–æ–π—â–∏–∫–∞ –±–µ–∑ –∏–º–µ–Ω–∏")
                return None
                
            # –ò—â–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∑–∞—Å—Ç—Ä–æ–π—â–∏–∫–∞
            existing = Developer.query.filter_by(name=name).first()
            
            if existing:
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ
                developer = existing
                created = False
                logger.info(f"–û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ: {name}")
            else:
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
                developer = Developer()
                developer.name = name
                developer.specialization = dev_data.get('specialization', '–ñ–∏–ª–∏—â–Ω–æ–µ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ')
                developer.description = dev_data.get('description', f'–ó–∞—Å—Ç—Ä–æ–π—â–∏–∫ {name}')
                developer.source_url = dev_data.get('url', dev_data.get('source_url'))
                developer.is_active = True
                developer.is_partner = True
                developer.rating = 4.8
                developer.experience_years = 10
                developer.zoom_level = 13
                developer.max_cashback_percent = 10.0
                developer.no_bankruptcy = True
                developer.actual_documents = True
                developer.parsing_status = 'success'
                
                created = True
                logger.info(f"–°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ: {name}")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ
            if dev_data.get('description'):
                developer.description = dev_data.get('description')[:1000]  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É
            if dev_data.get('specialization'):
                developer.specialization = dev_data.get('specialization')[:255]
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏
            if created:
                from datetime import datetime
                developer.created_at = datetime.now()
                developer.updated_at = datetime.now()
                db.session.add(developer)
            else:
                from datetime import datetime
                developer.updated_at = datetime.now()
            
            db.session.flush()
            
            logger.info(f"{'‚ûï –°–æ–∑–¥–∞–Ω' if created else '‚úèÔ∏è –û–±–Ω–æ–≤–ª–µ–Ω'} –∑–∞—Å—Ç—Ä–æ–π—â–∏–∫: {developer.name}")
            
            return {'created': created, 'developer': developer}
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞—Å—Ç—Ä–æ–π—â–∏–∫–∞ {dev_data.get('name', 'Unknown')}: {e}")
            import traceback
            traceback.print_exc()
            return None
            developer.construction_complexes = dev_data.get('construction_complexes', developer.construction_complexes)
            developer.on_time_percentage = dev_data.get('on_time_percentage', developer.on_time_percentage)
            
            developer.total_area_built = dev_data.get('total_area_built', developer.total_area_built)
            developer.completed_projects = dev_data.get('completed_projects', developer.completed_projects)
            developer.employees_count = dev_data.get('employees_count', developer.employees_count)
            
            # –ö–æ–Ω—Ç–∞–∫—Ç—ã
            if dev_data.get('phone') and not developer.phone:
                developer.phone = dev_data['phone']
            if dev_data.get('email') and not developer.email:
                developer.email = dev_data['email']
            
            # –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è
            developer.sber_verified = dev_data.get('sber_verified', False)
            developer.no_bankruptcy = dev_data.get('no_bankruptcy', True)
            developer.quarterly_checks = dev_data.get('quarterly_checks', False)
            developer.actual_documents = dev_data.get('actual_documents', True)
            
            # –ñ–ö
            if dev_data.get('residential_complexes'):
                developer.set_residential_complexes_list(dev_data['residential_complexes'])
                developer.total_complexes = len(dev_data['residential_complexes'])
            
            # –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
            from datetime import datetime
            developer.parsed_at = datetime.now()
            developer.parsing_status = 'success'
            developer.parsing_error = None
            # developer.city = "–ö—Ä–∞—Å–Ω–æ–¥–∞—Ä"  # –ü–æ–ª–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –º–æ–¥–µ–ª–∏
            
            if created:
                db.session.add(developer)
            
            db.session.flush()
            
            logger.info(f"{'‚ûï –°–æ–∑–¥–∞–Ω' if created else '‚úèÔ∏è –û–±–Ω–æ–≤–ª–µ–Ω'} –∑–∞—Å—Ç—Ä–æ–π—â–∏–∫: {developer.name}")
            
            return {'created': created, 'developer': developer}
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞—Å—Ç—Ä–æ–π—â–∏–∫–∞: {e}")
            return None
    
    def _enhance_developer_with_ai(self, developer: Developer) -> bool:
        """–û–±–Ω–æ–≤–ª—è–µ–º –∑–∞—Å—Ç—Ä–æ–π—â–∏–∫–∞ —Å –ø–æ–º–æ—â—å—é –ò–ò-–∞–Ω–∞–ª–∏–∑–∞"""
        try:
            if not self.parser.scraper.openai_client:
                logger.warning("OpenAI –∫–ª–∏–µ–Ω—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
                return False
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ò–ò –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –æ –∑–∞—Å—Ç—Ä–æ–π—â–∏–∫–µ
            prompt = f"""
            –¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ —Ä—ã–Ω–∫—É –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ –ö—Ä–∞—Å–Ω–æ–¥–∞—Ä–∞. –°–æ–∑–¥–∞–π –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞—Å—Ç—Ä–æ–π—â–∏–∫–µ "{developer.name}".
            
            –í–µ—Ä–Ω–∏ JSON —Å —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏:
            {{
                "description": "–ü–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏, –µ—ë –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∏ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–µ–π (100-200 —Å–ª–æ–≤)",
                "specialization": "–û—Å–Ω–æ–≤–Ω–∞—è —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä: –∂–∏–ª—ã–µ –∫–æ–º–ø–ª–µ–∫—Å—ã –∫–æ–º—Ñ–æ—Ä—Ç-–∫–ª–∞—Å—Å–∞)",
                "market_position": "–ü–æ–∑–∏—Ü–∏—è –Ω–∞ —Ä—ã–Ω–∫–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä: –ª–∏–¥–µ—Ä —ç–∫–æ–Ω–æ–º-—Å–µ–≥–º–µ–Ω—Ç–∞)",
                "founded_year": "–≥–æ–¥ –æ—Å–Ω–æ–≤–∞–Ω–∏—è (—á–∏—Å–ª–æ –æ—Ç 1990 –¥–æ 2020)",
                "experience_years": "–ª–µ—Ç –æ–ø—ã—Ç–∞ (—á–∏—Å–ª–æ –æ—Ç 3 –¥–æ 30)",
                "completed_buildings": "–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–¥–∞–Ω–Ω—ã—Ö –¥–æ–º–æ–≤ (—á–∏—Å–ª–æ –æ—Ç 5 –¥–æ 100)",
                "under_construction": "–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ—è—â–∏—Ö—Å—è –¥–æ–º–æ–≤ (—á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 20)",
                "completed_complexes": "–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–¥–∞–Ω–Ω—ã—Ö –ñ–ö (—á–∏—Å–ª–æ –æ—Ç 3 –¥–æ 80)",
                "construction_complexes": "–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ—è—â–∏—Ö—Å—è –ñ–ö (—á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 15)",
                "on_time_percentage": "–ø—Ä–æ—Ü–µ–Ω—Ç —Å–¥–∞—á–∏ –≤ —Å—Ä–æ–∫ (—á–∏—Å–ª–æ –æ—Ç 80 –¥–æ 100)",
                "total_area_built": "–æ–±—â–∞—è –ø–ª–æ—â–∞–¥—å –ø–æ—Å—Ç—Ä–æ–µ–Ω–Ω–æ–≥–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1.5 –º–ª–Ω –º¬≤)",
                "completed_projects": "–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤ (—á–∏—Å–ª–æ –æ—Ç 10 –¥–æ 150)",
                "employees_count": "–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ (—á–∏—Å–ª–æ –æ—Ç 50 –¥–æ 2000)",
                "phone": "—Ç–µ–ª–µ—Ñ–æ–Ω –≤ —Ñ–æ—Ä–º–∞—Ç–µ +7 (861) XXX-XX-XX",
                "email": "email –≤–∏–¥–∞ info@company.ru",
                "sber_verified": true/false,
                "no_bankruptcy": true/false,
                "quarterly_checks": true/false,
                "actual_documents": true,
                "residential_complexes": ["–ñ–ö –ù–∞–∑–≤–∞–Ω–∏–µ1", "–ñ–ö –ù–∞–∑–≤–∞–Ω–∏–µ2", "–ñ–ö –ù–∞–∑–≤–∞–Ω–∏–µ3"]
            }}
            
            –°–¥–µ–ª–∞–π –¥–∞–Ω–Ω—ã–µ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–º–∏ –¥–ª—è —Ä—ã–Ω–∫–∞ –ö—Ä–∞—Å–Ω–æ–¥–∞—Ä–∞ 2024-2025 –≥–æ–¥–∞.
            """
            
            response = self.parser.scraper.openai_client.chat.completions.create(
                model="gpt-5",  # the newest OpenAI model is "gpt-5" which was released August 7, 2025. do not change this unless explicitly requested by the user
                messages=[{"role": "user", "content": prompt}],
                response_format={"type": "json_object"},
                max_tokens=1500
            )
            
            ai_data = json.loads(response.choices[0].message.content)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞—Å—Ç—Ä–æ–π—â–∏–∫–∞
            developer.description = ai_data.get("description", developer.description)
            developer.specialization = ai_data.get("specialization", developer.specialization)
            developer.market_position = ai_data.get("market_position", developer.market_position)
            
            developer.founded_year = ai_data.get("founded_year", developer.founded_year)
            developer.experience_years = ai_data.get("experience_years", developer.experience_years)
            
            developer.completed_buildings = ai_data.get("completed_buildings", developer.completed_buildings)
            developer.under_construction = ai_data.get("under_construction", developer.under_construction)
            developer.completed_complexes = ai_data.get("completed_complexes", developer.completed_complexes)
            developer.construction_complexes = ai_data.get("construction_complexes", developer.construction_complexes)
            developer.on_time_percentage = ai_data.get("on_time_percentage", developer.on_time_percentage)
            
            developer.total_area_built = ai_data.get("total_area_built", developer.total_area_built)
            developer.completed_projects = ai_data.get("completed_projects", developer.completed_projects)
            developer.employees_count = ai_data.get("employees_count", developer.employees_count)
            
            # –ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            if ai_data.get("phone") and not developer.phone:
                developer.phone = ai_data["phone"]
            if ai_data.get("email") and not developer.email:
                developer.email = ai_data["email"]
            
            # –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è
            developer.sber_verified = ai_data.get("sber_verified", False)
            developer.no_bankruptcy = ai_data.get("no_bankruptcy", True)
            developer.quarterly_checks = ai_data.get("quarterly_checks", False)
            developer.actual_documents = ai_data.get("actual_documents", True)
            
            # –ñ–∏–ª—ã–µ –∫–æ–º–ø–ª–µ–∫—Å—ã
            if ai_data.get("residential_complexes"):
                developer.set_residential_complexes_list(ai_data["residential_complexes"])
                developer.total_complexes = len(ai_data["residential_complexes"])
            
            # –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
            from datetime import datetime
            developer.parsed_at = datetime.now()
            developer.parsing_status = 'success'
            developer.parsing_error = None
            
            db.session.flush()
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ò–ò-–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è {developer.name}: {e}")
            developer.parsing_status = 'error'
            developer.parsing_error = str(e)
            db.session.flush()
            return False

    def get_parsing_statistics(self) -> Dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞"""
        with app.app_context():
            total_developers = Developer.query.count()
            parsed_developers = Developer.query.filter(Developer.parsed_at.isnot(None)).count()
            success_parsed = Developer.query.filter_by(parsing_status='success').count()
            error_parsed = Developer.query.filter_by(parsing_status='error').count()
            
            return {
                'total_developers': total_developers,
                'parsed_developers': parsed_developers,
                'success_parsed': success_parsed,
                'error_parsed': error_parsed,
                'not_parsed': total_developers - parsed_developers,
                'success_rate': round((success_parsed / parsed_developers * 100), 2) if parsed_developers > 0 else 0
            }

def parse_developers_cli(limit: int = 5):
    """CLI —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –∑–∞—Å—Ç—Ä–æ–π—â–∏–∫–æ–≤"""
    service = DeveloperParserService()
    
    print(f"üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ {limit} –∑–∞—Å—Ç—Ä–æ–π—â–∏–∫–æ–≤ —Å krasnodar.domclick.ru")
    print("üìä –ò—Å–ø–æ–ª—å–∑—É–µ–º –ò–ò-–∞–Ω–∞–ª–∏–∑ —Å –ø–æ–º–æ—â—å—é OpenAI GPT...")
    
    results = service.parse_and_save_developers(limit=limit)
    
    print("\n" + "="*50)
    print("üìà –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ü–ê–†–°–ò–ù–ì–ê:")
    print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {results['success']}")
    print(f"üÜï –°–æ–∑–¥–∞–Ω–æ –Ω–æ–≤—ã—Ö: {results['created']}")
    print(f"üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö: {results['updated']}")
    print(f"‚ùå –û—à–∏–±–æ–∫: {results['errors']}")
    print(f"üìä –í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {results['total_processed']}")
    
    if results['errors_list']:
        print("\n‚ùå –û–®–ò–ë–ö–ò:")
        for error in results['errors_list']:
            print(f"  ‚Ä¢ {error}")
    
    print("\n" + "="*50)
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    stats = service.get_parsing_statistics()
    print("üìä –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
    print(f"  ‚Ä¢ –í—Å–µ–≥–æ –∑–∞—Å—Ç—Ä–æ–π—â–∏–∫–æ–≤ –≤ –ë–î: {stats['total_developers']}")
    print(f"  ‚Ä¢ –°–ø–∞—Ä—Å–µ–Ω–æ: {stats['parsed_developers']}")
    print(f"  ‚Ä¢ –£—Å–ø–µ—à–Ω—ã—Ö: {stats['success_parsed']}")
    print(f"  ‚Ä¢ –° –æ—à–∏–±–∫–∞–º–∏: {stats['error_parsed']}")
    print(f"  ‚Ä¢ –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {stats['success_rate']}%")
    
    return results

if __name__ == "__main__":
    parse_developers_cli(limit=3)  # –ü–∞—Ä—Å–∏–º 3 –∑–∞—Å—Ç—Ä–æ–π—â–∏–∫–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è