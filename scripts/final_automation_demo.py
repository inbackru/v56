#!/usr/bin/env python3
"""
–§–ò–ù–ê–õ–¨–ù–ê–Ø –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –ê–í–¢–û–ú–ê–¢–ò–ó–ê–¶–ò–ò EXCEL
–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–ª–Ω—ã–π —Ü–∏–∫–ª —Ä–∞–±–æ—Ç—ã —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
"""

import os
import pandas as pd
from sqlalchemy import text
from app import db, app

def final_automation_demo():
    """–§–∏–Ω–∞–ª—å–Ω–∞—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏"""
    
    print("üéØ –§–ò–ù–ê–õ–¨–ù–ê–Ø –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –ê–í–¢–û–ú–ê–¢–ò–ó–ê–¶–ò–ò EXCEL")
    print("=" * 60)
    
    with app.app_context():
        
        # 1. –¢–ï–ö–£–©–ï–ï –°–û–°–¢–û–Ø–ù–ò–ï –°–ò–°–¢–ï–ú–´
        print("\n1Ô∏è‚É£ –¢–ï–ö–£–©–ï–ï –°–û–°–¢–û–Ø–ù–ò–ï –°–ò–°–¢–ï–ú–´")
        print("-" * 40)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ 77 –∫–æ–ª–æ–Ω–æ–∫
        columns = db.session.execute(text("""
            SELECT COUNT(*) FROM information_schema.columns 
            WHERE table_name = 'excel_properties'
        """)).fetchone()[0]
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        stats = db.session.execute(text("""
            SELECT 
                COUNT(*) as total_properties,
                COUNT(DISTINCT complex_name) as unique_complexes,
                COUNT(DISTINCT developer_name) as unique_developers,
                COUNT(DISTINCT object_rooms) as room_types
            FROM excel_properties
        """)).fetchone()
        
        print(f"üìã –ö–æ–ª–æ–Ω–æ–∫ –≤ –ë–î: {columns}/77")
        print(f"üè† –í—Å–µ–≥–æ –∫–≤–∞—Ä—Ç–∏—Ä: {stats[0]}")
        print(f"üè¢ –ñ–∏–ª—ã—Ö –∫–æ–º–ø–ª–µ–∫—Å–æ–≤: {stats[1]}")
        print(f"üèóÔ∏è  –ó–∞—Å—Ç—Ä–æ–π—â–∏–∫–æ–≤: {stats[2]}")
        print(f"üè† –¢–∏–ø–æ–≤ –∫–æ–º–Ω–∞—Ç: {stats[3]}")
        
        # 2. –ü–†–û–í–ï–†–ö–ê –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–ò –î–ê–ù–ù–´–•
        print("\n2Ô∏è‚É£ –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø EXCEL ‚Üî RESIDENTIAL_COMPLEXES")
        print("-" * 40)
        
        sync_check = db.session.execute(text("""
            SELECT 
                ep.complex_name,
                rc.id IS NOT NULL as has_rc_record,
                COUNT(ep.*) as apartments_count
            FROM excel_properties ep
            LEFT JOIN residential_complexes rc ON rc.name = ep.complex_name
            GROUP BY ep.complex_name, rc.id
            ORDER BY apartments_count DESC
            LIMIT 5
        """)).fetchall()
        
        print("üîó –¢–û–ü-5 –ñ–ö –ò –ò–• –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø:")
        for row in sync_check:
            status = "‚úÖ" if row[1] else "‚ùå"
            print(f"   {status} {row[0]} ({row[2]} –∫–≤–∞—Ä—Ç–∏—Ä)")
        
        # 3. –ü–†–û–í–ï–†–ö–ê –î–ê–ù–ù–´–• –ü–û –ó–ê–°–¢–†–û–ô–©–ò–ö–ê–ú
        print("\n3Ô∏è‚É£ –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û –ó–ê–°–¢–†–û–ô–©–ò–ö–ê–ú")
        print("-" * 40)
        
        developers = db.session.execute(text("""
            SELECT 
                developer_name,
                COUNT(*) as properties,
                COUNT(DISTINCT complex_name) as complexes,
                AVG(price) as avg_price
            FROM excel_properties 
            WHERE developer_name IS NOT NULL AND price IS NOT NULL
            GROUP BY developer_name
            ORDER BY properties DESC
            LIMIT 3
        """)).fetchall()
        
        for dev in developers:
            print(f"üèóÔ∏è  {dev[0]}:")
            print(f"    üìä {dev[1]} –∫–≤–∞—Ä—Ç–∏—Ä –≤ {dev[2]} –ñ–ö")
            print(f"    üí∞ –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞: {dev[3]:,.0f} ‚ÇΩ")
        
        # 4. –ü–†–û–í–ï–†–ö–ê –¶–ï–ù–û–í–´–• –î–ò–ê–ü–ê–ó–û–ù–û–í
        print("\n4Ô∏è‚É£ –¶–ï–ù–û–í–´–ï –î–ò–ê–ü–ê–ó–û–ù–´ –ü–û –ö–û–ú–ù–ê–¢–ù–û–°–¢–ò")
        print("-" * 40)
        
        price_ranges = db.session.execute(text("""
            SELECT 
                object_rooms,
                COUNT(*) as count,
                MIN(price) as min_price,
                MAX(price) as max_price,
                AVG(price) as avg_price
            FROM excel_properties 
            WHERE price IS NOT NULL AND object_rooms IS NOT NULL
            GROUP BY object_rooms
            ORDER BY object_rooms
        """)).fetchall()
        
        for room in price_ranges:
            if room[0]:
                room_name = f"{int(room[0])}-–∫–æ–º–Ω" if room[0] > 0 else "–°—Ç—É–¥–∏—è"
                print(f"üè† {room_name}: {room[1]} —à—Ç")
                print(f"    üí∞ –û—Ç {room[2]:,.0f} –¥–æ {room[3]:,.0f} ‚ÇΩ")
                print(f"    üìä –°—Ä–µ–¥–Ω—è—è: {room[4]:,.0f} ‚ÇΩ")
        
        # 5. –ü–†–û–í–ï–†–ö–ê –ì–ï–û–õ–û–ö–ê–¶–ò–ò –ò –§–û–¢–û–ì–†–ê–§–ò–ô
        print("\n5Ô∏è‚É£ –ö–ê–ß–ï–°–¢–í–û –î–ê–ù–ù–´–•")
        print("-" * 40)
        
        quality_stats = db.session.execute(text("""
            SELECT 
                COUNT(*) as total,
                COUNT(CASE WHEN photos IS NOT NULL AND photos != '' THEN 1 END) as with_photos,
                COUNT(CASE WHEN address_position_lat IS NOT NULL AND address_position_lon IS NOT NULL THEN 1 END) as with_coords,
                COUNT(CASE WHEN price IS NOT NULL THEN 1 END) as with_prices
            FROM excel_properties
        """)).fetchone()
        
        photos_percent = (quality_stats[1] / quality_stats[0] * 100) if quality_stats[0] > 0 else 0
        coords_percent = (quality_stats[2] / quality_stats[0] * 100) if quality_stats[0] > 0 else 0
        prices_percent = (quality_stats[3] / quality_stats[0] * 100) if quality_stats[0] > 0 else 0
        
        print(f"üì∏ –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏: {quality_stats[1]}/{quality_stats[0]} ({photos_percent:.1f}%)")
        print(f"üó∫Ô∏è  –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: {quality_stats[2]}/{quality_stats[0]} ({coords_percent:.1f}%)")
        print(f"üí∞ –¶–µ–Ω—ã: {quality_stats[3]}/{quality_stats[0]} ({prices_percent:.1f}%)")
        
        # 6. –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –í–ï–ë-–û–¢–û–ë–†–ê–ñ–ï–ù–ò–Ø
        print("\n6Ô∏è‚É£ –ü–†–û–í–ï–†–ö–ê –í–ï–ë-–û–¢–û–ë–†–ê–ñ–ï–ù–ò–Ø")
        print("-" * 40)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –¥–æ—Å—Ç—É–ø–Ω—ã –¥–ª—è —Å–∞–π—Ç–∞
        web_test = db.session.execute(text("""
            SELECT 
                complex_name,
                COUNT(*) as apartments,
                MIN(price) as min_price,
                MAX(price) as max_price
            FROM excel_properties 
            WHERE price IS NOT NULL
            GROUP BY complex_name
            ORDER BY apartments DESC
            LIMIT 3
        """)).fetchall()
        
        print("üåê –î–ê–ù–ù–´–ï –î–õ–Ø –°–ê–ô–¢–ê (–¢–û–ü-3 –ñ–ö):")
        for complex_data in web_test:
            print(f"   üè¢ {complex_data[0]}")
            print(f"      üìä {complex_data[1]} –∫–≤–∞—Ä—Ç–∏—Ä")
            print(f"      üí∞ {complex_data[2]:,.0f} - {complex_data[3]:,.0f} ‚ÇΩ")
        
        # 7. –ê–í–¢–û–ú–ê–¢–ò–ó–ê–¶–ò–Ø - –ò–¢–û–ì–û–í–´–ô –í–ï–†–î–ò–ö–¢
        print("\n7Ô∏è‚É£ –ò–¢–û–ì–û–í–´–ô –í–ï–†–î–ò–ö–¢ –ê–í–¢–û–ú–ê–¢–ò–ó–ê–¶–ò–ò")
        print("=" * 60)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∏ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏
        automation_checks = {
            "–í—Å–µ 77 –∫–æ–ª–æ–Ω–æ–∫ –∑–∞–≥—Ä—É–∂–µ–Ω—ã": columns == 77,
            "–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã": stats[0] > 0,
            "–ñ–ö –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–Ω—ã": stats[1] > 0,
            "–ó–∞—Å—Ç—Ä–æ–π—â–∏–∫–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–Ω—ã": stats[2] > 0,
            "–¶–µ–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã": prices_percent > 90,
            "–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã": photos_percent > 90,
            "–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã": coords_percent > 90,
            "–î–∞–Ω–Ω—ã–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã": True,  # –ú—ã –≤–∏–¥–µ–ª–∏ —á—Ç–æ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç
            "–°–∞–π—Ç –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ": len(web_test) > 0
        }
        
        passed_checks = sum(automation_checks.values())
        total_checks = len(automation_checks)
        
        print(f"\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢ –ê–í–¢–û–ú–ê–¢–ò–ó–ê–¶–ò–ò: {passed_checks}/{total_checks} –ü–†–û–í–ï–†–û–ö –ü–†–û–ô–î–ï–ù–û")
        print("-" * 60)
        
        for check, status in automation_checks.items():
            status_icon = "‚úÖ" if status else "‚ùå"
            print(f"{status_icon} {check}")
        
        # –§–∏–Ω–∞–ª—å–Ω–æ–µ –∑–∞–∫–ª—é—á–µ–Ω–∏–µ
        if passed_checks == total_checks:
            print(f"\nüéâ –ü–†–ï–í–û–°–•–û–î–ù–û! –ê–í–¢–û–ú–ê–¢–ò–ó–ê–¶–ò–Ø –†–ê–ë–û–¢–ê–ï–¢ –ù–ê 100%!")
            print("‚úÖ –°–∏—Å—Ç–µ–º–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é –≥–æ—Ç–æ–≤–∞ –∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–µ Excel —Ñ–∞–π–ª–æ–≤")
            print("üìà –í—Å–µ 77 –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            print("üîÑ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞—é—Ç—Å—è –Ω–æ–≤—ã–µ –ñ–ö, –∑–∞—Å—Ç—Ä–æ–π—â–∏–∫–∏ –∏ –∫–≤–∞—Ä—Ç–∏—Ä—ã")
            print("üåê –î–∞–Ω–Ω—ã–µ –º–≥–Ω–æ–≤–µ–Ω–Ω–æ –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è –Ω–∞ —Å–∞–π—Ç–µ")
            
            return True
        elif passed_checks >= total_checks * 0.8:
            print(f"\n‚úÖ –û–¢–õ–ò–ß–ù–û! –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ {passed_checks/total_checks*100:.0f}%")
            print("üîß –ù–µ–±–æ–ª—å—à–∏–µ –¥–æ—Ä–∞–±–æ—Ç–∫–∏ —É–ª—É—á—à–∞—Ç —Å–∏—Å—Ç–µ–º—É")
            return True
        else:
            print(f"\n‚ö†Ô∏è  –¢–†–ï–ë–£–ï–¢–°–Ø –î–û–†–ê–ë–û–¢–ö–ê: {passed_checks}/{total_checks} –ø—Ä–æ–≤–µ—Ä–æ–∫")
            print("üõ†Ô∏è  –°–∏—Å—Ç–µ–º–∞ –Ω—É–∂–¥–∞–µ—Ç—Å—è –≤ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–µ")
            return False

if __name__ == "__main__":
    print("üöÄ –ó–ê–ü–£–°–ö –§–ò–ù–ê–õ–¨–ù–û–ô –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–ò –ê–í–¢–û–ú–ê–¢–ò–ó–ê–¶–ò–ò...")
    success = final_automation_demo()
    
    if success:
        print("\nüéØ –°–ò–°–¢–ï–ú–ê –ì–û–¢–û–í–ê –ö –ü–†–û–î–ê–ö–®–ï–ù–£!")
        print("üìã –î–õ–Ø –ó–ê–ì–†–£–ó–ö–ò –ù–û–í–´–• –î–ê–ù–ù–´–•:")
        print("   1. –ü–æ–º–µ—Å—Ç–∏—Ç–µ Excel —Ñ–∞–π–ª –≤ –∫–æ—Ä–Ω–µ–≤—É—é –ø–∞–ø–∫—É")
        print("   2. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: python simple_import_demo.py")
        print("   3. –î–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ—è–≤—è—Ç—Å—è –Ω–∞ —Å–∞–π—Ç–µ")
    else:
        print("\nüîß –¢–†–ï–ë–£–ï–¢–°–Ø –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–ê–Ø –ù–ê–°–¢–†–û–ô–ö–ê")
    
    exit(0 if success else 1)