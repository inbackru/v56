#!/usr/bin/env python3
"""
–ü–æ–ª–Ω—ã–π –∏–º–ø–æ—Ä—Ç –≤—Å–µ—Ö 454 –æ–±—ä–µ–∫—Ç–æ–≤ –∏–∑ Excel —Å–æ –≤—Å–µ–º–∏ 77 –∫–æ–ª–æ–Ω–∫–∞–º–∏
"""
import openpyxl
import os
from app import app, db
from sqlalchemy import text
import json

def import_all_properties():
    """–ò–º–ø–æ—Ä—Ç –≤—Å–µ—Ö –æ–±—ä–µ–∫—Ç–æ–≤ –∏–∑ Excel"""
    
    excel_file = 'attached_assets/–°–æ—á–∏_1759349636274.xlsx'
    
    if not os.path.exists(excel_file):
        print(f"‚ùå –§–∞–π–ª {excel_file} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return False
    
    print(f"üìÇ –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞: {excel_file}")
    
    try:
        wb = openpyxl.load_workbook(excel_file, data_only=True)
        ws = wb.active
        
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
        headers = [cell.value for cell in ws[1]]
        print(f"‚úÖ –ö–æ–ª–æ–Ω–æ–∫ –≤ Excel: {len(headers)}")
        print(f"‚úÖ –°—Ç—Ä–æ–∫ –¥–∞–Ω–Ω—ã—Ö: {ws.max_row - 1}")
        
        with app.app_context():
            # –°–Ω–∞—á–∞–ª–∞ –æ—á–∏—â–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
            print("\nüóëÔ∏è  –û—á–∏—Å—Ç–∫–∞ —Ç–∞–±–ª–∏—Ü—ã excel_properties...")
            db.session.execute(text("DELETE FROM excel_properties"))
            db.session.commit()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–∞–±–ª–∏—Ü–∞ –ø—É—Å—Ç–∞—è
            count = db.session.execute(text("SELECT COUNT(*) FROM excel_properties")).scalar()
            print(f"‚úÖ –¢–∞–±–ª–∏—Ü–∞ –æ—á–∏—â–µ–Ω–∞ (–æ—Å—Ç–∞–ª–æ—Å—å –∑–∞–ø–∏—Å–µ–π: {count})")
            
            inserted_count = 0
            error_count = 0
            skipped_duplicates = 0
            seen_ids = set()  # –î–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
            
            print("\nüì• –ò–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö...")
            
            for row_idx, row in enumerate(ws.iter_rows(min_row=2, values_only=True), start=2):
                try:
                    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫—É –≤ —Å–ª–æ–≤–∞—Ä—å
                    data = {}
                    for idx, header in enumerate(headers):
                        if idx < len(row):
                            value = row[idx]
                            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –±—É–ª–µ–≤—ã –∑–Ω–∞—á–µ–Ω–∏—è
                            if isinstance(value, str):
                                if value.lower() == 'true':
                                    value = True
                                elif value.lower() == 'false':
                                    value = False
                            data[header] = value
                    
                    inner_id = data.get('inner_id')
                    if not inner_id:
                        continue
                    
                    # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã (–±–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤–æ–µ –≤—Ö–æ–∂–¥–µ–Ω–∏–µ)
                    if inner_id in seen_ids:
                        skipped_duplicates += 1
                        continue
                    seen_ids.add(inner_id)
                    
                    # SQL –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏ —Å ALL –∫–æ–ª–æ–Ω–∫–∞–º–∏
                    insert_sql = text("""
                        INSERT INTO excel_properties (
                            inner_id, url, photos,
                            address_id, address_guid, address_kind, address_name, address_subways,
                            address_locality_id, address_locality_kind, address_locality_name,
                            address_locality_subkind, address_locality_display_name,
                            address_position_lat, address_position_lon,
                            address_display_name, address_short_display_name,
                            complex_id, complex_name, complex_phone,
                            complex_building_id, complex_building_name, complex_building_released,
                            complex_building_is_unsafe, complex_building_accreditation,
                            complex_building_end_build_year, complex_building_complex_product,
                            complex_building_end_build_quarter, complex_building_has_green_mortgage,
                            complex_min_rate, complex_sales_phone, complex_sales_address,
                            complex_object_class_id, complex_object_class_display_name,
                            complex_has_big_check, complex_end_build_year, complex_financing_sber,
                            complex_telephony_b_number, complex_telephony_r_number,
                            complex_with_renovation, complex_first_build_year, complex_start_build_year,
                            complex_end_build_quarter, complex_has_accreditation,
                            complex_has_approve_flats, complex_mortgage_tranches,
                            complex_has_green_mortgage, complex_phone_substitution,
                            complex_show_contact_block, complex_first_build_quarter,
                            complex_start_build_quarter, complex_has_mortgage_subsidy,
                            complex_has_government_program,
                            min_rate, trade_in, deal_type,
                            developer_id, developer_name, developer_site, developer_holding_id,
                            is_auction, price, max_price, min_price, square_price, mortgage_price,
                            renovation_type, renovation_display_name, description,
                            object_area, object_rooms, object_max_floor, object_min_floor,
                            object_is_apartment, published_dt, chat_available, placement_type
                        ) VALUES (
                            :inner_id, :url, :photos,
                            :address_id, :address_guid, :address_kind, :address_name, :address_subways,
                            :address_locality_id, :address_locality_kind, :address_locality_name,
                            :address_locality_subkind, :address_locality_display_name,
                            :address_position_lat, :address_position_lon,
                            :address_display_name, :address_short_display_name,
                            :complex_id, :complex_name, :complex_phone,
                            :complex_building_id, :complex_building_name, :complex_building_released,
                            :complex_building_is_unsafe, :complex_building_accreditation,
                            :complex_building_end_build_year, :complex_building_complex_product,
                            :complex_building_end_build_quarter, :complex_building_has_green_mortgage,
                            :complex_min_rate, :complex_sales_phone, :complex_sales_address,
                            :complex_object_class_id, :complex_object_class_display_name,
                            :complex_has_big_check, :complex_end_build_year, :complex_financing_sber,
                            :complex_telephony_b_number, :complex_telephony_r_number,
                            :complex_with_renovation, :complex_first_build_year, :complex_start_build_year,
                            :complex_end_build_quarter, :complex_has_accreditation,
                            :complex_has_approve_flats, :complex_mortgage_tranches,
                            :complex_has_green_mortgage, :complex_phone_substitution,
                            :complex_show_contact_block, :complex_first_build_quarter,
                            :complex_start_build_quarter, :complex_has_mortgage_subsidy,
                            :complex_has_government_program,
                            :min_rate, :trade_in, :deal_type,
                            :developer_id, :developer_name, :developer_site, :developer_holding_id,
                            :is_auction, :price, :max_price, :min_price, :square_price, :mortgage_price,
                            :renovation_type, :renovation_display_name, :description,
                            :object_area, :object_rooms, :object_max_floor, :object_min_floor,
                            :object_is_apartment, :published_dt, :chat_available, :placement_type
                        )
                    """)
                    
                    db.session.execute(insert_sql, data)
                    inserted_count += 1
                    
                    if inserted_count % 100 == 0:
                        print(f"   –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ: {inserted_count}")
                        db.session.commit()
                        
                except Exception as e:
                    error_count += 1
                    if error_count <= 5:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5 –æ—à–∏–±–æ–∫
                        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Å—Ç—Ä–æ–∫–µ {row_idx} (ID: {data.get('inner_id', 'unknown')}): {e}")
                    continue
            
            # –§–∏–Ω–∞–ª—å–Ω—ã–π –∫–æ–º–º–∏—Ç
            db.session.commit()
            
            print()
            print("=" * 70)
            print("‚úÖ –ò–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!")
            print(f"   –î–æ–±–∞–≤–ª–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: {inserted_count}")
            print(f"   –ü—Ä–æ–ø—É—â–µ–Ω–æ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤: {skipped_duplicates}")
            print(f"   –û—à–∏–±–æ–∫: {error_count}")
            print("=" * 70)
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            stats = db.session.execute(text("""
                SELECT 
                    COUNT(*) as total,
                    COUNT(CASE WHEN address_position_lat IS NOT NULL THEN 1 END) as with_coords,
                    COUNT(complex_building_end_build_year) as with_deadline,
                    COUNT(DISTINCT complex_name) as unique_complexes,
                    COUNT(DISTINCT developer_name) as unique_developers
                FROM excel_properties
            """)).fetchone()
            
            print()
            print("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:")
            print(f"   –í—Å–µ–≥–æ –æ–±—ä–µ–∫—Ç–æ–≤: {stats[0]}")
            print(f"   –° –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏ (–≤–∏–¥–Ω—ã –Ω–∞ –∫–∞—Ä—Ç–µ): {stats[1]}")
            print(f"   –°–æ —Å—Ä–æ–∫–∞–º–∏ —Å–¥–∞—á–∏: {stats[2]}")
            print(f"   –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ñ–ö: {stats[3]}")
            print(f"   –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∑–∞—Å—Ç—Ä–æ–π—â–∏–∫–æ–≤: {stats[4]}")
            
        wb.close()
        return True
        
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
        return False

if __name__ == "__main__":
    print("üöÄ –ü–æ–ª–Ω—ã–π –∏–º–ø–æ—Ä—Ç –≤—Å–µ—Ö –æ–±—ä–µ–∫—Ç–æ–≤ –∏–∑ Excel")
    print("=" * 70)
    print()
    
    success = import_all_properties()
    
    if success:
        print()
        print("‚úÖ –ò–º–ø–æ—Ä—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω!")
        print("üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π")
    else:
        print()
        print("‚ùå –ò–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–∞–º–∏")
