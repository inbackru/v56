#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –ø–∞—Ä—Å–µ—Ä Domclick –±–µ–∑ –±—Ä–∞—É–∑–µ—Ä–∞
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç HTTP –∑–∞–ø—Ä–æ—Å—ã + GPT-4 –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ HTML
"""

import os
import json
import time
import random
import pandas as pd
import requests
from datetime import datetime
from typing import Dict, List, Optional

try:
    import openai
    OPENAI_AVAILABLE = True
except ImportError:
    OPENAI_AVAILABLE = False

class DomclickSimpleParser:
    def __init__(self):
        self.openai_api_key = os.environ.get("OPENAI_API_KEY")
        if self.openai_api_key and OPENAI_AVAILABLE:
            self.client = openai.OpenAI(api_key=self.openai_api_key)
            print("‚úÖ OpenAI API –ø–æ–¥–∫–ª—é—á–µ–Ω")
        else:
            self.client = None
            print("‚ö†Ô∏è OpenAI API –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        self.session = requests.Session()
        self.session.headers.update({
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',
            'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8',
            'Accept-Language': 'ru-RU,ru;q=0.9,en;q=0.8',
            'Accept-Encoding': 'gzip, deflate, br',
            'DNT': '1',
            'Connection': 'keep-alive',
            'Upgrade-Insecure-Requests': '1',
        })
        
        self.scraped_data = []
        print("üåê –ü—Ä–æ—Å—Ç–æ–π HTTP –ø–∞—Ä—Å–µ—Ä Domclick –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

    def get_search_page(self, url: str) -> Optional[str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ HTML —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø–æ–∏—Å–∫–∞"""
        try:
            print(f"üîç –ó–∞–≥—Ä—É–∑–∫–∞: {url}")
            
            # –°–ª—É—á–∞–π–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
            time.sleep(random.uniform(2, 5))
            
            response = self.session.get(url, timeout=30)
            
            if response.status_code == 200:
                print(f"‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞: {len(response.text)} —Å–∏–º–≤–æ–ª–æ–≤")
                return response.text
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ HTTP: {response.status_code}")
                return None
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {e}")
            return None

    def extract_properties_with_gpt(self, html_content: str) -> List[Dict]:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ —Å –ø–æ–º–æ—â—å—é GPT-4"""
        if not self.client:
            print("‚ùå OpenAI API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            return []
        
        try:
            # –û–±—Ä–µ–∑–∞–µ–º HTML –¥–æ —Ä–∞–∑—É–º–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞
            html_snippet = html_content[:15000] if len(html_content) > 15000 else html_content
            
            prompt = f"""
–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π HTML –∫–æ–¥ —Å—Ç—Ä–∞–Ω–∏—Ü—ã Domclick —Å –æ–±—ä—è–≤–ª–µ–Ω–∏—è–º–∏ –æ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ –≤ –ö—Ä–∞—Å–Ω–æ–¥–∞—Ä–µ.

–ù–∞–π–¥–∏ –í–°–ï –æ–±—ä–µ–∫—Ç—ã –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ –∏ –∏–∑–≤–ª–µ–∫–∏ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON –º–∞—Å—Å–∏–≤–∞:

[
    {{
        "name": "–Ω–∞–∑–≤–∞–Ω–∏–µ –ñ–ö –∏–ª–∏ –∞–¥—Ä–µ—Å –æ–±—ä–µ–∫—Ç–∞",
        "price": "—Ü–µ–Ω–∞ –≤ —Ä—É–±–ª—è—Ö (—Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ)",
        "rooms": "–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–Ω–∞—Ç (0 –¥–ª—è —Å—Ç—É–¥–∏–∏)",
        "area": "–ø–ª–æ—â–∞–¥—å –≤ –º¬≤ (—Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ)",
        "floor": "—ç—Ç–∞–∂",
        "floors_total": "–≤—Å–µ–≥–æ —ç—Ç–∞–∂–µ–π –≤ –¥–æ–º–µ",
        "developer": "–∑–∞—Å—Ç—Ä–æ–π—â–∏–∫ –∏–ª–∏ –∞–≥–µ–Ω—Ç—Å—Ç–≤–æ",
        "district": "—Ä–∞–π–æ–Ω –ö—Ä–∞—Å–Ω–æ–¥–∞—Ä–∞",
        "address": "–ø–æ–ª–Ω—ã–π –∞–¥—Ä–µ—Å",
        "property_type": "–∫–≤–∞—Ä—Ç–∏—Ä–∞/–¥–æ–º/–∫–æ–º–º–µ—Ä—á–µ—Å–∫–∞—è",
        "status": "–Ω–æ–≤–æ—Å—Ç—Ä–æ–π–∫–∞/–≤—Ç–æ—Ä–∏—á–∫–∞"
    }}
]

HTML –∫–æ–¥:
{html_snippet}

–í–ê–ñ–ù–û:
- –ò–∑–≤–ª–µ–∫–∞–π –¢–û–õ–¨–ö–û —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ HTML
- –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –Ω–µ—è—Å–Ω—ã, –ø–∏—à–∏ null
- –ß–∏—Å–ª–æ–≤—ã–µ –ø–æ–ª—è –¥–æ–ª–∂–Ω—ã —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã
- –ò—â–∏ div —Å –∫–ª–∞—Å—Å–∞–º–∏ card, item, property, apartment, listing
- –§–æ–∫—É—Å–∏—Ä—É–π—Å—è –Ω–∞ –Ω–æ–≤–æ—Å—Ç—Ä–æ–π–∫–∞—Ö –¥–ª—è –ö—Ä–∞—Å–Ω–æ–¥–∞—Ä–∞
"""

            response = self.client.chat.completions.create(
                model="gpt-4",  # –ò—Å–ø–æ–ª—å–∑—É–µ–º GPT-4 –≤–º–µ—Å—Ç–æ Vision
                messages=[
                    {
                        "role": "user",
                        "content": prompt
                    }
                ],
                max_tokens=2000,
                temperature=0.1
            )
            
            content = response.choices[0].message.content
            print(f"ü§ñ GPT –æ—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω: {len(content)} —Å–∏–º–≤–æ–ª–æ–≤")
            
            # –ü–∞—Ä—Å–∏–º JSON –∏–∑ –æ—Ç–≤–µ—Ç–∞
            try:
                json_start = content.find('[')
                json_end = content.rfind(']') + 1
                
                if json_start != -1 and json_end > json_start:
                    json_str = content[json_start:json_end]
                    properties = json.loads(json_str)
                    
                    print(f"‚úÖ –ò–∑–≤–ª–µ—á–µ–Ω–æ –æ–±—ä–µ–∫—Ç–æ–≤: {len(properties)}")
                    return properties
                else:
                    print("‚ö†Ô∏è JSON –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –æ—Ç–≤–µ—Ç–µ GPT")
                    return []
                    
            except json.JSONDecodeError as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {e}")
                print(f"–û—Ç–≤–µ—Ç GPT: {content[:500]}...")
                return []
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ GPT: {e}")
            return []

    def process_extracted_data(self, properties: List[Dict]) -> List[Dict]:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        processed = []
        
        for prop in properties:
            try:
                processed_prop = {
                    'inner_id': f"simple_parser_{int(time.time())}_{len(processed)}",
                    'complex_name': self.clean_text(prop.get('name', '')),
                    'developer_name': self.clean_text(prop.get('developer', '–£—Ç–æ—á–Ω—è–µ—Ç—Å—è')),
                    'city': '–ö—Ä–∞—Å–Ω–æ–¥–∞—Ä',
                    'object_rooms': self.safe_int(prop.get('rooms')),
                    'object_area': self.safe_float(prop.get('area')),
                    'price': self.safe_int(prop.get('price')),
                    'object_min_floor': self.safe_int(prop.get('floor')),
                    'object_max_floor': self.safe_int(prop.get('floors_total')),
                    'address_display_name': self.clean_text(prop.get('address', '–≥. –ö—Ä–∞—Å–Ω–æ–¥–∞—Ä')),
                    'property_type': prop.get('property_type', '–∫–≤–∞—Ä—Ç–∏—Ä–∞'),
                    'status': prop.get('status', '–Ω–æ–≤–æ—Å—Ç—Ä–æ–π–∫–∞'),
                    'source': 'domclick_simple_parser',
                    'scraped_at': datetime.now().isoformat()
                }
                
                # –ë–∞–∑–æ–≤–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è
                if processed_prop['price'] and processed_prop['price'] > 100000:
                    processed.append(processed_prop)
                    
            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–±—ä–µ–∫—Ç–∞: {e}")
                continue
        
        return processed

    def clean_text(self, text) -> str:
        """–û—á–∏—Å—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞"""
        if not text or text == 'null':
            return ''
        return str(text).strip()

    def safe_int(self, value) -> Optional[int]:
        """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ int"""
        if not value or value == 'null':
            return None
        try:
            clean_value = ''.join(filter(str.isdigit, str(value)))
            return int(clean_value) if clean_value else None
        except:
            return None

    def safe_float(self, value) -> Optional[float]:
        """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ float"""
        if not value or value == 'null':
            return None
        try:
            clean_value = str(value).replace(',', '.').replace(' ', '')
            return float(''.join(c for c in clean_value if c.isdigit() or c == '.'))
        except:
            return None

    def run_parsing(self) -> Dict:
        """–û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –ø–∞—Ä—Å–∏–Ω–≥–∞"""
        print("üöÄ –ó–∞–ø—É—Å–∫ –ø—Ä–æ—Å—Ç–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞ Domclick...")
        
        # URL –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞
        search_urls = [
            "https://domclick.ru/krasnodar/search/living/newbuilding",
            "https://domclick.ru/search?type=living&deal_type=sell&object_type%5B%5D=newbuilding&city_id=4897"
        ]
        
        all_properties = []
        
        for url in search_urls:
            try:
                html_content = self.get_search_page(url)
                if not html_content:
                    continue
                
                if self.client:
                    properties = self.extract_properties_with_gpt(html_content)
                    if properties:
                        processed = self.process_extracted_data(properties)
                        all_properties.extend(processed)
                        print(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –æ–±—ä–µ–∫—Ç–æ–≤: {len(processed)}")
                else:
                    print("‚ö†Ô∏è OpenAI API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω - HTML –ø–æ–ª—É—á–µ–Ω, –Ω–æ –Ω–µ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
                
                # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
                time.sleep(random.uniform(3, 8))
                
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ {url}: {e}")
                continue
        
        self.scraped_data = all_properties
        
        return {
            'success': True if all_properties else False,
            'properties_count': len(all_properties),
            'properties': all_properties
        }

    def save_to_excel(self, filename: str = None) -> str:
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ Excel"""
        if not self.scraped_data:
            print("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è")
            return None
        
        if not filename:
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            filename = f"attached_assets/domclick_simple_{timestamp}.xlsx"
        
        os.makedirs(os.path.dirname(filename), exist_ok=True)
        
        try:
            df = pd.DataFrame(self.scraped_data)
            df.to_excel(filename, index=False)
            
            print(f"‚úÖ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: {filename}")
            print(f"üìä –û–±—ä–µ–∫—Ç–æ–≤ –≤ —Ñ–∞–π–ª–µ: {len(self.scraped_data)}")
            
            return filename
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")
            return None

def main():
    """–ó–∞–ø—É—Å–∫ –ø—Ä–æ—Å—Ç–æ–≥–æ –ø–∞—Ä—Å–µ—Ä–∞"""
    parser = DomclickSimpleParser()
    
    if not parser.client:
        print("\n‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: OpenAI API –∫–ª—é—á –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
        print("–ü–∞—Ä—Å–µ—Ä –º–æ–∂–µ—Ç –ø–æ–ª—É—á–∞—Ç—å HTML, –Ω–æ –Ω–µ –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –µ–≥–æ")
        return None
    
    try:
        result = parser.run_parsing()
        
        if result['success']:
            print(f"\nüéâ –ü–ê–†–°–ò–ù–ì –ó–ê–í–ï–†–®–ï–ù!")
            print(f"üìä –ù–∞–π–¥–µ–Ω–æ –æ–±—ä–µ–∫—Ç–æ–≤: {result['properties_count']}")
            
            if result['properties_count'] > 0:
                filename = parser.save_to_excel()
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã –¥–∞–Ω–Ω—ã—Ö
                print(f"\nüìã –ü—Ä–∏–º–µ—Ä—ã –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤:")
                for i, prop in enumerate(result['properties'][:3]):
                    print(f"{i+1}. {prop.get('complex_name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}")
                    print(f"   –¶–µ–Ω–∞: {prop.get('price', '–Ω–µ —É–∫–∞–∑–∞–Ω–∞')} ‚ÇΩ")
                    print(f"   –ü–ª–æ—â–∞–¥—å: {prop.get('object_area', '–Ω–µ —É–∫–∞–∑–∞–Ω–∞')} –º¬≤")
                    print(f"   –ö–æ–º–Ω–∞—Ç: {prop.get('object_rooms', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')}")
                
                return filename
        else:
            print("‚ùå –ü–∞—Ä—Å–∏–Ω–≥ –Ω–µ –¥–∞–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
            return None
            
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        return None

if __name__ == "__main__":
    main()