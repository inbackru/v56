#!/usr/bin/env python3
"""
–ò–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ø–∞—Ä—Å–µ—Ä–∞ —Å —Å–æ–∑–¥–∞–Ω–∏–µ–º –∏–µ—Ä–∞—Ä—Ö–∏—á–µ—Å–∫–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã:
–ó–∞—Å—Ç—Ä–æ–π—â–∏–∫ ‚Üí –ñ–ö ‚Üí –õ–∏—Ç–µ—Ä/–ö–æ—Ä–ø—É—Å ‚Üí –ö–≤–∞—Ä—Ç–∏—Ä—ã
"""

import pandas as pd
import numpy as np
import os
import re
from datetime import datetime
from app import app, db
from models import Developer, ResidentialComplex, Building, Property, District

def generate_slug(name):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è slug –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"""
    if not name or pd.isna(name):
        return 'unnamed'
    slug = re.sub(r'[^\w\s-]', '', str(name).lower())
    slug = re.sub(r'[-\s]+', '-', slug)
    return slug.strip('-')

def safe_get(row, field, default=None):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ–ª—è"""
    try:
        value = row.get(field, default)
        if pd.isna(value) or value is None or value == '':
            return default
        return value
    except:
        return default

def safe_str(value, default=''):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –≤ —Å—Ç—Ä–æ–∫—É"""
    if pd.isna(value) or value is None:
        return default
    return str(value).strip()

def safe_int(value, default=0):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –≤ int"""
    if pd.isna(value) or value is None:
        return default
    try:
        return int(float(value))
    except:
        return default

def safe_float(value, default=0.0):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –≤ float"""
    if pd.isna(value) or value is None:
        return default
    try:
        return float(value)
    except:
        return default

def import_hierarchy_from_parser(excel_file):
    """–ò–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö —Å —Å–æ–∑–¥–∞–Ω–∏–µ–º –ø–æ–ª–Ω–æ–π –∏–µ—Ä–∞—Ä—Ö–∏–∏"""
    
    print("üöÄ –ò–ú–ü–û–†–¢ –ò–ï–†–ê–†–•–ò–ß–ï–°–ö–û–ô –°–¢–†–£–ö–¢–£–†–´ –ò–ó –ü–ê–†–°–ï–†–ê")
    print("=" * 60)
    
    # –ß–∏—Ç–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    df = pd.read_excel(excel_file)
    print(f"üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(df)} –∑–∞–ø–∏—Å–µ–π –∫–≤–∞—Ä—Ç–∏—Ä")
    
    stats = {
        'developers': 0,
        'complexes': 0, 
        'buildings': 0,
        'properties': 0
    }
    
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –∑–∞—Å—Ç—Ä–æ–π—â–∏–∫–∞–º
    developer_groups = df.groupby('developer_name')
    
    for dev_name, dev_data in developer_groups:
        print(f"\nüèóÔ∏è –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞—Å—Ç—Ä–æ–π—â–∏–∫–∞: {dev_name}")
        
        # 1. –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –Ω–∞—Ö–æ–¥–∏–º –∑–∞—Å—Ç—Ä–æ–π—â–∏–∫–∞
        developer = Developer.query.filter_by(name=dev_name).first()
        if not developer:
            developer = Developer(
                name=dev_name,
                slug=generate_slug(dev_name),
                website=safe_str(dev_data.iloc[0]['developer_site']),
                created_at=datetime.utcnow()
            )
            db.session.add(developer)
            db.session.flush()  # –ü–æ–ª—É—á–∞–µ–º ID
            stats['developers'] += 1
            print(f"  ‚úÖ –°–æ–∑–¥–∞–Ω –∑–∞—Å—Ç—Ä–æ–π—â–∏–∫: {dev_name}")
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –ñ–ö
        complex_groups = dev_data.groupby('complex_name')
        
        for complex_name, complex_data in complex_groups:
            print(f"    üèòÔ∏è –û–±—Ä–∞–±–æ—Ç–∫–∞ –ñ–ö: {complex_name}")
            
            # 2. –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –Ω–∞—Ö–æ–¥–∏–º –ñ–ö
            complex_obj = ResidentialComplex.query.filter_by(
                name=complex_name, 
                developer_id=developer.id
            ).first()
            
            if not complex_obj:
                first_row = complex_data.iloc[0]
                
                complex_obj = ResidentialComplex(
                    name=complex_name,
                    slug=generate_slug(complex_name),
                    developer_id=developer.id,
                    
                    # –î–∞–Ω–Ω—ã–µ –∏–∑ –ø–∞—Ä—Å–µ—Ä–∞
                    complex_id=safe_str(first_row['complex_id']),
                    complex_phone=safe_str(first_row['complex_phone']),
                    sales_phone=safe_str(first_row['complex_sales_phone']),
                    sales_address=safe_str(first_row['complex_sales_address']),
                    object_class_display_name=safe_str(first_row['complex_object_class_display_name']),
                    
                    # –î–∞—Ç—ã —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–∞
                    start_build_year=safe_int(first_row['complex_start_build_year']),
                    start_build_quarter=safe_int(first_row['complex_start_build_quarter']),
                    first_build_year=safe_int(first_row['complex_first_build_year']),
                    first_build_quarter=safe_int(first_row['complex_first_build_quarter']),
                    end_build_year=safe_int(first_row['complex_end_build_year']),
                    end_build_quarter=safe_int(first_row['complex_end_build_quarter']),
                    
                    # –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏
                    has_accreditation=bool(safe_get(first_row, 'complex_has_accreditation', False)),
                    has_green_mortgage=bool(safe_get(first_row, 'complex_has_green_mortgage', False)),
                    has_big_check=bool(safe_get(first_row, 'complex_has_big_check', False)),
                    with_renovation=bool(safe_get(first_row, 'complex_with_renovation', False)),
                    financing_sber=bool(safe_get(first_row, 'complex_financing_sber', False)),
                    
                    created_at=datetime.utcnow()
                )
                db.session.add(complex_obj)
                db.session.flush()
                stats['complexes'] += 1
                print(f"      ‚úÖ –°–æ–∑–¥–∞–Ω –ñ–ö: {complex_name}")
            
            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –∫–æ—Ä–ø—É—Å–∞–º/–ª–∏—Ç–µ—Ä–∞–º
            building_groups = complex_data.groupby('complex_building_name')
            
            for building_name, building_data in building_groups:
                if pd.isna(building_name) or str(building_name).strip() == '':
                    building_name = '–û—Å–Ω–æ–≤–Ω–æ–π –∫–æ—Ä–ø—É—Å'
                    
                print(f"        üè¢ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ—Ä–ø—É—Å–∞: {building_name}")
                
                # 3. –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –Ω–∞—Ö–æ–¥–∏–º –∫–æ—Ä–ø—É—Å/–ª–∏—Ç–µ—Ä
                building = Building.query.filter_by(
                    name=building_name,
                    complex_id=complex_obj.id
                ).first()
                
                if not building:
                    first_building_row = building_data.iloc[0]
                    
                    building = Building(
                        name=building_name,
                        slug=generate_slug(building_name),
                        complex_id=complex_obj.id,
                        
                        # –î–∞–Ω–Ω—ã–µ –∏–∑ –ø–∞—Ä—Å–µ—Ä–∞
                        building_id=safe_str(first_building_row['complex_building_id']),
                        building_name=safe_str(first_building_row['complex_building_name']),
                        released=bool(safe_get(first_building_row, 'complex_building_released', False)),
                        is_unsafe=bool(safe_get(first_building_row, 'complex_building_is_unsafe', False)),
                        has_accreditation=bool(safe_get(first_building_row, 'complex_building_accreditation', False)),
                        has_green_mortgage=bool(safe_get(first_building_row, 'complex_building_has_green_mortgage', False)),
                        
                        end_build_year=safe_int(first_building_row['complex_building_end_build_year']),
                        end_build_quarter=safe_int(first_building_row['complex_building_end_build_quarter']),
                        complex_product=safe_str(first_building_row['complex_building_complex_product']),
                        
                        total_apartments=len(building_data),
                        created_at=datetime.utcnow()
                    )
                    db.session.add(building)
                    db.session.flush()
                    stats['buildings'] += 1
                    print(f"          ‚úÖ –°–æ–∑–¥–∞–Ω –∫–æ—Ä–ø—É—Å: {building_name}")
                
                # 4. –°–æ–∑–¥–∞–µ–º –∫–≤–∞—Ä—Ç–∏—Ä—ã
                for _, apartment_row in building_data.iterrows():
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–∞—è –∫–≤–∞—Ä—Ç–∏—Ä–∞
                    existing_property = Property.query.filter_by(
                        building_id=building.id,
                        rooms=safe_int(apartment_row['object_rooms']),
                        area=safe_float(apartment_row['object_area']),
                        price=safe_float(apartment_row['price'])
                    ).first()
                    
                    if not existing_property:
                        # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π slug –¥–ª—è –∫–≤–∞—Ä—Ç–∏—Ä—ã
                        property_title = f"{safe_int(apartment_row['object_rooms'])}-–∫–æ–º–Ω–∞—Ç–Ω–∞—è –∫–≤–∞—Ä—Ç–∏—Ä–∞ –≤ {building_name}"
                        property_slug = f"{generate_slug(property_title)}-{apartment_row['inner_id']}"
                        
                        property_obj = Property(
                            # –°–≤—è–∑–∏
                            building_id=building.id,
                            residential_complex_id=complex_obj.id,
                            developer_id=developer.id,
                            
                            # –û—Å–Ω–æ–≤–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
                            title=property_title,
                            slug=property_slug,
                            rooms=safe_int(apartment_row['object_rooms']),
                            area=safe_float(apartment_row['object_area']),
                            price=safe_float(apartment_row['price']),
                            price_per_sqm=safe_float(apartment_row['square_price']),
                            
                            # –≠—Ç–∞–∂–Ω–æ—Å—Ç—å
                            floor=safe_int(apartment_row['object_min_floor']),
                            total_floors=safe_int(apartment_row['object_max_floor']),
                            
                            # –ê–¥—Ä–µ—Å
                            address=safe_str(apartment_row['address_display_name']),
                            latitude=safe_float(apartment_row['address_position_lat']),
                            longitude=safe_float(apartment_row['address_position_lon']),
                            
                            # –†–µ–º–æ–Ω—Ç
                            renovation_type=safe_str(apartment_row['renovation_type']),
                            
                            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –ø–∞—Ä—Å–µ—Ä–∞
                            inner_id=safe_str(apartment_row['inner_id']),
                            url=safe_str(apartment_row['url']),
                            is_apartment=bool(safe_get(apartment_row, 'object_is_apartment', True)),
                            
                            # –ò–ø–æ—Ç–µ–∫–∞ –∏ —Å–¥–µ–ª–∫–∏
                            mortgage_price=safe_float(apartment_row['mortgage_price']),
                            min_rate=safe_float(apartment_row['min_rate']),
                            deal_type=safe_str(apartment_row['deal_type']),
                            
                            created_at=datetime.utcnow()
                        )
                        db.session.add(property_obj)
                        stats['properties'] += 1
                
                print(f"          üìä –î–æ–±–∞–≤–ª–µ–Ω–æ –∫–≤–∞—Ä—Ç–∏—Ä: {len(building_data)}")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
    db.session.commit()
    
    print(f"\nüéâ –ò–ú–ü–û–†–¢ –ó–ê–í–ï–†–®–ï–ù!")
    print(f"üìà –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
    print(f"  ‚Ä¢ –ó–∞—Å—Ç—Ä–æ–π—â–∏–∫–∏: {stats['developers']}")
    print(f"  ‚Ä¢ –ñ–∏–ª—ã–µ –∫–æ–º–ø–ª–µ–∫—Å—ã: {stats['complexes']}")
    print(f"  ‚Ä¢ –ö–æ—Ä–ø—É—Å–∞/–ª–∏—Ç–µ—Ä—ã: {stats['buildings']}")
    print(f"  ‚Ä¢ –ö–≤–∞—Ä—Ç–∏—Ä—ã: {stats['properties']}")
    
    return stats

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    with app.app_context():
        excel_file = 'attached_assets/–°–æ—á–∏_1756306374885.xlsx'
        
        if not os.path.exists(excel_file):
            print(f"‚ùå –§–∞–π–ª {excel_file} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            return
        
        try:
            stats = import_hierarchy_from_parser(excel_file)
            
            print(f"\n‚úÖ –ò–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
            print(f"–í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {sum(stats.values())} –æ–±—ä–µ–∫—Ç–æ–≤")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
            import traceback
            traceback.print_exc()
            db.session.rollback()

if __name__ == "__main__":
    main()