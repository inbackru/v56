#!/usr/bin/env python3
"""
üöÄ –§–ò–ù–ê–õ–¨–ù–´–ô –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò–ô –ò–ú–ü–û–†–¢ –ì–ï–û–î–ê–ù–ù–´–•
–ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç —Ä–∞–π–æ–Ω—ã –∏ —É–ª–∏—Ü—ã —á–µ—Ä–µ–∑ PostgreSQL COPY (–º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å)

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
    python3 import_geo_data.py              # –ò–º–ø–æ—Ä—Ç –≤—Å–µ–≥–æ
    python3 import_geo_data.py --districts  # –¢–æ–ª—å–∫–æ —Ä–∞–π–æ–Ω—ã
    python3 import_geo_data.py --streets    # –¢–æ–ª—å–∫–æ —É–ª–∏—Ü—ã
"""
import pandas as pd
import os
import sys
from app import app, db
from sqlalchemy import text
from io import StringIO

def import_districts():
    """–ò–º–ø–æ—Ä—Ç —Ä–∞–π–æ–Ω–æ–≤ —á–µ—Ä–µ–∑ COPY"""
    
    excel_file = 'attached_assets/districts (7)_1759430222840.xlsx'
    
    if not os.path.exists(excel_file):
        print(f"‚ùå –§–∞–π–ª {excel_file} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return False
    
    print(f"\n{'='*60}")
    print(f"üìç –ò–ú–ü–û–†–¢ –†–ê–ô–û–ù–û–í (PostgreSQL COPY)")
    print(f"{'='*60}")
    
    try:
        # –ß–∏—Ç–∞–µ–º Excel
        print(f"üìÇ –ó–∞–≥—Ä—É–∑–∫–∞: {excel_file}")
        df = pd.read_excel(excel_file)
        print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ: {len(df)} —Ä–∞–π–æ–Ω–æ–≤")
        
        with app.app_context():
            # –û—á–∏—Å—Ç–∫–∞
            print("üóëÔ∏è  –û—á–∏—Å—Ç–∫–∞ —Ç–∞–±–ª–∏—Ü—ã districts...")
            db.session.execute(text("DELETE FROM districts"))
            db.session.commit()
            
            # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
            print("üì• –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö...")
            df_clean = df.where(pd.notna(df), None)
            
            columns_order = [
                'id', 'name', 'slug', 'latitude', 'longitude', 'zoom_level',
                'distance_to_center', 'infrastructure_data', 'description'
            ]
            
            # CSV –≤ –ø–∞–º—è—Ç–∏
            csv_buffer = StringIO()
            
            for _, row in df_clean.iterrows():
                values = []
                for col in columns_order:
                    val = row.get(col)
                    if pd.isna(val) or val is None:
                        values.append('\\N')
                    elif isinstance(val, (int, float)):
                        values.append(str(val))
                    else:
                        val_str = str(val).replace('\\', '\\\\').replace('\t', '\\t').replace('\n', '\\n').replace('\r', '\\r')
                        values.append(val_str)
                
                csv_buffer.write('\t'.join(values) + '\n')
            
            csv_buffer.seek(0)
            
            # COPY
            print("‚ö° –ó–∞–ø—É—Å–∫ COPY FROM...")
            raw_conn = db.session.connection().connection
            cursor = raw_conn.cursor()
            
            copy_sql = f"""
                COPY districts (
                    id, name, slug, latitude, longitude, zoom_level,
                    distance_to_center, infrastructure_data, description
                )
                FROM STDIN WITH (FORMAT TEXT, DELIMITER E'\\t', NULL '\\N')
            """
            
            cursor.copy_expert(copy_sql, csv_buffer)
            raw_conn.commit()
            
            # –û–±–Ω–æ–≤–ª—è–µ–º sequence
            max_id = db.session.execute(text("SELECT MAX(id) FROM districts")).scalar()
            if max_id:
                db.session.execute(text(f"SELECT setval('districts_id_seq', {max_id}, true)"))
                db.session.commit()
            
            count = db.session.execute(text("SELECT COUNT(*) FROM districts")).scalar()
            
            print(f"\n‚úÖ –†–∞–π–æ–Ω–æ–≤ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ: {count}")
            return True
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return False

def import_streets():
    """–ò–º–ø–æ—Ä—Ç —É–ª–∏—Ü —á–µ—Ä–µ–∑ COPY"""
    
    excel_file = 'attached_assets/streets (2)_1759430222839.xlsx'
    
    if not os.path.exists(excel_file):
        print(f"‚ùå –§–∞–π–ª {excel_file} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return False
    
    print(f"\n{'='*60}")
    print(f"üõ£Ô∏è  –ò–ú–ü–û–†–¢ –£–õ–ò–¶ (PostgreSQL COPY)")
    print(f"{'='*60}")
    
    try:
        # –ß–∏—Ç–∞–µ–º Excel
        print(f"üìÇ –ó–∞–≥—Ä—É–∑–∫–∞: {excel_file}")
        df = pd.read_excel(excel_file)
        print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ: {len(df)} —É–ª–∏—Ü")
        
        with app.app_context():
            # –û—á–∏—Å—Ç–∫–∞
            print("üóëÔ∏è  –û—á–∏—Å—Ç–∫–∞ —Ç–∞–±–ª–∏—Ü—ã streets...")
            db.session.execute(text("DELETE FROM streets"))
            db.session.commit()
            
            # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
            print("üì• –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö...")
            df_clean = df.where(pd.notna(df), None)
            
            columns_order = [
                'id', 'name', 'slug', 'district_id', 'latitude', 'longitude', 
                'zoom_level', 'street_type', 'distance_to_center', 
                'infrastructure_data', 'description'
            ]
            
            # CSV –≤ –ø–∞–º—è—Ç–∏
            csv_buffer = StringIO()
            
            for _, row in df_clean.iterrows():
                values = []
                for col in columns_order:
                    val = row.get(col)
                    if pd.isna(val) or val is None:
                        values.append('\\N')
                    elif isinstance(val, (int, float)):
                        values.append(str(val))
                    else:
                        val_str = str(val).replace('\\', '\\\\').replace('\t', '\\t').replace('\n', '\\n').replace('\r', '\\r')
                        values.append(val_str)
                
                csv_buffer.write('\t'.join(values) + '\n')
            
            csv_buffer.seek(0)
            
            # COPY
            print("‚ö° –ó–∞–ø—É—Å–∫ COPY FROM...")
            raw_conn = db.session.connection().connection
            cursor = raw_conn.cursor()
            
            copy_sql = f"""
                COPY streets (
                    id, name, slug, district_id, latitude, longitude, zoom_level,
                    street_type, distance_to_center, infrastructure_data, description
                )
                FROM STDIN WITH (FORMAT TEXT, DELIMITER E'\\t', NULL '\\N')
            """
            
            cursor.copy_expert(copy_sql, csv_buffer)
            raw_conn.commit()
            
            # –û–±–Ω–æ–≤–ª—è–µ–º sequence
            max_id = db.session.execute(text("SELECT MAX(id) FROM streets")).scalar()
            if max_id:
                db.session.execute(text(f"SELECT setval('streets_id_seq', {max_id}, true)"))
                db.session.commit()
            
            count = db.session.execute(text("SELECT COUNT(*) FROM streets")).scalar()
            
            print(f"\n‚úÖ –£–ª–∏—Ü –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ: {count}")
            return True
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return False

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    
    print(f"\n{'='*60}")
    print(f"üöÄ –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò–ô –ò–ú–ü–û–†–¢ –ì–ï–û–î–ê–ù–ù–´–•")
    print(f"{'='*60}")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
    if len(sys.argv) > 1:
        if '--districts' in sys.argv:
            import_districts()
            return
        elif '--streets' in sys.argv:
            import_streets()
            return
    
    # –ü–æ–ª–Ω—ã–π –∏–º–ø–æ—Ä—Ç
    districts_ok = import_districts()
    streets_ok = import_streets()
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    print(f"\n{'='*60}")
    print(f"üìä –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê")
    print(f"{'='*60}")
    
    with app.app_context():
        districts_count = db.session.execute(text("SELECT COUNT(*) FROM districts")).scalar()
        streets_count = db.session.execute(text("SELECT COUNT(*) FROM streets")).scalar()
        
        print(f"‚úÖ –†–∞–π–æ–Ω–æ–≤ –≤ –ë–î: {districts_count}")
        print(f"‚úÖ –£–ª–∏—Ü –≤ –ë–î: {streets_count}")
    
    print(f"\n{'='*60}")
    if districts_ok and streets_ok:
        print(f"‚úÖ –ò–ú–ü–û–†–¢ –ó–ê–í–ï–†–®–ï–ù –£–°–ü–ï–®–ù–û!")
    else:
        print(f"‚ö†Ô∏è  –ò–ú–ü–û–†–¢ –ó–ê–í–ï–†–®–ï–ù –° –û–®–ò–ë–ö–ê–ú–ò")
    print(f"{'='*60}\n")

if __name__ == '__main__':
    main()
