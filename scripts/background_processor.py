#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import os
import sys
import json
import time
import logging
import threading
import schedule
from sqlalchemy import create_engine, text
from sqlalchemy.orm import sessionmaker
import subprocess

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO, 
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler(),
        logging.FileHandler('background_processor.log')
    ]
)

class BackgroundProcessor:
    """–§–æ–Ω–æ–≤—ã–π –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö"""
    
    def __init__(self):
        self.database_url = os.environ.get('DATABASE_URL')
        self.running = False
        
    def check_database_connection(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö"""
        try:
            engine = create_engine(self.database_url)
            Session = sessionmaker(bind=engine)
            session = Session()
            session.execute(text("SELECT 1"))
            session.close()
            return True
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î: {e}")
            return False
    
    def get_statistics(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
        try:
            engine = create_engine(self.database_url)
            Session = sessionmaker(bind=engine)
            session = Session()
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞–π–æ–Ω–æ–≤
            districts_stats = session.execute(text("""
                SELECT 
                    COUNT(*) as total,
                    COUNT(CASE WHEN infrastructure_data IS NOT NULL THEN 1 END) as with_infra,
                    COUNT(CASE WHEN distance_to_center IS NOT NULL THEN 1 END) as with_distance
                FROM districts
            """)).fetchone()
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —É–ª–∏—Ü
            streets_stats = session.execute(text("""
                SELECT 
                    COUNT(*) as total,
                    COUNT(CASE WHEN latitude IS NOT NULL THEN 1 END) as with_coords
                FROM streets
            """)).fetchone()
            
            session.close()
            
            return {
                'districts': {
                    'total': districts_stats[0],
                    'with_infrastructure': districts_stats[1],
                    'with_distance': districts_stats[2],
                    'infra_percent': round(100.0 * districts_stats[1] / districts_stats[0], 1) if districts_stats[0] > 0 else 0,
                    'distance_percent': round(100.0 * districts_stats[2] / districts_stats[0], 1) if districts_stats[0] > 0 else 0
                },
                'streets': {
                    'total': streets_stats[0],
                    'with_coordinates': streets_stats[1],
                    'percent_complete': round(100.0 * streets_stats[1] / streets_stats[0], 1) if streets_stats[0] > 0 else 0,
                    'remaining': streets_stats[0] - streets_stats[1]
                }
            }
            
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            return None
    
    def process_districts_infrastructure(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ä–∞–π–æ–Ω–æ–≤"""
        logging.info("üèòÔ∏è –ó–∞–ø—É—Å–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ä–∞–π–æ–Ω–æ–≤")
        
        try:
            result = subprocess.run(
                [sys.executable, 'auto_infrastructure_update.py'],
                capture_output=True,
                text=True,
                timeout=1800  # 30 –º–∏–Ω—É—Ç
            )
            
            if result.returncode == 0:
                logging.info("‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ä–∞–π–æ–Ω–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
                return True
            else:
                logging.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã: {result.stderr}")
                return False
                
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞ –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã: {e}")
            return False
    
    def process_streets_coordinates(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç —É–ª–∏—Ü"""
        logging.info("üõ£Ô∏è –ó–∞–ø—É—Å–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç —É–ª–∏—Ü")
        
        try:
            result = subprocess.run(
                [sys.executable, 'auto_streets_coordinates.py'],
                capture_output=True,
                text=True,
                timeout=600  # 10 –º–∏–Ω—É—Ç
            )
            
            if result.returncode == 0:
                logging.info("‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç —É–ª–∏—Ü –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
                return True
            else:
                logging.warning(f"‚ö†Ô∏è –ü—Ä–æ—Ü–µ—Å—Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –∑–∞–≤–µ—Ä—à–∏–ª—Å—è: {result.stderr}")
                return True  # –≠—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ, –º–æ–∂–µ—Ç –Ω–µ –±—ã—Ç—å –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
                
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç: {e}")
            return False
    
    def scheduled_infrastructure_update(self):
        """–ü–ª–∞–Ω–æ–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã (—Ä–∞–∑ –≤ 6 —á–∞—Å–æ–≤)"""
        if not self.running:
            return
            
        stats = self.get_statistics()
        if stats and stats['districts']['infra_percent'] < 100:
            logging.info("‚è∞ –ü–ª–∞–Ω–æ–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ä–∞–π–æ–Ω–æ–≤")
            self.process_districts_infrastructure()
    
    def scheduled_streets_update(self):
        """–ü–ª–∞–Ω–æ–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç —É–ª–∏—Ü (–∫–∞–∂–¥—ã–µ 15 –º–∏–Ω—É—Ç)"""
        if not self.running:
            return
            
        stats = self.get_statistics()
        if stats and stats['streets']['percent_complete'] < 100:
            logging.info("‚è∞ –ü–ª–∞–Ω–æ–≤–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç —É–ª–∏—Ü")
            self.process_streets_coordinates()
    
    def print_status(self):
        """–í—ã–≤–æ–¥ —Ç–µ–∫—É—â–µ–≥–æ —Å—Ç–∞—Ç—É—Å–∞"""
        stats = self.get_statistics()
        if stats:
            logging.info("üìä –¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å:")
            logging.info(f"   üèòÔ∏è –†–∞–π–æ–Ω—ã: {stats['districts']['with_infrastructure']}/{stats['districts']['total']} ({stats['districts']['infra_percent']}%) —Å –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π")
            logging.info(f"   üõ£Ô∏è –£–ª–∏—Ü—ã: {stats['streets']['with_coordinates']}/{stats['streets']['total']} ({stats['streets']['percent_complete']}%) —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏")
            logging.info(f"   üìç –û—Å—Ç–∞–ª–æ—Å—å —É–ª–∏—Ü: {stats['streets']['remaining']}")
    
    def start(self):
        """–ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞"""
        if not self.check_database_connection():
            logging.error("‚ùå –ù–µ —É–¥–∞–µ—Ç—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
            return False
        
        self.running = True
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
        schedule.every(15).minutes.do(self.scheduled_streets_update)  # –£–ª–∏—Ü—ã –∫–∞–∂–¥—ã–µ 15 –º–∏–Ω—É—Ç
        schedule.every(6).hours.do(self.scheduled_infrastructure_update)  # –ò–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –∫–∞–∂–¥—ã–µ 6 —á–∞—Å–æ–≤
        schedule.every(1).hours.do(self.print_status)  # –°—Ç–∞—Ç—É—Å –∫–∞–∂–¥—ã–π —á–∞—Å
        
        logging.info("üöÄ –§–æ–Ω–æ–≤—ã–π –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä –∑–∞–ø—É—â–µ–Ω")
        self.print_status()
        
        # –ù–µ–º–µ–¥–ª–µ–Ω–Ω—ã–π –∑–∞–ø—É—Å–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        self.scheduled_infrastructure_update()
        self.scheduled_streets_update()
        
        # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª
        try:
            while self.running:
                schedule.run_pending()
                time.sleep(60)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
                
        except KeyboardInterrupt:
            logging.info("‚èπÔ∏è –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
        finally:
            self.running = False
            logging.info("üõë –§–æ–Ω–æ–≤—ã–π –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    
    def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ñ–æ–Ω–æ–≤–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞"""
        self.running = False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    processor = BackgroundProcessor()
    processor.start()

if __name__ == "__main__":
    main()