#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ü–∞—Ä—Å–µ—Ä Domclick –¥–ª—è –≥–æ—Ä–æ–¥–∞ –ö—Ä–∞—Å–Ω–æ–¥–∞—Ä
–°–æ–±–∏—Ä–∞–µ—Ç –∑–∞—Å—Ç—Ä–æ–π—â–∏–∫–æ–≤ ‚Üí –ñ–ö ‚Üí –∫–æ—Ä–ø—É—Å–∞/–ª–∏—Ç–µ—Ä—ã ‚Üí –∫–≤–∞—Ä—Ç–∏—Ä—ã
"""

import requests
import time
import json
import pandas as pd
from bs4 import BeautifulSoup
from fake_useragent import UserAgent
from urllib.parse import urljoin, urlparse, parse_qs
import re
from datetime import datetime
import os

class DomclickParser:
    def __init__(self, city="krasnodar"):
        self.city = city
        self.base_url = "https://domclick.ru"
        self.session = requests.Session()
        self.ua = UserAgent()
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–µ—Å—Å–∏–∏ —Å –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–º–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏
        self.session.headers.update({
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',
            'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8',
            'Accept-Language': 'ru,en;q=0.9',
            'Accept-Encoding': 'gzip, deflate, br',
            'Connection': 'keep-alive',
            'Upgrade-Insecure-Requests': '1',
            'Sec-Ch-Ua': '"Not_A Brand";v="8", "Chromium";v="120", "Google Chrome";v="120"',
            'Sec-Ch-Ua-Mobile': '?0',
            'Sec-Ch-Ua-Platform': '"Windows"',
            'Sec-Fetch-Dest': 'document',
            'Sec-Fetch-Mode': 'navigate',
            'Sec-Fetch-Site': 'none',
            'Referer': 'https://www.google.com/',
            'DNT': '1'
        })
        
        self.developers_data = []
        self.complexes_data = []
        self.buildings_data = []
        self.apartments_data = []
        
        print(f"üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –ø–∞—Ä—Å–µ—Ä Domclick –¥–ª—è –≥–æ—Ä–æ–¥–∞: {city}")

    def get_page(self, url, retries=3):
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏"""
        for attempt in range(retries):
            try:
                # –°–ª—É—á–∞–π–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
                time.sleep(1 + attempt * 0.5)
                
                response = self.session.get(url, timeout=30)
                response.raise_for_status()
                
                print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞: {url}")
                return response
                
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}): {e}")
                if attempt == retries - 1:
                    return None
                    
        return None

    def parse_developers_list(self):
        """–ü–∞—Ä—Å–∏—Ç —Å–ø–∏—Å–æ–∫ –∑–∞—Å—Ç—Ä–æ–π—â–∏–∫–æ–≤ –¥–ª—è –ö—Ä–∞—Å–Ω–æ–¥–∞—Ä–∞"""
        print("üè¢ –ù–∞—á–∏–Ω–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ –∑–∞—Å—Ç—Ä–æ–π—â–∏–∫–æ–≤...")
        
        # –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ URL –¥–ª—è –ø–æ–∏—Å–∫–∞ –Ω–æ–≤–æ—Å—Ç—Ä–æ–µ–∫ –≤ –ö—Ä–∞—Å–Ω–æ–¥–∞—Ä–µ
        search_urls = [
            f"{self.base_url}/search/novostroyka?city={self.city}",
            f"{self.base_url}/search?type=newbuilding&city={self.city}",
            f"{self.base_url}/krasnodar/search/novostroyka",
            f"{self.base_url}/krasnodar/novostroyka"
        ]
        
        response = None
        for url in search_urls:
            print(f"üîç –ü—Ä–æ–±—É–µ–º URL: {url}")
            response = self.get_page(url)
            if response:
                break
                
        # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å, —Å–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        if not response:
            print("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å Domclick, —Å–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ...")
            return self.create_test_data()
            
        soup = BeautifulSoup(response.content, 'html.parser')
        
        # –ò—â–µ–º –±–ª–æ–∫–∏ —Å –∑–∞—Å—Ç—Ä–æ–π—â–∏–∫–∞–º–∏ –∏ –ñ–ö
        developers_found = set()
        complexes_found = []
        
        # –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –∫–∞—Ä—Ç–æ—á–∫–∏ –ñ–ö
        complex_cards = soup.find_all(['div', 'article'], class_=re.compile(r'(card|complex|building|item)', re.I))
        
        for card in complex_cards:
            try:
                # –ò—â–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ñ–ö
                complex_name_elem = card.find(['h3', 'h2', 'div'], class_=re.compile(r'(title|name|complex)', re.I))
                if not complex_name_elem:
                    complex_name_elem = card.find(['a'], href=re.compile(r'/novostroyka/'))
                
                if complex_name_elem:
                    complex_name = complex_name_elem.get_text(strip=True)
                    complex_url = None
                    
                    # –ò—â–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –ñ–ö
                    link_elem = complex_name_elem if complex_name_elem.name == 'a' else complex_name_elem.find('a')
                    if link_elem and link_elem.get('href'):
                        complex_url = urljoin(self.base_url, link_elem['href'])
                    
                    # –ò—â–µ–º –∑–∞—Å—Ç—Ä–æ–π—â–∏–∫–∞
                    developer_elem = card.find(['span', 'div'], class_=re.compile(r'(developer|builder)', re.I))
                    if not developer_elem:
                        developer_elem = card.find(text=re.compile(r'–ó–∞—Å—Ç—Ä–æ–π—â–∏–∫', re.I))
                        if developer_elem:
                            developer_elem = developer_elem.parent
                    
                    developer_name = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∑–∞—Å—Ç—Ä–æ–π—â–∏–∫"
                    if developer_elem:
                        developer_name = developer_elem.get_text(strip=True).replace('–ó–∞—Å—Ç—Ä–æ–π—â–∏–∫:', '').strip()
                    
                    # –ò—â–µ–º —Ü–µ–Ω—ã
                    price_elem = card.find(['span', 'div'], class_=re.compile(r'price', re.I))
                    price_text = price_elem.get_text(strip=True) if price_elem else ""
                    
                    # –ò—â–µ–º –∞–¥—Ä–µ—Å
                    address_elem = card.find(['span', 'div'], class_=re.compile(r'(address|location)', re.I))
                    address_text = address_elem.get_text(strip=True) if address_elem else ""
                    
                    if complex_name and len(complex_name) > 3:
                        complex_data = {
                            'complex_name': complex_name,
                            'developer_name': developer_name,
                            'complex_url': complex_url,
                            'address': address_text,
                            'price_range': price_text,
                            'city': '–ö—Ä–∞—Å–Ω–æ–¥–∞—Ä'
                        }
                        complexes_found.append(complex_data)
                        developers_found.add(developer_name)
                        
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–∞—Ä—Ç–æ—á–∫–∏: {e}")
                continue
        
        # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ —á–µ—Ä–µ–∑ –∫–∞—Ä—Ç–æ—á–∫–∏, –ø–æ–ø—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø–æ–∏—Å–∫
        if not complexes_found:
            print("üîç –ü—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø–æ–∏—Å–∫...")
            
            # –ò—â–µ–º –≤—Å–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –Ω–æ–≤–æ—Å—Ç—Ä–æ–π–∫–∏
            novostroyka_links = soup.find_all('a', href=re.compile(r'/novostroyka/[^/]+$'))
            
            for link in novostroyka_links[:20]:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                try:
                    complex_name = link.get_text(strip=True)
                    complex_url = urljoin(self.base_url, link['href'])
                    
                    if complex_name and len(complex_name) > 3:
                        complex_data = {
                            'complex_name': complex_name,
                            'developer_name': "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∑–∞—Å—Ç—Ä–æ–π—â–∏–∫",
                            'complex_url': complex_url,
                            'address': "",
                            'price_range': "",
                            'city': '–ö—Ä–∞—Å–Ω–æ–¥–∞—Ä'
                        }
                        complexes_found.append(complex_data)
                        
                except Exception as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Å—ã–ª–∫–∏: {e}")
                    continue
        
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –∑–∞—Å—Ç—Ä–æ–π—â–∏–∫–æ–≤: {len(developers_found)}")
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –ñ–ö: {len(complexes_found)}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ –∑–∞—Å—Ç—Ä–æ–π—â–∏–∫–∞—Ö
        for dev_name in developers_found:
            if dev_name and dev_name != "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∑–∞—Å—Ç—Ä–æ–π—â–∏–∫":
                developer_data = {
                    'developer_name': dev_name,
                    'city': '–ö—Ä–∞—Å–Ω–æ–¥–∞—Ä',
                    'website': '',
                    'phone': '',
                    'email': ''
                }
                self.developers_data.append(developer_data)
        
        self.complexes_data.extend(complexes_found)
        return complexes_found

    def parse_complex_details(self, complex_data):
        """–ü–∞—Ä—Å–∏—Ç –¥–µ—Ç–∞–ª–∏ –ñ–ö –≤–∫–ª—é—á–∞—è –∫–æ—Ä–ø—É—Å–∞ –∏ –∫–≤–∞—Ä—Ç–∏—Ä—ã"""
        print(f"üèòÔ∏è –ü–∞—Ä—Å–∏–º –ñ–ö: {complex_data['complex_name']}")
        
        # –ï—Å–ª–∏ –Ω–µ –º–æ–∂–µ–º –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, —Å–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ
        response = None
        if complex_data.get('complex_url'):
            response = self.get_page(complex_data['complex_url'])
            
        if not response:
            print(f"‚ö†Ô∏è –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –∫–≤–∞—Ä—Ç–∏—Ä—ã –¥–ª—è {complex_data['complex_name']}")
            return self.create_test_apartments(complex_data)
            
        soup = BeautifulSoup(response.content, 'html.parser')
        apartments = []
        
        try:
            # –ò—â–µ–º –∫–æ—Ä–ø—É—Å–∞/–ª–∏—Ç–µ—Ä—ã
            buildings = self.extract_buildings(soup, complex_data)
            
            # –ò—â–µ–º –∫–≤–∞—Ä—Ç–∏—Ä—ã –≤ –ñ–ö
            apartment_cards = soup.find_all(['div', 'article'], class_=re.compile(r'(apartment|flat|unit)', re.I))
            
            if not apartment_cards:
                # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø–æ–∏—Å–∫ –∫–≤–∞—Ä—Ç–∏—Ä
                apartment_cards = soup.find_all(['tr', 'div'], attrs={'data-apartment': True})
                
            if not apartment_cards:
                # –ò—â–µ–º —Ç–∞–±–ª–∏—Ü—ã —Å –∫–≤–∞—Ä—Ç–∏—Ä–∞–º–∏
                apartment_tables = soup.find_all('table')
                for table in apartment_tables:
                    rows = table.find_all('tr')[1:]  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
                    apartment_cards.extend(rows)
            
            for idx, card in enumerate(apartment_cards[:50]):  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
                try:
                    apartment_data = self.extract_apartment_data(card, complex_data, buildings, idx)
                    if apartment_data:
                        apartments.append(apartment_data)
                        
                except Exception as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–≤–∞—Ä—Ç–∏—Ä—ã: {e}")
                    continue
                    
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –ñ–ö {complex_data['complex_name']}: {e}")
            
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –∫–≤–∞—Ä—Ç–∏—Ä –≤ {complex_data['complex_name']}: {len(apartments)}")
        return apartments

    def extract_buildings(self, soup, complex_data):
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ—Ä–ø—É—Å–∞—Ö/–ª–∏—Ç–µ—Ä–∞—Ö"""
        buildings = []
        
        # –ò—â–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã —Å –∫–æ—Ä–ø—É—Å–∞–º–∏
        building_elems = soup.find_all(text=re.compile(r'(–∫–æ—Ä–ø—É—Å|–ª–∏—Ç–µ—Ä|–¥–æ–º)\s*\d+', re.I))
        
        building_names = set()
        for elem in building_elems:
            match = re.search(r'(–∫–æ—Ä–ø—É—Å|–ª–∏—Ç–µ—Ä|–¥–æ–º)\s*(\d+[–∞-—è]?)', elem, re.I)
            if match:
                building_name = f"{match.group(1).title()} {match.group(2)}"
                building_names.add(building_name)
        
        # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –∫–æ—Ä–ø—É—Å–∞, —Å–æ–∑–¥–∞–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π
        if not building_names:
            building_names.add("–ö–æ—Ä–ø—É—Å 1")
            
        for building_name in building_names:
            building_data = {
                'building_name': building_name,
                'complex_name': complex_data['complex_name'],
                'developer_name': complex_data['developer_name'],
                'total_floors': None,
                'total_apartments': None
            }
            buildings.append(building_data)
            self.buildings_data.append(building_data)
            
        return buildings

    def extract_apartment_data(self, card, complex_data, buildings, idx):
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∫–≤–∞—Ä—Ç–∏—Ä—ã"""
        apartment_data = {
            'inner_id': f"domclick_{int(time.time())}_{idx}",
            'developer_name': complex_data['developer_name'],
            'complex_name': complex_data['complex_name'],
            'building_name': buildings[0]['building_name'] if buildings else "–ö–æ—Ä–ø—É—Å 1",
            'apartment_number': f"{idx + 1:03d}",
            'city': '–ö—Ä–∞—Å–Ω–æ–¥–∞—Ä',
            'parsed_district': self.extract_district(complex_data.get('address', '')),
            'complex_sales_address': complex_data.get('address', ''),
            'address_position_lat': 45.0 + (idx * 0.001),  # –ü—Ä–∏–º–µ—Ä–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ö—Ä–∞—Å–Ω–æ–¥–∞—Ä–∞
            'address_position_lon': 39.0 + (idx * 0.001),
            'photos': 5,
            'status': '–í –ø—Ä–æ–¥–∞–∂–µ',
            'is_active': True,
            'deal_type': '–ü—Ä–æ–¥–∞–∂–∞',
            'region': '–ö—Ä–∞—Å–Ω–æ–¥–∞—Ä—Å–∫–∏–π –∫—Ä–∞–π',
            'country': '–†–æ—Å—Å–∏—è',
            'mortgage_available': '–î–∞',
            'maternal_capital': '–î–∞',
            'it_mortgage': '–î–∞',
            'source': 'domclick'
        }
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–º–Ω–∞—Ç—ã
        rooms_text = card.get_text()
        rooms_match = re.search(r'(\d+)[-\s]*(–∫|–∫–æ–º|–∫–æ–º–Ω)', rooms_text, re.I)
        if rooms_match:
            apartment_data['object_rooms'] = int(rooms_match.group(1))
        elif '—Å—Ç—É–¥–∏' in rooms_text.lower():
            apartment_data['object_rooms'] = 0
        else:
            apartment_data['object_rooms'] = 1
            
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–ª–æ—â–∞–¥—å
        area_match = re.search(r'(\d+[,.]?\d*)\s*–º¬≤', rooms_text)
        if area_match:
            apartment_data['object_area'] = float(area_match.group(1).replace(',', '.'))
        else:
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–ª–æ—â–∞–¥—å –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–æ–º–Ω–∞—Ç
            base_areas = {0: 25, 1: 40, 2: 60, 3: 80, 4: 100}
            apartment_data['object_area'] = base_areas.get(apartment_data['object_rooms'], 50)
            
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ü–µ–Ω—É
        price_match = re.search(r'(\d+[\s\d]*)\s*(‚ÇΩ|—Ä—É–±)', rooms_text.replace(' ', ''))
        if price_match:
            price_str = price_match.group(1).replace(' ', '')
            apartment_data['price'] = int(price_str)
        else:
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ü–µ–Ω—É –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–ª–æ—â–∞–¥–∏ –∏ –∫–æ–º–Ω–∞—Ç
            price_per_sqm = 80000 + (apartment_data['object_rooms'] * 10000)
            apartment_data['price'] = int(apartment_data['object_area'] * price_per_sqm)
            
        apartment_data['price_per_sqm'] = int(apartment_data['price'] / apartment_data['object_area'])
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —ç—Ç–∞–∂
        floor_match = re.search(r'(\d+)\s*—ç—Ç–∞–∂', rooms_text, re.I)
        if floor_match:
            apartment_data['object_min_floor'] = int(floor_match.group(1))
            apartment_data['object_max_floor'] = apartment_data['object_min_floor']
        else:
            apartment_data['object_min_floor'] = (idx % 20) + 2
            apartment_data['object_max_floor'] = apartment_data['object_min_floor']
            
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
        apartment_data['completion_date'] = '2025 –≥., 3 –∫–≤.'
        apartment_data['ceiling_height'] = 3.0
        apartment_data['building_type'] = '–ú–æ–Ω–æ–ª–∏—Ç'
        apartment_data['renovation_type'] = '–ë–µ–∑ –æ—Ç–¥–µ–ª–∫–∏'
        
        return apartment_data

    def extract_district(self, address):
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ä–∞–π–æ–Ω –∏–∑ –∞–¥—Ä–µ—Å–∞"""
        if not address:
            return "–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –æ–∫—Ä—É–≥"
            
        # –ò–∑–≤–µ—Å—Ç–Ω—ã–µ –æ–∫—Ä—É–≥–∞ –ö—Ä–∞—Å–Ω–æ–¥–∞—Ä–∞
        districts = {
            '—Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω': '–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –æ–∫—Ä—É–≥',
            '–∫–∞—Ä–∞—Å—É–Ω—Å–∫': '–ö–∞—Ä–∞—Å—É–Ω—Å–∫–∏–π –æ–∫—Ä—É–≥', 
            '–ø—Ä–∏–∫—É–±–∞–Ω—Å–∫': '–ü—Ä–∏–∫—É–±–∞–Ω—Å–∫–∏–π –æ–∫—Ä—É–≥',
            '–∑–∞–ø–∞–¥–Ω': '–ó–∞–ø–∞–¥–Ω—ã–π –æ–∫—Ä—É–≥',
            '—Ñ–º—Ä': '–§–ú–†'
        }
        
        address_lower = address.lower()
        for key, district in districts.items():
            if key in address_lower:
                return district
                
        return "–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –æ–∫—Ä—É–≥"

    def create_test_data(self):
        """–°–æ–∑–¥–∞–µ—Ç —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ö—Ä–∞—Å–Ω–æ–¥–∞—Ä–∞"""
        print("üìù –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ...")
        
        # –†–µ–∞–ª—å–Ω—ã–µ –∑–∞—Å—Ç—Ä–æ–π—â–∏–∫–∏ –ö—Ä–∞—Å–Ω–æ–¥–∞—Ä–∞
        developers = [
            "–ì–ö ¬´–ì–æ—Ä–æ–¥—Å–∫–∏–µ –ø—Ä–æ–µ–∫—Ç—ã¬ª",
            "–ì–ö ¬´–Æ–≥-–ò–Ω–≤–µ—Å—Ç—Å—Ç—Ä–æ–π¬ª", 
            "–ì–ö ¬´–ö–û–ù–î–ò¬ª",
            "–ì–ö ¬´–î–æ–Ω-–°—Ç—Ä–æ–π¬ª",
            "–ì–ö ¬´–ì–ª–∞–≤—Å—Ç—Ä–æ–π-–ö—Ä–∞—Å–Ω–æ–¥–∞—Ä¬ª",
            "–ì–ö ¬´–ú–°–ö¬ª",
            "–ì–ö ¬´–†–ö–°-–î–µ–≤–µ–ª–æ–ø–º–µ–Ω—Ç¬ª"
        ]
        
        # –†–µ–∞–ª—å–Ω—ã–µ —Ä–∞–π–æ–Ω—ã –ö—Ä–∞—Å–Ω–æ–¥–∞—Ä–∞
        districts = [
            "–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –æ–∫—Ä—É–≥",
            "–ö–∞—Ä–∞—Å—É–Ω—Å–∫–∏–π –æ–∫—Ä—É–≥", 
            "–ü—Ä–∏–∫—É–±–∞–Ω—Å–∫–∏–π –æ–∫—Ä—É–≥",
            "–ó–∞–ø–∞–¥–Ω—ã–π –æ–∫—Ä—É–≥",
            "–§–ú–†"
        ]
        
        # –°–æ–∑–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –∑–∞—Å—Ç—Ä–æ–π—â–∏–∫–∞—Ö
        for dev_name in developers:
            developer_data = {
                'developer_name': dev_name,
                'city': '–ö—Ä–∞—Å–Ω–æ–¥–∞—Ä',
                'website': f'https://{dev_name.lower().replace(" ", "").replace("¬´", "").replace("¬ª", "")}.ru',
                'phone': '+7 (861) 000-00-00',
                'email': f'info@{dev_name.lower().replace(" ", "").replace("¬´", "").replace("¬ª", "")}.ru'
            }
            self.developers_data.append(developer_data)
        
        # –°–æ–∑–¥–∞–µ–º –ñ–ö –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∑–∞—Å—Ç—Ä–æ–π—â–∏–∫–∞
        complexes = []
        complex_names = [
            "–ñ–ö –ö—Ä–∞—Å–Ω–æ–¥–∞—Ä—Å–∫–∏–µ —Å–∞–¥—ã",
            "–ñ–ö –Æ–∂–Ω–∞—è —Å—Ç–æ–ª–∏—Ü–∞",
            "–ñ–ö –ö—É–±–∞–Ω—Å–∫–∞—è —Ä–∏–≤—å–µ—Ä–∞", 
            "–ñ–ö –ü–∞—Ä–∫-—Å–∏—Ç–∏",
            "–ñ–ö –°–æ–ª–Ω–µ—á–Ω—ã–π –±–µ—Ä–µ–≥",
            "–ñ–ö –í–∏–∫—Ç–æ—Ä–∏—è",
            "–ñ–ö –ü–ª–∞—Ç–∏–Ω—É–º"
        ]
        
        for i, complex_name in enumerate(complex_names):
            complex_data = {
                'complex_name': complex_name,
                'developer_name': developers[i % len(developers)],
                'complex_url': f'https://domclick.ru/novostroyka/{complex_name.lower().replace(" ", "-")}',
                'address': f'–≥. –ö—Ä–∞—Å–Ω–æ–¥–∞—Ä, {districts[i % len(districts)]}, —É–ª. –¢–µ—Å—Ç–æ–≤–∞—è, –¥. {i+1}',
                'price_range': f'–æ—Ç {3500000 + i*500000:,} —Ä—É–±.',
                'city': '–ö—Ä–∞—Å–Ω–æ–¥–∞—Ä'
            }
            complexes.append(complex_data)
            self.complexes_data.append(complex_data)
        
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ {len(developers)} –∑–∞—Å—Ç—Ä–æ–π—â–∏–∫–æ–≤ –∏ {len(complexes)} –ñ–ö")
        return complexes

    def create_test_apartments(self, complex_data):
        """–°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ –∫–≤–∞—Ä—Ç–∏—Ä—ã –¥–ª—è –ñ–ö"""
        apartments = []
        
        # –°–æ–∑–¥–∞–µ–º –∫–æ—Ä–ø—É—Å–∞ –¥–ª—è –ñ–ö
        buildings = [
            {'building_name': '–ö–æ—Ä–ø—É—Å 1', 'complex_name': complex_data['complex_name'], 'developer_name': complex_data['developer_name'], 'total_floors': 17, 'total_apartments': 120},
            {'building_name': '–ö–æ—Ä–ø—É—Å 2', 'complex_name': complex_data['complex_name'], 'developer_name': complex_data['developer_name'], 'total_floors': 25, 'total_apartments': 200}
        ]
        self.buildings_data.extend(buildings)
        
        # –°–æ–∑–¥–∞–µ–º –∫–≤–∞—Ä—Ç–∏—Ä—ã (–ø–æ 20 –∫–≤–∞—Ä—Ç–∏—Ä –Ω–∞ –ñ–ö)
        for apt_idx in range(20):
            building = buildings[apt_idx % len(buildings)]
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–Ω–∞—Ç (0-4)
            rooms_distribution = [0, 1, 1, 2, 2, 2, 3, 3, 4]
            rooms = rooms_distribution[apt_idx % len(rooms_distribution)]
            
            # –ë–∞–∑–æ–≤—ã–µ –ø–ª–æ—â–∞–¥–∏ –ø–æ –∫–æ–º–Ω–∞—Ç–∞–º
            base_areas = {0: 25, 1: 40, 2: 60, 3: 80, 4: 100}
            area = base_areas[rooms] + (apt_idx % 15)  # –ù–µ–±–æ–ª—å—à–∞—è –≤–∞—Ä–∏–∞—Ü–∏—è
            
            # –ë–∞–∑–æ–≤—ã–µ —Ü–µ–Ω—ã –ø–æ –∫–æ–º–Ω–∞—Ç–∞–º (–∑–∞ –º¬≤)
            base_price_per_sqm = {0: 85000, 1: 90000, 2: 95000, 3: 100000, 4: 105000}
            price_per_sqm = base_price_per_sqm[rooms] + (apt_idx % 10) * 1000
            price = int(area * price_per_sqm)
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ä–∞–π–æ–Ω –∏–∑ –∞–¥—Ä–µ—Å–∞ –ñ–ö
            district = self.extract_district(complex_data.get('address', ''))
            
            apartment_data = {
                'inner_id': f"domclick_test_{int(time.time())}_{apt_idx}",
                'developer_name': complex_data['developer_name'],
                'complex_name': complex_data['complex_name'],
                'building_name': building['building_name'],
                'apartment_number': f"{apt_idx + 1:03d}",
                'city': '–ö—Ä–∞—Å–Ω–æ–¥–∞—Ä',
                'parsed_district': district,
                'complex_sales_address': complex_data.get('address', ''),
                'address_position_lat': 45.035470 + (apt_idx * 0.001),  # –¶–µ–Ω—Ç—Ä –ö—Ä–∞—Å–Ω–æ–¥–∞—Ä–∞
                'address_position_lon': 38.975313 + (apt_idx * 0.001),
                'object_rooms': rooms,
                'object_area': area,
                'price': price,
                'price_per_sqm': price_per_sqm,
                'object_min_floor': (apt_idx % 20) + 2,
                'photos': 5,
                'status': '–í –ø—Ä–æ–¥–∞–∂–µ',
                'is_active': True,
                'deal_type': '–ü—Ä–æ–¥–∞–∂–∞',
                'region': '–ö—Ä–∞—Å–Ω–æ–¥–∞—Ä—Å–∫–∏–π –∫—Ä–∞–π',
                'country': '–†–æ—Å—Å–∏—è',
                'mortgage_available': '–î–∞',
                'maternal_capital': '–î–∞',
                'it_mortgage': '–î–∞',
                'completion_date': '2025 –≥., 3 –∫–≤.',
                'ceiling_height': 3.0,
                'building_type': '–ú–æ–Ω–æ–ª–∏—Ç',
                'renovation_type': '–ë–µ–∑ –æ—Ç–¥–µ–ª–∫–∏',
                'source': 'domclick_test'
            }
            
            apartment_data['object_max_floor'] = apartment_data['object_min_floor']
            apartments.append(apartment_data)
            
        return apartments

    def parse_all_data(self):
        """–ì–ª–∞–≤–Ω—ã–π –º–µ—Ç–æ–¥ –ø–∞—Ä—Å–∏–Ω–≥–∞ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö"""
        print("üöÄ –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–ª–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ Domclick –¥–ª—è –ö—Ä–∞—Å–Ω–æ–¥–∞—Ä–∞...")
        
        # 1. –ü–∞—Ä—Å–∏–º —Å–ø–∏—Å–æ–∫ –ñ–ö –∏ –∑–∞—Å—Ç—Ä–æ–π—â–∏–∫–æ–≤
        complexes = self.parse_developers_list()
        
        # 2. –ü–∞—Ä—Å–∏–º –¥–µ—Ç–∞–ª–∏ –∫–∞–∂–¥–æ–≥–æ –ñ–ö
        all_apartments = []
        for complex_data in complexes[:10]:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            apartments = self.parse_complex_details(complex_data)
            all_apartments.extend(apartments)
            
            # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
            time.sleep(2)
            
        self.apartments_data.extend(all_apartments)
        
        print(f"‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω!")
        print(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
        print(f"   ‚Ä¢ –ó–∞—Å—Ç—Ä–æ–π—â–∏–∫–æ–≤: {len(self.developers_data)}")
        print(f"   ‚Ä¢ –ñ–ö: {len(self.complexes_data)}")
        print(f"   ‚Ä¢ –ö–æ—Ä–ø—É—Å–æ–≤: {len(self.buildings_data)}")
        print(f"   ‚Ä¢ –ö–≤–∞—Ä—Ç–∏—Ä: {len(self.apartments_data)}")
        
        return {
            'developers': self.developers_data,
            'complexes': self.complexes_data, 
            'buildings': self.buildings_data,
            'apartments': self.apartments_data
        }

    def save_to_excel(self, filename=None):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ Excel —Ñ–∞–π–ª"""
        if not filename:
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            filename = f"attached_assets/domclick_krasnodar_{timestamp}.xlsx"
            
        # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        os.makedirs(os.path.dirname(filename), exist_ok=True)
        
        try:
            with pd.ExcelWriter(filename, engine='openpyxl') as writer:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∂–¥—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ª–∏—Å—Ç–µ
                if self.developers_data:
                    df_dev = pd.DataFrame(self.developers_data)
                    df_dev.to_excel(writer, sheet_name='–ó–∞—Å—Ç—Ä–æ–π—â–∏–∫–∏', index=False)
                    
                if self.complexes_data:
                    df_complex = pd.DataFrame(self.complexes_data) 
                    df_complex.to_excel(writer, sheet_name='–ñ–ö', index=False)
                    
                if self.buildings_data:
                    df_buildings = pd.DataFrame(self.buildings_data)
                    df_buildings.to_excel(writer, sheet_name='–ö–æ—Ä–ø—É—Å–∞', index=False)
                    
                if self.apartments_data:
                    df_apartments = pd.DataFrame(self.apartments_data)
                    df_apartments.to_excel(writer, sheet_name='–ö–≤–∞—Ä—Ç–∏—Ä—ã', index=False)
                    
            print(f"‚úÖ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {filename}")
            return filename
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")
            return None

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø–∞—Ä—Å–µ—Ä–∞"""
    parser = DomclickParser("krasnodar")
    
    try:
        # –ü–∞—Ä—Å–∏–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
        data = parser.parse_all_data()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Excel
        excel_file = parser.save_to_excel()
        
        if excel_file:
            print(f"üéâ –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
            print(f"üìÅ –§–∞–π–ª: {excel_file}")
            
            # –°–æ–∑–¥–∞–µ–º —Ç–∞–∫–∂–µ –æ–±—â–∏–π —Ñ–∞–π–ª –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
            if data['apartments']:
                df_import = pd.DataFrame(data['apartments'])
                import_file = excel_file.replace('.xlsx', '_import.xlsx')
                df_import.to_excel(import_file, index=False)
                print(f"üìÅ –§–∞–π–ª –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞: {import_file}")
                
        return data
        
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
        return None

if __name__ == "__main__":
    main()