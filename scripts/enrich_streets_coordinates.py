#!/usr/bin/env python3
"""
–û–±–æ–≥–∞—â–µ–Ω–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç —É–ª–∏—Ü —á–µ—Ä–µ–∑ Yandex Geocoder API
–ü–æ–ª—É—á–∞–µ—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–ª—è —É–ª–∏—Ü –±–µ–∑ –¥–∞–Ω–Ω—ã—Ö
"""
import os
import time
import requests
from app import app, db
from sqlalchemy import text

YANDEX_API_KEY = os.environ.get('YANDEX_MAPS_API_KEY')
GEOCODER_URL = 'https://geocode-maps.yandex.ru/1.x/'

def geocode_street(street_name, city="–ö—Ä–∞—Å–Ω–æ–¥–∞—Ä"):
    """–ü–æ–ª—É—á–∏—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —É–ª–∏—Ü—ã —á–µ—Ä–µ–∑ Yandex Geocoder"""
    
    if not YANDEX_API_KEY:
        print("‚ùå YANDEX_MAPS_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        return None
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π –∞–¥—Ä–µ—Å
    full_address = f"–†–æ—Å—Å–∏—è, –ö—Ä–∞—Å–Ω–æ–¥–∞—Ä—Å–∫–∏–π –∫—Ä–∞–π, {city}, {street_name}"
    
    params = {
        'apikey': YANDEX_API_KEY,
        'geocode': full_address,
        'format': 'json',
        'results': 1,
        'kind': 'street'  # –£–∫–∞–∑—ã–≤–∞–µ–º —á—Ç–æ –∏—â–µ–º –∏–º–µ–Ω–Ω–æ —É–ª–∏—Ü—É
    }
    
    try:
        response = requests.get(GEOCODER_URL, params=params, timeout=10)
        response.raise_for_status()
        
        data = response.json()
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
        try:
            geo_object = data['response']['GeoObjectCollection']['featureMember'][0]['GeoObject']
            coords = geo_object['Point']['pos'].split()
            
            # Yandex –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç longitude, latitude (–≤ –æ–±—Ä–∞—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ!)
            longitude = float(coords[0])
            latitude = float(coords[1])
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –≤ –ö—Ä–∞—Å–Ω–æ–¥–∞—Ä–µ
            # –ö—Ä–∞—Å–Ω–æ–¥–∞—Ä: –ø—Ä–∏–º–µ—Ä–Ω–æ 45.0 ¬± 0.2, 38.9 ¬± 0.3
            if not (44.8 <= latitude <= 45.2 and 38.6 <= longitude <= 39.3):
                print(f"  ‚ö†Ô∏è  –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤–Ω–µ –ö—Ä–∞—Å–Ω–æ–¥–∞—Ä–∞: {latitude:.6f}, {longitude:.6f}")
                return None
            
            return {
                'latitude': latitude,
                'longitude': longitude,
                'address': geo_object.get('metaDataProperty', {}).get('GeocoderMetaData', {}).get('text', full_address)
            }
        except (KeyError, IndexError) as e:
            print(f"  ‚ö†Ô∏è  –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è: {full_address}")
            return None
            
    except requests.RequestException as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è {full_address}: {e}")
        return None

def enrich_streets():
    """–û–±–æ–≥–∞—Ç–∏—Ç—å —É–ª–∏—Ü—ã –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏"""
    
    print(f"\n{'='*60}")
    print(f"üó∫Ô∏è  –û–ë–û–ì–ê–©–ï–ù–ò–ï –ö–û–û–†–î–ò–ù–ê–¢ –£–õ–ò–¶ (Yandex Geocoder)")
    print(f"{'='*60}\n")
    
    with app.app_context():
        # –ü–æ–ª—É—á–∞–µ–º —É–ª–∏—Ü—ã –±–µ–∑ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
        streets = db.session.execute(text("""
            SELECT id, name, slug 
            FROM streets 
            WHERE latitude IS NULL OR longitude IS NULL
            ORDER BY id
        """)).fetchall()
        
        total = len(streets)
        print(f"üìç –£–ª–∏—Ü –±–µ–∑ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç: {total}\n")
        
        if total == 0:
            print("‚úÖ –í—Å–µ —É–ª–∏—Ü—ã —É–∂–µ –∏–º–µ—é—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã!")
            return
        
        enriched = 0
        not_found = 0
        errors = 0
        
        print("üöÄ –ù–∞—á–∏–Ω–∞—é –æ–±–æ–≥–∞—â–µ–Ω–∏–µ...\n")
        
        for idx, street in enumerate(streets, 1):
            street_id = street[0]
            street_name = street[1]
            
            print(f"[{idx}/{total}] {street_name}...", end=" ")
            
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
            result = geocode_street(street_name)
            
            if result:
                # –û–±–Ω–æ–≤–ª—è–µ–º –ë–î
                try:
                    db.session.execute(text("""
                        UPDATE streets 
                        SET latitude = :lat, longitude = :lon
                        WHERE id = :id
                    """), {
                        'lat': result['latitude'],
                        'lon': result['longitude'],
                        'id': street_id
                    })
                    db.session.commit()
                    
                    print(f"‚úÖ ({result['latitude']:.6f}, {result['longitude']:.6f})")
                    enriched += 1
                    
                except Exception as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –ë–î: {e}")
                    errors += 1
                    db.session.rollback()
            else:
                print("‚ö†Ô∏è  –ù–µ –Ω–∞–π–¥–µ–Ω–æ")
                not_found += 1
            
            # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ (rate limiting)
            if idx < total:
                time.sleep(0.2)  # 5 –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ —Å–µ–∫—É–Ω–¥—É
        
        # –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        print(f"\n{'='*60}")
        print(f"üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´")
        print(f"{'='*60}")
        print(f"‚úÖ –û–±–æ–≥–∞—â–µ–Ω–æ: {enriched}")
        print(f"‚ö†Ô∏è  –ù–µ –Ω–∞–π–¥–µ–Ω–æ: {not_found}")
        print(f"‚ùå –û—à–∏–±–æ–∫: {errors}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        total_streets = db.session.execute(text("SELECT COUNT(*) FROM streets")).scalar()
        with_coords = db.session.execute(text("SELECT COUNT(*) FROM streets WHERE latitude IS NOT NULL")).scalar()
        
        print(f"\nüìç –£–ª–∏—Ü —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏: {with_coords}/{total_streets} ({with_coords*100//total_streets}%)")
        print(f"{'='*60}\n")

if __name__ == '__main__':
    enrich_streets()
