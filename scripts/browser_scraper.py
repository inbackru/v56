#!/usr/bin/env python3
"""
–ü–∞—Ä—Å–µ—Ä —Å —ç–º—É–ª—è—Ü–∏–µ–π –±—Ä–∞—É–∑–µ—Ä–∞ –¥–ª—è –æ–±—Ö–æ–¥–∞ –∑–∞—â–∏—Ç Qrator
"""

from selenium import webdriver
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.common.exceptions import TimeoutException, NoSuchElementException
from bs4 import BeautifulSoup
import time
import random
import logging
import undetected_chromedriver as uc

logger = logging.getLogger(__name__)

class BrowserScraper:
    """–ü–∞—Ä—Å–µ—Ä —Å —ç–º—É–ª—è—Ü–∏–µ–π –Ω–∞—Å—Ç–æ—è—â–µ–≥–æ –±—Ä–∞—É–∑–µ—Ä–∞"""
    
    def __init__(self, headless=True):
        self.driver = None
        self.headless = headless
        self._setup_browser()
    
    def _setup_browser(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±—Ä–∞—É–∑–µ—Ä–∞ —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —ç–º—É–ª—è—Ü–∏–µ–π —á–µ–ª–æ–≤–µ–∫–∞"""
        try:
            # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –æ–±—ã—á–Ω—ã–π Selenium —Å Chromium
            options = Options()
            
            if self.headless:
                options.add_argument('--headless=new')
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ
            options.add_argument('--no-sandbox')
            options.add_argument('--disable-dev-shm-usage')
            options.add_argument('--disable-gpu')
            options.add_argument('--remote-debugging-port=9222')
            
            # –≠–º—É–ª—è—Ü–∏—è –æ–±—ã—á–Ω–æ–≥–æ –±—Ä–∞—É–∑–µ—Ä–∞
            options.add_argument('--disable-blink-features=AutomationControlled')
            options.add_experimental_option("excludeSwitches", ["enable-automation"])
            options.add_experimental_option('useAutomationExtension', False)
            
            # User-Agent –∫–∞–∫ —É –Ω–∞—Å—Ç–æ—è—â–µ–≥–æ –±—Ä–∞—É–∑–µ—Ä–∞
            options.add_argument('--user-agent=Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36')
            
            # –†—É—Å—Å–∫–∞—è –ª–æ–∫–∞–ª—å
            options.add_argument('--lang=ru-RU')
            options.add_argument('--accept-lang=ru-RU,ru;q=0.9,en;q=0.8')
            
            # –†–∞–∑–º–µ—Ä –æ–∫–Ω–∞
            options.add_argument('--window-size=1920,1080')
            
            # –û—Ç–∫–ª—é—á–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            prefs = {
                "profile.default_content_setting_values": {
                    "notifications": 2,
                }
            }
            options.add_experimental_option("prefs", prefs)
            
            # –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ chromedriver –≤ —Å–∏—Å—Ç–µ–º–µ
            import shutil
            chromedriver_path = shutil.which('chromedriver')
            
            if chromedriver_path:
                from selenium.webdriver.chrome.service import Service
                service = Service(chromedriver_path)
                self.driver = webdriver.Chrome(service=service, options=options)
            else:
                # Fallback –∫ –æ–±—ã—á–Ω–æ–º—É Chrome
                self.driver = webdriver.Chrome(options=options)
            
            # –£–±–∏—Ä–∞–µ–º –ø—Ä–∏–∑–Ω–∞–∫–∏ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏
            self.driver.execute_script("Object.defineProperty(navigator, 'webdriver', {get: () => undefined})")
            
            logger.info("‚úÖ –ë—Ä–∞—É–∑–µ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±—Ä–∞—É–∑–µ—Ä–∞: {e}")
            # –ü—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–± —Å undetected-chromedriver
            try:
                logger.info("–ü—Ä–æ–±—É–µ–º undetected-chromedriver...")
                options = uc.ChromeOptions()
                if self.headless:
                    options.add_argument('--headless=new')
                options.add_argument('--no-sandbox')
                options.add_argument('--disable-dev-shm-usage')
                
                self.driver = uc.Chrome(options=options, driver_executable_path='/nix/store/*/bin/chromedriver')
                logger.info("‚úÖ Undetected Chrome –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            except Exception as e2:
                logger.error(f"–û—à–∏–±–∫–∞ undetected-chromedriver: {e2}")
                self.driver = None
    
    def get_page_with_browser(self, url: str, wait_time: int = 10) -> str:
        """–ü–æ–ª—É—á–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É —á–µ—Ä–µ–∑ —ç–º—É–ª—è—Ç–æ—Ä –±—Ä–∞—É–∑–µ—Ä–∞"""
        if not self.driver:
            logger.error("–ë—Ä–∞—É–∑–µ—Ä –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            return ""
        
        try:
            logger.info(f"üåê –û—Ç–∫—Ä—ã–≤–∞–µ–º {url}")
            
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É
            self.driver.get(url)
            
            # –°–ª—É—á–∞–π–Ω–∞—è –ø–∞—É–∑–∞ –∫–∞–∫ —É —á–µ–ª–æ–≤–µ–∫–∞
            time.sleep(random.uniform(2, 4))
            
            # –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
            try:
                # –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ –æ—Å–Ω–æ–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                WebDriverWait(self.driver, wait_time).until(
                    EC.presence_of_element_located((By.TAG_NAME, "body"))
                )
                
                # –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
                time.sleep(5)  # –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –∑–∞–≥—Ä—É–∑–∫—É JS
                
                # –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –∫–æ–Ω—Ç–µ–Ω—Ç —Å–≤—è–∑–∞–Ω–Ω—ã–π —Å –∑–∞—Å—Ç—Ä–æ–π—â–∏–∫–∞–º–∏
                potential_selectors = [
                    "[data-testid*='developer']",
                    "[class*='developer']", 
                    "[class*='company']",
                    ".card",
                    ".item",
                    "[data-testid*='company']"
                ]
                
                for selector in potential_selectors:
                    try:
                        elements = WebDriverWait(self.driver, 3).until(
                            EC.presence_of_all_elements_located((By.CSS_SELECTOR, selector))
                        )
                        if elements:
                            logger.info(f"–ù–∞–π–¥–µ–Ω—ã —ç–ª–µ–º–µ–Ω—Ç—ã –ø–æ —Å–µ–ª–µ–∫—Ç–æ—Ä—É {selector}: {len(elements)}")
                            break
                    except TimeoutException:
                        continue
                        
            except TimeoutException:
                logger.warning("Timeout –æ–∂–∏–¥–∞–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã")
            
            # –ü—Ä–æ—Å—Ç–æ–π —Å–∫—Ä–æ–ª–ª –≤–Ω–∏–∑ –∏ –≤–≤–µ—Ä—Ö –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
            try:
                self.driver.execute_script("window.scrollTo(0, document.body.scrollHeight/2);")
                time.sleep(2)
                self.driver.execute_script("window.scrollTo(0, document.body.scrollHeight);")
                time.sleep(2)
                self.driver.execute_script("window.scrollTo(0, 0);")
                time.sleep(1)
            except Exception as e:
                logger.warning(f"–û—à–∏–±–∫–∞ —Å–∫—Ä–æ–ª–ª–∏–Ω–≥–∞: {e}")
            
            # –ü–æ–ª—É—á–∞–µ–º HTML
            html = self.driver.page_source
            
            logger.info(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(html)} —Å–∏–º–≤–æ–ª–æ–≤ HTML")
            return html
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {e}")
            return ""
    
    def _human_scroll(self):
        """–≠–º—É–ª–∏—Ä—É–µ–º —á–µ–ª–æ–≤–µ—á–µ—Å–∫–∏–π —Å–∫—Ä–æ–ª–ª–∏–Ω–≥"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤—ã—Å–æ—Ç—É —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            total_height = self.driver.execute_script("return document.body.scrollHeight")
            
            # –°–∫—Ä–æ–ª–ª–∏–º –∫–∞–∫ —á–µ–ª–æ–≤–µ–∫ - –Ω–µ —Å—Ä–∞–∑—É –≤–Ω–∏–∑, –∞ –ø–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ
            current_position = 0
            scroll_step = random.randint(300, 600)
            
            while current_position < total_height:
                # –°–∫—Ä–æ–ª–ª–∏–º –Ω–∞ —Å–ª—É—á–∞–π–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ
                current_position += scroll_step
                self.driver.execute_script(f"window.scrollTo(0, {current_position});")
                
                # –°–ª—É—á–∞–π–Ω–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É —Å–∫—Ä–æ–ª–ª–∞–º–∏
                time.sleep(random.uniform(0.5, 1.5))
                
                # –ò–Ω–æ–≥–¥–∞ —Å–∫—Ä–æ–ª–ª–∏–º –Ω–∞–∑–∞–¥, –∫–∞–∫ –¥–µ–ª–∞—é—Ç –ª—é–¥–∏
                if random.random() < 0.2:
                    back_scroll = random.randint(50, 200)
                    self.driver.execute_script(f"window.scrollTo(0, {current_position - back_scroll});")
                    time.sleep(random.uniform(0.3, 0.8))
                
                # –ù–æ–≤–∞—è –≤—ã—Å–æ—Ç–∞ –º–æ–≥–ª–∞ –∏–∑–º–µ–Ω–∏—Ç—å—Å—è (–¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∞—è –∑–∞–≥—Ä—É–∑–∫–∞)
                total_height = self.driver.execute_script("return document.body.scrollHeight")
                scroll_step = random.randint(300, 600)
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –Ω–∞—á–∞–ª–æ
            self.driver.execute_script("window.scrollTo(0, 0);")
            time.sleep(1)
            
        except Exception as e:
            logger.warning(f"–û—à–∏–±–∫–∞ —Å–∫—Ä–æ–ª–ª–∏–Ω–≥–∞: {e}")
    
    def parse_developers_from_html(self, html: str, base_url: str) -> list:
        """–ü–∞—Ä—Å–∏–º –∑–∞—Å—Ç—Ä–æ–π—â–∏–∫–æ–≤ –∏–∑ HTML —Ç–∞–±–ª–∏—Ü—ã domclick.ru"""
        try:
            soup = BeautifulSoup(html, 'html.parser')
            developers = []
            
            # –ò—â–µ–º —Ç–∞–±–ª–∏—Ü—É –∑–∞—Å—Ç—Ä–æ–π—â–∏–∫–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ domclick.ru
            # –ò—â–µ–º —Å—Ç—Ä–æ–∫–∏ —Ç–∞–±–ª–∏—Ü—ã —Å –¥–∞–Ω–Ω—ã–º–∏ –∑–∞—Å—Ç—Ä–æ–π—â–∏–∫–æ–≤
            table_rows = soup.find_all('tr')  # –°—Ç—Ä–æ–∫–∏ —Ç–∞–±–ª–∏—Ü—ã
            
            # –¢–∞–∫–∂–µ –ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ div-—ç–ª–µ–º–µ–Ω—Ç—ã —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∑–∞—Å—Ç—Ä–æ–π—â–∏–∫–∞—Ö
            developer_blocks = soup.find_all(['div', 'article'], class_=lambda x: x and any(
                keyword in str(x).lower() for keyword in ['developer', 'company', '–∑–∞—Å—Ç—Ä–æ–π—â–∏–∫', 'item', 'row']
            ))
            
            logger.info(f"–ù–∞–π–¥–µ–Ω–æ —Å—Ç—Ä–æ–∫ —Ç–∞–±–ª–∏—Ü—ã: {len(table_rows)}, –±–ª–æ–∫–æ–≤ –∑–∞—Å—Ç—Ä–æ–π—â–∏–∫–æ–≤: {len(developer_blocks)}")
            
            # –ü–∞—Ä—Å–∏–º —Å—Ç—Ä–æ–∫–∏ —Ç–∞–±–ª–∏—Ü—ã
            for row in table_rows:
                try:
                    # –ò—â–µ–º —è—á–µ–π–∫–∏ –≤ —Å—Ç—Ä–æ–∫–µ
                    cells = row.find_all(['td', 'th'])
                    if len(cells) >= 4:  # –ú–∏–Ω–∏–º—É–º 4 –∫–æ–ª–æ–Ω–∫–∏: –Ω–∞–∑–≤–∞–Ω–∏–µ, —Å–¥–∞–Ω–Ω—ã–µ, —Å—Ç—Ä–æ—è—â–∏–µ—Å—è, %
                        name_cell = cells[0]
                        completed_cell = cells[1] if len(cells) > 1 else None
                        under_construction_cell = cells[2] if len(cells) > 2 else None
                        on_time_cell = cells[3] if len(cells) > 3 else None
                        contact_cell = cells[4] if len(cells) > 4 else None
                        
                        # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ
                        name = name_cell.get_text(strip=True)
                        if name and len(name) > 2 and name != '–ó–∞—Å—Ç—Ä–æ–π—â–∏–∫':
                            
                            # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ
                            completed_text = completed_cell.get_text(strip=True) if completed_cell else '0'
                            under_construction_text = under_construction_cell.get_text(strip=True) if under_construction_cell else '0'
                            on_time_text = on_time_cell.get_text(strip=True) if on_time_cell else '0%'
                            contact_text = contact_cell.get_text(strip=True) if contact_cell else ''
                            
                            # –ü–∞—Ä—Å–∏–º —á–∏—Å–ª–∞
                            import re
                            completed_match = re.search(r'(\d+)', completed_text)
                            under_construction_match = re.search(r'(\d+)', under_construction_text)
                            on_time_match = re.search(r'(\d+)', on_time_text)
                            
                            completed_buildings = int(completed_match.group(1)) if completed_match else 0
                            under_construction = int(under_construction_match.group(1)) if under_construction_match else 0
                            on_time_percentage = int(on_time_match.group(1)) if on_time_match else 0
                            
                            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω
                            phone_match = re.search(r'\+7\s?\(?\d{3}\)?\s?\d{3}-?\d{2}-?\d{2}', contact_text)
                            phone = phone_match.group(0) if phone_match else ''
                            
                            developer_data = {
                                'name': name,
                                'completed_buildings': completed_buildings,
                                'under_construction': under_construction,
                                'on_time_percentage': on_time_percentage,
                                'phone': phone,
                                'source': 'domclick_table',
                                'specialization': '–ñ–∏–ª–∏—â–Ω–æ–µ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ',
                                'description': f'–ó–∞—Å—Ç—Ä–æ–π—â–∏–∫ {name} - —Å–¥–∞–Ω–æ –¥–æ–º–æ–≤: {completed_buildings}, —Å—Ç—Ä–æ–∏—Ç—Å—è: {under_construction}, –≤–æ–≤—Ä–µ–º—è: {on_time_percentage}%'
                            }
                            
                            developers.append(developer_data)
                            logger.info(f"  ‚úÖ {name} - —Å–¥–∞–Ω–æ: {completed_buildings}, —Å—Ç—Ä–æ–∏—Ç—Å—è: {under_construction}")
                
                except Exception as e:
                    logger.warning(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Ç—Ä–æ–∫–∏ —Ç–∞–±–ª–∏—Ü—ã: {e}")
                    continue
            
            # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –≤ —Ç–∞–±–ª–∏—Ü–µ, –ø—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –º–µ—Ç–æ–¥—ã
            if not developers:
                logger.info("–ü—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã...")
                
                # –ò—â–µ–º –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Å —Ç–µ–∫—Å—Ç–æ–º —Å–æ–¥–µ—Ä–∂–∞—â–∏–º –Ω–∞–∑–≤–∞–Ω–∏—è –∫–æ–º–ø–∞–Ω–∏–π
                import re
                company_patterns = [
                    r'[–ê-–Ø]{2,}[–∞-—è]*\s*(?:–°—Ç—Ä–æ–π|–î–µ–≤–µ–ª–æ–ø–º–µ–Ω—Ç|–ò–Ω–≤–µ—Å—Ç|–ì—Ä—É–ø–ø|–ì–ö)',
                    r'[–ê-–Ø][–∞-—è]+\s+[–ê-–Ø][–∞-—è]+',
                    r'–û–û–û\s+["\¬´]?[–ê-–Ø][–∞-—è\s]+["\¬ª]?'
                ]
                
                text_content = soup.get_text()
                for pattern in company_patterns:
                    matches = re.findall(pattern, text_content)
                    for match in matches:
                        if len(match) > 3 and match not in [d['name'] for d in developers]:
                            developers.append({
                                'name': match.strip(),
                                'source': 'text_pattern',
                                'specialization': '–ñ–∏–ª–∏—â–Ω–æ–µ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ',
                                'description': f'–ó–∞—Å—Ç—Ä–æ–π—â–∏–∫ {match} –Ω–∞–π–¥–µ–Ω –≤ —Ç–µ–∫—Å—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã'
                            })
            
            logger.info(f"–ò—Ç–æ–≥–æ –Ω–∞–π–¥–µ–Ω–æ –∑–∞—Å—Ç—Ä–æ–π—â–∏–∫–æ–≤: {len(developers)}")
            return developers
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ HTML: {e}")
            return []
    
    def _extract_developer_name(self, link_element) -> str:
        """–ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞—Å—Ç—Ä–æ–π—â–∏–∫–∞ –∏–∑ —ç–ª–µ–º–µ–Ω—Ç–∞ —Å—Å—ã–ª–∫–∏"""
        # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ
        
        # 1. –¢–µ–∫—Å—Ç —Å–∞–º–æ–π —Å—Å—ã–ª–∫–∏
        name = link_element.get_text(strip=True)
        if name and len(name) > 2:
            return name
        
        # 2. –ê—Ç—Ä–∏–±—É—Ç title
        title = link_element.get('title', '').strip()
        if title and len(title) > 2:
            return title
        
        # 3. –ê—Ç—Ä–∏–±—É—Ç alt —É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤–Ω—É—Ç—Ä–∏
        img = link_element.find('img')
        if img:
            alt = img.get('alt', '').strip()
            if alt and len(alt) > 2:
                return alt
        
        # 4. –¢–µ–∫—Å—Ç –≤ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–º —ç–ª–µ–º–µ–Ω—Ç–µ
        parent = link_element.parent
        if parent:
            parent_text = parent.get_text(strip=True)
            if parent_text and len(parent_text) > 2 and len(parent_text) < 100:
                return parent_text
        
        # 5. –ò–∑ URL
        href = link_element.get('href', '')
        if href:
            parts = href.split('/')
            for part in reversed(parts):
                if part and part != 'zastroishchiki' and len(part) > 2:
                    # –î–µ–∫–æ–¥–∏—Ä—É–µ–º URL –∏ –æ—á–∏—â–∞–µ–º
                    import urllib.parse
                    decoded = urllib.parse.unquote(part)
                    cleaned = decoded.replace('-', ' ').replace('_', ' ').title()
                    if len(cleaned) > 2:
                        return cleaned
        
        return ""
    
    def close(self):
        """–ó–∞–∫—Ä—ã–≤–∞–µ–º –±—Ä–∞—É–∑–µ—Ä"""
        if self.driver:
            try:
                self.driver.quit()
                logger.info("üîª –ë—Ä–∞—É–∑–µ—Ä –∑–∞–∫—Ä—ã—Ç")
            except Exception as e:
                logger.warning(f"–û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –±—Ä–∞—É–∑–µ—Ä–∞: {e}")
    
    def __del__(self):
        """–î–µ—Å—Ç—Ä—É–∫—Ç–æ—Ä - –∑–∞–∫—Ä—ã–≤–∞–µ–º –±—Ä–∞—É–∑–µ—Ä"""
        self.close()

def test_browser_scraper():
    """–¢–µ—Å—Ç –±—Ä–∞—É–∑–µ—Ä–Ω–æ–≥–æ –ø–∞—Ä—Å–µ—Ä–∞"""
    scraper = BrowserScraper(headless=True)
    
    try:
        url = "https://krasnodar.domclick.ru/zastroishchiki"
        html = scraper.get_page_with_browser(url)
        
        if html and len(html) > 1000:
            print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω HTML —Ä–∞–∑–º–µ—Ä–æ–º {len(html)} —Å–∏–º–≤–æ–ª–æ–≤")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
            if "qrator" in html.lower() or "–∑–∞—â–∏—Ç–∞" in html.lower() or "blocked" in html.lower():
                print("‚ùå –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ Qrator")
            else:
                print("‚úÖ –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞!")
                
                # –ü–∞—Ä—Å–∏–º –∑–∞—Å—Ç—Ä–æ–π—â–∏–∫–æ–≤
                developers = scraper.parse_developers_from_html(html, url)
                print(f"üè¢ –ù–∞–π–¥–µ–Ω–æ –∑–∞—Å—Ç—Ä–æ–π—â–∏–∫–æ–≤: {len(developers)}")
                
                for i, dev in enumerate(developers[:5], 1):
                    print(f"  {i}. {dev['name']}")
        else:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å HTML")
            
    finally:
        scraper.close()

if __name__ == "__main__":
    test_browser_scraper()