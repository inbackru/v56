"""
–î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ì–û –û–ë–û–ì–ê–©–ï–ù–ò–Ø –ê–î–†–ï–°–û–í
–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç 3 —Ä–µ–∂–∏–º–∞ —Ä–∞–±–æ—Ç—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤
"""

from app import app, db
from models import Property
from services.auto_geocoding import get_auto_geocoding_service, setup_auto_geocoding
import time


def demo_1_single_object():
    """
    –°–¶–ï–ù–ê–†–ò–ô 1: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –û–î–ù–û–ì–û –æ–±—ä–µ–∫—Ç–∞
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–æ–≥–∞—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ SQLAlchemy events
    """
    print("\n" + "="*80)
    print("üìç –°–¶–ï–ù–ê–†–ò–ô 1: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–¥–Ω–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞ —á–µ—Ä–µ–∑ –≤–µ–±-—Ñ–æ—Ä–º—É")
    print("="*80)
    
    with app.app_context():
        # –í–∫–ª—é—á–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–æ–≥–∞—â–µ–Ω–∏–µ
        setup_auto_geocoding(db)
        
        # –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π –æ–±—ä–µ–∫—Ç (–∫–∞–∫ –±—É–¥—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ø–æ–ª–Ω–∏–ª —Ñ–æ—Ä–º—É)
        new_property = Property(
            title="2-–∫–æ–º–Ω. 65 –º¬≤, –ñ–ö –ù–æ–≤—ã–π",
            rooms=2,
            area=65.0,
            price=5500000,
            latitude=45.0355,  # –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ö—Ä–∞—Å–Ω–æ–¥–∞—Ä–∞
            longitude=38.9753,
            is_active=True
        )
        
        print(f"\nüìù –°–æ–∑–¥–∞—ë–º –æ–±—ä–µ–∫—Ç: {new_property.title}")
        print(f"   –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: {new_property.latitude}, {new_property.longitude}")
        print(f"   parsed_city –î–û: {new_property.parsed_city or '–ø—É—Å—Ç–æ'}")
        
        # –ü—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤ –ë–î –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å—Ä–∞–±–æ—Ç–∞–µ—Ç –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ
        db.session.add(new_property)
        db.session.commit()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        db.session.refresh(new_property)
        print(f"\n‚úÖ –†–ï–ó–£–õ–¨–¢–ê–¢ –ø–æ—Å–ª–µ db.session.commit():")
        print(f"   parsed_city: {new_property.parsed_city or '–Ω–µ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω'}")
        print(f"   parsed_district: {new_property.parsed_district or '–Ω–µ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω'}")
        print(f"   parsed_street: {new_property.parsed_street or '–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞'}")
        
        # –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –æ–±—ä–µ–∫—Ç
        db.session.delete(new_property)
        db.session.commit()
        
        print("\nüí° –í–´–í–û–î: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–æ–≥–∞—â–µ–Ω–∏–µ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø—Ä–∏ db.session.add()")


def demo_2_batch_import():
    """
    –°–¶–ï–ù–ê–†–ò–ô 2: –ò–º–ø–æ—Ä—Ç –°–û–¢–ï–ù –æ–±—ä–µ–∫—Ç–æ–≤ –∏–∑ Excel/API
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è: Batch –æ–±–æ–≥–∞—â–µ–Ω–∏–µ —Å –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏–∫–∏
    """
    print("\n" + "="*80)
    print("üì¶ –°–¶–ï–ù–ê–†–ò–ô 2: –ú–∞—Å—Å–æ–≤—ã–π –∏–º–ø–æ—Ä—Ç 100 –æ–±—ä–µ–∫—Ç–æ–≤ –∏–∑ Excel")
    print("="*80)
    
    with app.app_context():
        auto_service = get_auto_geocoding_service()
        
        # –í–ê–ñ–ù–û: –í–∫–ª—é—á–∞–µ–º batch —Ä–µ–∂–∏–º —á—Ç–æ–±—ã –Ω–µ —Ç–æ—Ä–º–æ–∑–∏—Ç—å –∏–º–ø–æ—Ä—Ç
        auto_service.enable_batch_mode()
        
        print("\n1Ô∏è‚É£ –≠–¢–ê–ü 1: –ë—ã—Å—Ç—Ä—ã–π –∏–º–ø–æ—Ä—Ç –±–µ–∑ –æ–±–æ–≥–∞—â–µ–Ω–∏—è")
        start_time = time.time()
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—ã–µ 100 –æ–±—ä–µ–∫—Ç–æ–≤ —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏
        properties = Property.query.filter(
            Property.latitude.isnot(None),
            Property.longitude.isnot(None)
        ).limit(100).all()
        
        print(f"   –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(properties)} –æ–±—ä–µ–∫—Ç–æ–≤ –∑–∞ {time.time() - start_time:.2f}—Å")
        
        print("\n2Ô∏è‚É£ –≠–¢–ê–ü 2: –ú–∞—Å—Å–æ–≤–æ–µ –æ–±–æ–≥–∞—â–µ–Ω–∏–µ –ø–∞–∫–µ—Ç–∞–º–∏")
        start_time = time.time()
        
        # –û–±–æ–≥–∞—â–∞–µ–º –ø–∞–∫–µ—Ç–∞–º–∏ –ø–æ 50 —à—Ç—É–∫
        stats = auto_service.enrich_batch(properties, batch_size=50)
        
        elapsed = time.time() - start_time
        
        print(f"\nüìä –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–¨:")
        print(f"   –í—Å–µ–≥–æ –æ–±—ä–µ–∫—Ç–æ–≤: {stats['total']}")
        print(f"   –û–±–æ–≥–∞—â–µ–Ω–æ: {stats['enriched']}")
        print(f"   –í—Ä–µ–º—è: {elapsed:.2f}—Å")
        print(f"   –°–∫–æ—Ä–æ—Å—Ç—å: {stats['total']/elapsed:.1f} –æ–±—ä–µ–∫—Ç–æ–≤/—Å–µ–∫")
        print(f"   API –∑–∞–ø—Ä–æ—Å–æ–≤: {stats['cache_stats']['api_requests']}")
        print(f"   –≠–∫–æ–Ω–æ–º–∏—è —á–µ—Ä–µ–∑ –∫—ç—à: {stats['cache_stats']['cache_hit_rate']}%")
        
        # –í—ã–∫–ª—é—á–∞–µ–º batch —Ä–µ–∂–∏–º
        auto_service.disable_batch_mode()
        
        print("\nüí° –í–´–í–û–î: Batch –æ–±–æ–≥–∞—â–µ–Ω–∏–µ ~10-20 –æ–±—ä–µ–∫—Ç–æ–≤/—Å–µ–∫ —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º")


def demo_3_estimate_performance():
    """
    –°–¶–ï–ù–ê–†–ò–ô 3: –û—Ü–µ–Ω–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –¢–´–°–Ø–ß –æ–±—ä–µ–∫—Ç–æ–≤
    """
    print("\n" + "="*80)
    print("‚è±Ô∏è  –°–¶–ï–ù–ê–†–ò–ô 3: –û—Ü–µ–Ω–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –æ–±—ä—ë–º–æ–≤")
    print("="*80)
    
    # –ë–∞–∑–æ–≤–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å (–∏–∑ —Ç–µ—Å—Ç–æ–≤)
    objects_per_sec = 15  # –° –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º ~40%, –±–µ–∑ –∫—ç—à–∞ ~8
    api_limit_per_day = 25000  # Yandex –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ª–∏–º–∏—Ç
    
    volumes = [
        ("100 –æ–±—ä–µ–∫—Ç–æ–≤", 100),
        ("500 –æ–±—ä–µ–∫—Ç–æ–≤", 500),
        ("1,000 –æ–±—ä–µ–∫—Ç–æ–≤", 1000),
        ("5,000 –æ–±—ä–µ–∫—Ç–æ–≤", 5000),
        ("25,000 –æ–±—ä–µ–∫—Ç–æ–≤", 25000),
    ]
    
    print("\nüìà –ü–†–û–ì–ù–û–ó –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò (—Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º ~40%):\n")
    print(f"{'–û–±—ä—ë–º':<20} {'–í—Ä–µ–º—è':<15} {'API –∑–∞–ø—Ä–æ—Å—ã':<15} {'–°—Ç–∞—Ç—É—Å'}")
    print("-" * 65)
    
    for name, count in volumes:
        time_sec = count / objects_per_sec
        api_requests = int(count * 0.6)  # 40% –∏–∑ –∫—ç—à–∞, 60% –Ω–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è
        if time_sec < 60:
            time_str = f"{time_sec:.0f}—Å"
        elif time_sec < 3600:
            time_str = f"{time_sec/60:.1f}–º–∏–Ω"
        else:
            time_str = f"{time_sec/3600:.1f}—á"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç API
        if api_requests > api_limit_per_day:
            status = "‚ö†Ô∏è –¢—Ä–µ–±—É–µ—Ç—Å—è –Ω–µ—Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π"
        else:
            status = "‚úÖ –ó–∞ 1 –¥–µ–Ω—å"
        
        print(f"{name:<20} {time_str:<15} {api_requests:<15,} {status}")
    
    print("\n" + "-" * 65)
    print("\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
    print("   ‚Ä¢ –î–æ 1,000 –æ–±—ä–µ–∫—Ç–æ–≤: Batch –æ–±–æ–≥–∞—â–µ–Ω–∏–µ –∑–∞ —Ä–∞–∑ (~1 –º–∏–Ω—É—Ç–∞)")
    print("   ‚Ä¢ –î–æ 25,000 –æ–±—ä–µ–∫—Ç–æ–≤: Batch –æ–±–æ–≥–∞—â–µ–Ω–∏–µ –∑–∞ 1 –¥–µ–Ω—å (–ª–∏–º–∏—Ç API)")
    print("   ‚Ä¢ –ë–æ–ª—å—à–µ 25,000: –†–∞–∑–±–∏—Ç—å –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –∏–ª–∏ –ø–ª–∞—Ç–Ω—ã–π API –∫–ª—é—á")
    print("   ‚Ä¢ –ö—ç—à —Ä–∞–±–æ—Ç–∞–µ—Ç 24 —á–∞—Å–∞ ‚Üí –ø–æ–≤—Ç–æ—Ä–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã –æ–±–æ–≥–∞—â–∞—é—Ç—Å—è –º–≥–Ω–æ–≤–µ–Ω–Ω–æ")


def demo_4_integration_example():
    """
    –°–¶–ï–ù–ê–†–ò–ô 4: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Å–∫—Ä–∏–ø—Ç –∏–º–ø–æ—Ä—Ç–∞
    """
    print("\n" + "="*80)
    print("üîß –°–¶–ï–ù–ê–†–ò–ô 4: –ö–∞–∫ –¥–æ–±–∞–≤–∏—Ç—å –≤ —Å–∫—Ä–∏–ø—Ç –∏–º–ø–æ—Ä—Ç–∞")
    print("="*80)
    
    example_code = '''
# ===== –ü–†–ò–ú–ï–†: scripts/import_excel_data.py =====

from services.auto_geocoding import get_auto_geocoding_service

def import_properties_from_excel(file_path):
    """–ò–º–ø–æ—Ä—Ç –æ–±—ä–µ–∫—Ç–æ–≤ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –æ–±–æ–≥–∞—â–µ–Ω–∏–µ–º –∞–¥—Ä–µ—Å–æ–≤"""
    
    auto_service = get_auto_geocoding_service()
    
    # –≠–¢–ê–ü 1: –ë—ã—Å—Ç—Ä—ã–π –∏–º–ø–æ—Ä—Ç –±–µ–∑ –æ–±–æ–≥–∞—â–µ–Ω–∏—è
    auto_service.enable_batch_mode()
    
    properties = []
    for row in read_excel(file_path):
        prop = Property(
            title=row['title'],
            latitude=row['lat'],
            longitude=row['lon'],
            # ... –æ—Å—Ç–∞–ª—å–Ω—ã–µ –ø–æ–ª—è
        )
        db.session.add(prop)
        properties.append(prop)
    
    db.session.commit()
    print(f"‚úÖ –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ {len(properties)} –æ–±—ä–µ–∫—Ç–æ–≤")
    
    # –≠–¢–ê–ü 2: –ú–∞—Å—Å–æ–≤–æ–µ –æ–±–æ–≥–∞—â–µ–Ω–∏–µ –∞–¥—Ä–µ—Å–æ–≤
    stats = auto_service.enrich_batch(properties, batch_size=50)
    print(f"‚úÖ –û–±–æ–≥–∞—â–µ–Ω–æ {stats['enriched']} –∞–¥—Ä–µ—Å–æ–≤")
    
    auto_service.disable_batch_mode()
    
    return stats

# ===== –ê–õ–¨–¢–ï–†–ù–ê–¢–ò–í–ê: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–æ–≥–∞—â–µ–Ω–∏–µ =====

# –í app.py –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:
from services.auto_geocoding import setup_auto_geocoding

with app.app_context():
    setup_auto_geocoding(db)  # –í–∫–ª—é—á–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏–∫—É
    
# –¢–µ–ø–µ—Ä—å –õ–Æ–ë–û–ô –Ω–æ–≤—ã–π Property –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–æ–≥–∞—â–∞–µ—Ç—Å—è:
new_prop = Property(title="–ö–≤–∞—Ä—Ç–∏—Ä–∞", latitude=45.0, longitude=38.9)
db.session.add(new_prop)
db.session.commit()
# new_prop.parsed_city –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø–æ–ª–Ω–∏—Ç—Å—è!
'''
    
    print(example_code)
    
    print("\nüí° –í–´–í–û–î: –î–≤–∞ –ø–æ–¥—Ö–æ–¥–∞ –Ω–∞ –≤—ã–±–æ—Ä")
    print("   1. –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π: setup_auto_geocoding() –≤ app.py ‚Üí —Ä–∞–±–æ—Ç–∞–µ—Ç –≤—Å–µ–≥–¥–∞")
    print("   2. Batch: –í—Ä—É—á–Ω—É—é –≤—ã–∑—ã–≤–∞—Ç—å enrich_batch() ‚Üí –∫–æ–Ω—Ç—Ä–æ–ª—å –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏")


if __name__ == '__main__':
    print("\n" + "="*80)
    print("üöÄ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ì–û –û–ë–û–ì–ê–©–ï–ù–ò–Ø –ê–î–†–ï–°–û–í")
    print("="*80)
    
    choice = input("""
–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ü–µ–Ω–∞—Ä–∏–π:
1. –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–¥–Ω–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞ (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–æ–≥–∞—â–µ–Ω–∏–µ)
2. –ú–∞—Å—Å–æ–≤—ã–π –∏–º–ø–æ—Ä—Ç 100 –æ–±—ä–µ–∫—Ç–æ–≤ (batch —Ä–µ–∂–∏–º)
3. –û—Ü–µ–Ω–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –¥–ª—è —Ç—ã—Å—è—á –æ–±—ä–µ–∫—Ç–æ–≤
4. –ü—Ä–∏–º–µ—Ä—ã –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –≤ –∫–æ–¥
5. –ó–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏

–í–∞—à –≤—ã–±–æ—Ä (1-5): """).strip()
    
    if choice == '1':
        demo_1_single_object()
    elif choice == '2':
        demo_2_batch_import()
    elif choice == '3':
        demo_3_estimate_performance()
    elif choice == '4':
        demo_4_integration_example()
    elif choice == '5':
        demo_1_single_object()
        demo_2_batch_import()
        demo_3_estimate_performance()
        demo_4_integration_example()
    else:
        print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä")
    
    print("\n" + "="*80)
    print("‚úÖ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê")
    print("="*80 + "\n")
