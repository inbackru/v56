/**
 * –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–∫–æ–º–ø–ª–∏—Ç–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏
 * –û—Å–Ω–æ–≤–∞–Ω–∞ –Ω–∞ –ª—É—á—à–∏—Ö UX –ø—Ä–∞–∫—Ç–∏–∫–∞—Ö –≤–µ–¥—É—â–∏—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
 */

class SmartAutocomplete {
    constructor(inputElement, options = {}) {
        this.input = inputElement;
        this.options = {
            minChars: 1,
            debounceMs: 200,
            maxSuggestions: 8,
            apiUrl: '/api/search/suggestions',
            onSelect: null,
            onSearch: null,
            placeholder: '–ü–æ–∏—Å–∫ –ø–æ –∞–¥—Ä–µ—Å—É, –ñ–ö, –∑–∞—Å—Ç—Ä–æ–π—â–∏–∫—É...',
            ...options
        };
        
        this.suggestions = [];
        this.selectedIndex = -1;
        this.isVisible = false;
        this.cache = new Map();
        this.debounceTimer = null;
        
        this.init();
    }
    
    init() {
        this.createSuggestionsContainer();
        this.bindEvents();
        this.input.setAttribute('placeholder', this.options.placeholder);
        this.input.setAttribute('autocomplete', 'off');
        this.input.setAttribute('spellcheck', 'false');
    }
    
    createSuggestionsContainer() {
        this.container = document.createElement('div');
        this.container.className = 'smart-autocomplete-container';
        this.container.innerHTML = `
            <div class="smart-autocomplete-suggestions" id="${this.input.id}_suggestions">
                <!-- –ü–æ–¥—Å–∫–∞–∑–∫–∏ –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ -->
            </div>
        `;
        
        // –ü–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä—É–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ input
        this.input.parentNode.appendChild(this.container);
        this.suggestionsElement = this.container.querySelector('.smart-autocomplete-suggestions');
    }
    
    bindEvents() {
        // –í–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞
        this.input.addEventListener('input', (e) => {
            this.handleInput(e.target.value);
        });
        
        // –§–æ–∫—É—Å - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã
        this.input.addEventListener('focus', () => {
            if (!this.input.value.trim()) {
                this.showPopularSuggestions();
            }
        });
        
        // –ü–æ—Ç–µ—Ä—è —Ñ–æ–∫—É—Å–∞ - —Å–∫—Ä—ã–≤–∞–µ–º –ø–æ–¥—Å–∫–∞–∑–∫–∏
        this.input.addEventListener('blur', (e) => {
            // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–ª–∏–∫–∞ –ø–æ –ø–æ–¥—Å–∫–∞–∑–∫–µ
            setTimeout(() => {
                if (!this.container.contains(document.activeElement)) {
                    this.hideSuggestions();
                }
            }, 150);
        });
        
        // –ù–∞–≤–∏–≥–∞—Ü–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
        this.input.addEventListener('keydown', (e) => {
            this.handleKeydown(e);
        });
        
        // –ö–ª–∏–∫–∏ –ø–æ –ø–æ–¥—Å–∫–∞–∑–∫–∞–º
        this.container.addEventListener('click', (e) => {
            console.log('üî• Container clicked!', e.target);
            const suggestionElement = e.target.closest('.suggestion-item');
            console.log('üî• Suggestion element:', suggestionElement);
            if (suggestionElement) {
                const index = Array.from(this.suggestionsElement.children).indexOf(suggestionElement);
                console.log('üî• Calling selectSuggestion with index:', index);
                this.selectSuggestion(index);
            }
        });
        
        // –ö–ª–∏–∫–∏ –≤–Ω–µ —ç–ª–µ–º–µ–Ω—Ç–∞
        document.addEventListener('click', (e) => {
            if (!this.input.contains(e.target) && !this.container.contains(e.target)) {
                this.hideSuggestions();
            }
        });
    }
    
    handleInput(value) {
        const query = value.trim();
        
        // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ç–∞–π–º–µ—Ä
        if (this.debounceTimer) {
            clearTimeout(this.debounceTimer);
        }
        
        if (query.length < this.options.minChars) {
            this.hideSuggestions();
            return;
        }
        
        // Debounce –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
        this.debounceTimer = setTimeout(() => {
            this.searchSuggestions(query);
        }, this.options.debounceMs);
    }
    
    async searchSuggestions(query) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
        if (this.cache.has(query)) {
            this.displaySuggestions(this.cache.get(query));
            return;
        }
        
        try {
            this.showLoading();
            
            const response = await fetch(`${this.options.apiUrl}?q=${encodeURIComponent(query)}`);
            const suggestions = await response.json();
            
            // –ö—ç—à–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            this.cache.set(query, suggestions);
            
            // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –∫—ç—à–∞
            if (this.cache.size > 50) {
                const firstKey = this.cache.keys().next().value;
                this.cache.delete(firstKey);
            }
            
            this.displaySuggestions(suggestions);
            
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ–¥—Å–∫–∞–∑–æ–∫:', error);
            this.hideSuggestions();
        }
    }
    
    showPopularSuggestions() {
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –ø—Ä–∏ —Ñ–æ–∫—É—Å–µ
        const popularQueries = [
            { text: '–°—Ç—É–¥–∏–∏', type: 'rooms', subtitle: '–í—Å–µ —Å—Ç—É–¥–∏–∏ –≤ –≥–æ—Ä–æ–¥–µ', icon: 'fas fa-home' },
            { text: '1-–∫–æ–º–Ω–∞—Ç–Ω—ã–µ', type: 'rooms', subtitle: '–û–¥–Ω–æ–∫–æ–º–Ω–∞—Ç–Ω—ã–µ –∫–≤–∞—Ä—Ç–∏—Ä—ã', icon: 'fas fa-home' },
            { text: '2-–∫–æ–º–Ω–∞—Ç–Ω—ã–µ', type: 'rooms', subtitle: '–î–≤—É—Ö–∫–æ–º–Ω–∞—Ç–Ω—ã–µ –∫–≤–∞—Ä—Ç–∏—Ä—ã', icon: 'fas fa-home' },
            { text: '–ù–æ–≤–æ—Å—Ç—Ä–æ–π–∫–∏', type: 'category', subtitle: '–ö–≤–∞—Ä—Ç–∏—Ä—ã –≤ –Ω–æ–≤—ã—Ö –¥–æ–º–∞—Ö', icon: 'fas fa-building' }
        ];
        
        this.displaySuggestions(popularQueries);
    }
    
    displaySuggestions(suggestions) {
        this.suggestions = suggestions;
        this.selectedIndex = -1;
        
        if (!suggestions || suggestions.length === 0) {
            this.showNoResults();
            return;
        }
        
        const html = suggestions.map((suggestion, index) => `
            <div class="suggestion-item ${index === this.selectedIndex ? 'selected' : ''}" data-index="${index}">
                <div class="suggestion-icon">
                    <i class="${suggestion.icon || 'fas fa-search'}"></i>
                </div>
                <div class="suggestion-content">
                    <div class="suggestion-text">${this.highlightMatch(suggestion.text)}</div>
                    ${suggestion.subtitle ? `<div class="suggestion-subtitle">${suggestion.subtitle}</div>` : ''}
                </div>
                <div class="suggestion-type">
                    ${this.getTypeLabel(suggestion.type)}
                </div>
            </div>
        `).join('');
        
        this.suggestionsElement.innerHTML = html;
        this.showSuggestions();
    }
    
    highlightMatch(text) {
        const query = this.input.value.trim();
        if (!query) return text;
        
        const regex = new RegExp(`(${query.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&')})`, 'gi');
        return text.replace(regex, '<mark>$1</mark>');
    }
    
    getTypeLabel(type) {
        const labels = {
            'address': '–ê–¥—Ä–µ—Å',
            'complex': '–ñ–ö',
            'developer': '–ó–∞—Å—Ç—Ä–æ–π—â–∏–∫',
            'district': '–†–∞–π–æ–Ω',
            'rooms': '–¢–∏–ø',
            'category': '–ö–∞—Ç–µ–≥–æ—Ä–∏—è'
        };
        return labels[type] || '';
    }
    
    showLoading() {
        this.suggestionsElement.innerHTML = `
            <div class="suggestion-loading">
                <div class="loading-spinner"></div>
                <span>–ü–æ–∏—Å–∫...</span>
            </div>
        `;
        this.showSuggestions();
    }
    
    showNoResults() {
        this.suggestionsElement.innerHTML = `
            <div class="suggestion-no-results">
                <i class="fas fa-search-minus"></i>
                <span>–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ</span>
            </div>
        `;
        this.showSuggestions();
    }
    
    showSuggestions() {
        this.container.classList.add('visible');
        this.isVisible = true;
    }
    
    hideSuggestions() {
        this.container.classList.remove('visible');
        this.isVisible = false;
        this.selectedIndex = -1;
    }
    
    handleKeydown(e) {
        if (!this.isVisible) return;
        
        switch (e.key) {
            case 'ArrowDown':
                e.preventDefault();
                this.selectedIndex = Math.min(this.selectedIndex + 1, this.suggestions.length - 1);
                this.updateSelection();
                break;
                
            case 'ArrowUp':
                e.preventDefault();
                this.selectedIndex = Math.max(this.selectedIndex - 1, -1);
                this.updateSelection();
                break;
                
            case 'Enter':
                e.preventDefault();
                if (this.selectedIndex >= 0) {
                    this.selectSuggestion(this.selectedIndex);
                } else {
                    this.performSearch();
                }
                break;
                
            case 'Escape':
                e.preventDefault();
                this.hideSuggestions();
                this.input.blur();
                break;
        }
    }
    
    updateSelection() {
        const items = this.suggestionsElement.querySelectorAll('.suggestion-item');
        items.forEach((item, index) => {
            item.classList.toggle('selected', index === this.selectedIndex);
        });
        
        // –ü—Ä–æ–∫—Ä—É—Ç–∫–∞ –∫ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É —ç–ª–µ–º–µ–Ω—Ç—É
        if (this.selectedIndex >= 0) {
            const selectedItem = items[this.selectedIndex];
            if (selectedItem) {
                selectedItem.scrollIntoView({ block: 'nearest' });
            }
        }
    }
    
    selectSuggestion(index) {
        console.log('üî• selectSuggestion called, index:', index, 'total suggestions:', this.suggestions.length);
        if (index >= 0 && index < this.suggestions.length) {
            const suggestion = this.suggestions[index];
            console.log('üî• Selected suggestion:', suggestion);
            
            // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ï—Å–ª–∏ –µ—Å—Ç—å URL –≤ suggestion, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –ø–æ –Ω–µ–º—É
            if (suggestion.url) {
                console.log('üî• Navigating to URL:', suggestion.url);
                window.location.href = suggestion.url;
                return;
            }
            
            this.input.value = suggestion.text;
            this.hideSuggestions();
            
            if (this.options.onSelect) {
                console.log('üî• Calling onSelect callback');
                this.options.onSelect(suggestion);
            } else {
                console.log('üî• No onSelect, calling performSearch');
                this.performSearch(suggestion);
            }
        }
    }
    
    performSearch(suggestion = null) {
        const query = this.input.value.trim();
        if (query && this.options.onSearch) {
            this.options.onSearch(query, suggestion);
        }
    }
    
    // –ü—É–±–ª–∏—á–Ω—ã–µ –º–µ—Ç–æ–¥—ã
    clear() {
        this.input.value = '';
        this.hideSuggestions();
    }
    
    destroy() {
        if (this.debounceTimer) {
            clearTimeout(this.debounceTimer);
        }
        this.container.remove();
        this.cache.clear();
    }
}

// CSS —Å—Ç–∏–ª–∏ –¥–ª—è –∞–≤—Ç–æ–∫–æ–º–ø–ª–∏—Ç–∞
const autocompleteStyles = `
    .smart-autocomplete-container {
        position: absolute;
        top: 100%;
        left: 0;
        right: 0;
        z-index: 999999;
        opacity: 0;
        transform: translateY(-10px);
        transition: all 0.2s ease;
        pointer-events: none;
    }
    
    .smart-autocomplete-container.visible {
        opacity: 1;
        transform: translateY(0);
        pointer-events: auto;
    }
    
    .smart-autocomplete-suggestions {
        background: white;
        border: 1px solid #e5e7eb;
        border-radius: 8px;
        box-shadow: 0 10px 25px rgba(0, 0, 0, 0.1);
        margin-top: 4px;
        max-height: 320px;
        overflow-y: auto;
    }
    
    .suggestion-item {
        display: flex;
        align-items: center;
        padding: 12px 16px;
        cursor: pointer;
        border-bottom: 1px solid #f3f4f6;
        transition: background-color 0.15s ease;
    }
    
    .suggestion-item:last-child {
        border-bottom: none;
    }
    
    .suggestion-item:hover,
    .suggestion-item.selected {
        background-color: #f8fafc;
    }
    
    .suggestion-icon {
        width: 20px;
        height: 20px;
        margin-right: 12px;
        color: #0088cc;
        display: flex;
        align-items: center;
        justify-content: center;
    }
    
    .suggestion-content {
        flex: 1;
        min-width: 0;
    }
    
    .suggestion-text {
        font-size: 14px;
        font-weight: 500;
        color: #1f2937;
        margin-bottom: 2px;
    }
    
    .suggestion-text mark {
        background-color: #fef3c7;
        color: #d97706;
        padding: 0;
    }
    
    .suggestion-subtitle {
        font-size: 12px;
        color: #6b7280;
    }
    
    .suggestion-type {
        font-size: 11px;
        color: #9ca3af;
        text-transform: uppercase;
        letter-spacing: 0.5px;
    }
    
    .suggestion-loading,
    .suggestion-no-results {
        display: flex;
        align-items: center;
        justify-content: center;
        padding: 20px;
        color: #6b7280;
        font-size: 14px;
    }
    
    .loading-spinner {
        width: 16px;
        height: 16px;
        border: 2px solid #e5e7eb;
        border-top: 2px solid #0088cc;
        border-radius: 50%;
        animation: spin 1s linear infinite;
        margin-right: 8px;
    }
    
    @keyframes spin {
        0% { transform: rotate(0deg); }
        100% { transform: rotate(360deg); }
    }
    
    /* –ê–¥–∞–ø—Ç–∞—Ü–∏—è –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö */
    @media (max-width: 768px) {
        .smart-autocomplete-suggestions {
            max-height: 280px;
        }
        
        .suggestion-item {
            padding: 14px 16px;
        }
        
        .suggestion-text {
            font-size: 15px;
        }
    }
`;

// –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∏–ª–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É
if (!document.querySelector('#smart-autocomplete-styles')) {
    const styleElement = document.createElement('style');
    styleElement.id = 'smart-autocomplete-styles';
    styleElement.textContent = autocompleteStyles;
    document.head.appendChild(styleElement);
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–ª–∞—Å—Å
window.SmartAutocomplete = SmartAutocomplete;