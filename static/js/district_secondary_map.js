/**
 * Secondary District Map Initializer
 * InBack.ru - –æ—Ç–¥–µ–ª—å–Ω—ã–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ç–æ—Ä –¥–ª—è –≤—Ç–æ—Ä–æ–π –∫–∞—Ä—Ç—ã —Ä–∞–π–æ–Ω–∞
 * –ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–æ–±–ª–µ–º—ã —Å –±–ª–æ–∫–∏—Ä–æ–≤–∫–æ–π inline JavaScript
 */

// ‚úÖ IMMEDIATE DEBUG LOG
console.log('üì¶ district_secondary_map.js FILE LOADED!');

window.addEventListener('DOMContentLoaded', function() {
    console.log('üöÄ Secondary district map DOMContentLoaded event fired!');
    
    const mapElement = document.getElementById('secondary-district-map');
    console.log('üîç Looking for element #secondary-district-map:', mapElement);
    
    if (!mapElement) {
        console.log('‚ùå Secondary map element NOT FOUND - exiting');
        return;
    }
    
    console.log('‚úÖ Secondary map element found');
    
    // Polling –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ Yandex Maps API
    function waitForYandexMaps() {
        if (!window.ymaps) {
            console.log('‚è≥ Waiting for Yandex Maps API...');
            setTimeout(waitForYandexMaps, 200);
            return;
        }
        
        console.log('‚úÖ Yandex Maps API loaded');
        initializeSecondaryMap();
    }
    
    function initializeSecondaryMap() {
        ymaps.ready(function() {
            try {
                console.log('üó∫Ô∏è Initializing secondary district map');
                
                // –ü–æ–ª—É—á–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∏–∑ –≥–ª–æ–±–∞–ª—å–Ω–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ
                const coords = window.districtCoords || {
                    latitude: 45.0355,
                    longitude: 38.9753,
                    zoom_level: 13
                };
                
                console.log('üìç Using coordinates:', coords);
                
                // –°–æ–∑–¥–∞—ë–º –∫–∞—Ä—Ç—É
                const secondaryMap = new ymaps.Map('secondary-district-map', {
                    center: [coords.latitude, coords.longitude],
                    zoom: coords.zoom_level,
                    controls: ['zoomControl', 'typeSelector', 'fullscreenControl']
                });
                
                console.log('‚úÖ Secondary map created successfully');
                
                // –î–æ–±–∞–≤–ª—è–µ–º –º–∞—Ä–∫–µ—Ä —Ä–∞–π–æ–Ω–∞
                const districtName = window.districtName || '–†–∞–π–æ–Ω';
                const placemark = new ymaps.Placemark([coords.latitude, coords.longitude], {
                    balloonContentHeader: '<strong style="color: #0088CC;">' + districtName + '</strong>',
                    balloonContentBody: '<span style="font-size: 12px; color: #666;">–†–∞–π–æ–Ω –ö—Ä–∞—Å–Ω–æ–¥–∞—Ä–∞</span><br><div style="margin-top: 8px;"><strong style="color: #0088CC; font-size: 14px;">–ù–æ–≤–æ—Å—Ç—Ä–æ–π–∫–∏ —Å –∫–µ—à–±–µ–∫–æ–º</strong></div>',
                    hintContent: districtName
                }, {
                    preset: 'islands#blueIcon',
                    iconColor: '#0088CC'
                });
                
                secondaryMap.geoObjects.add(placemark);
                console.log('‚úÖ District marker added to secondary map');
                
                // ‚úÖ –î–û–ë–ê–í–õ–Ø–ï–ú –ó–ê–ì–†–£–ó–ö–£ –ò –û–¢–û–ë–†–ê–ñ–ï–ù–ò–ï POI –ò–ù–§–†–ê–°–¢–†–£–ö–¢–£–†–´
                loadAndDisplayPOI(secondaryMap, coords);
                
                // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ñ–∏–ª—å—Ç—Ä–∞ –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–ª—è –≤—Ç–æ—Ä–æ–π –∫–∞—Ä—Ç—ã
                initializeSecondaryInfrastructureFilter(secondaryMap);
                
            } catch (error) {
                console.error('‚ùå Secondary map initialization error:', error);
            }
        });
    }
    
    // ‚úÖ –§–£–ù–ö–¶–ò–Ø –ó–ê–ì–†–£–ó–ö–ò –ò –û–¢–û–ë–†–ê–ñ–ï–ù–ò–Ø POI 
    function loadAndDisplayPOI(map, coords) {
        console.log('üîÑ Loading POI data for secondary map...');
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—É —Å API
        fetch('/api/infrastructure?lat=' + coords.latitude + '&lng=' + coords.longitude + '&radius=2000')
            .then(response => response.json())
            .then(poiData => {
                console.log('üìç Secondary map POI data received:', poiData);
                
                // –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è POI (–∫–∞–∫ –Ω–∞ –ø–µ—Ä–≤–æ–π –∫–∞—Ä—Ç–µ)
                window.allSecondaryPoiPlacemarks = [];
                window.secondaryPoiDataByCategory = poiData;
                
                // –î–æ–±–∞–≤–ª—è–µ–º POI –Ω–∞ –∫–∞—Ä—Ç—É
                Object.keys(poiData).forEach(category => {
                    const items = poiData[category];
                    if (!items || items.length === 0) return;
                    
                    // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∞—Ä–∫–µ—Ä–æ–≤ –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
                    const limitedItems = items.slice(0, 8);
                    
                    limitedItems.forEach(poi => {
                        if (!poi.lat || !poi.lng) return;
                        
                        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–∫–æ–Ω–∫—É –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                        const iconConfig = getPoiIconConfig(category);
                        
                        const placemark = new ymaps.Placemark([poi.lat, poi.lng], {
                            balloonContentHeader: '<strong>' + (poi.name || 'POI') + '</strong>',
                            balloonContentBody: getCategoryLabel(category),
                            hintContent: poi.name || category
                        }, {
                            preset: iconConfig.preset,
                            iconColor: iconConfig.color
                        });
                        
                        // –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∫ –ø–ª–µ–π—Å–º–∞—Ä–∫—É –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
                        placemark.options.set('category', category);
                        
                        map.geoObjects.add(placemark);
                        window.allSecondaryPoiPlacemarks.push(placemark);
                    });
                    
                    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤
                    if (items.length > 8) {
                        console.log(`${category}: –ø–æ–∫–∞–∑–∞–Ω–æ ${limitedItems.length} –∏–∑ ${items.length} –æ–±—ä–µ–∫—Ç–æ–≤ –Ω–∞ –≤—Ç–æ—Ä–æ–π –∫–∞—Ä—Ç–µ`);
                    }
                });
                
                console.log('‚úÖ Secondary map POI loaded successfully');
                
            })
            .catch(error => {
                console.error('‚ùå Error loading secondary map POI:', error);
            });
    }
    
    // ‚úÖ –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –ò–ö–û–ù–û–ö POI –ü–û –ö–ê–¢–ï–ì–û–†–ò–Ø–ú
    function getPoiIconConfig(category) {
        const configs = {
            'education': { preset: 'islands#greenIcon', color: '#4CAF50' },
            'medical': { preset: 'islands#redIcon', color: '#f44336' },
            'shopping': { preset: 'islands#orangeIcon', color: '#FF9800' },
            'transport': { preset: 'islands#blueIcon', color: '#2196F3' },
            'leisure': { preset: 'islands#violetIcon', color: '#9C27B0' },
            'finance': { preset: 'islands#yellowIcon', color: '#FFEB3B' },
            'sports': { preset: 'islands#pinkIcon', color: '#E91E63' }
        };
        return configs[category] || { preset: 'islands#grayIcon', color: '#9E9E9E' };
    }
    
    // ‚úÖ –ü–û–õ–£–ß–ï–ù–ò–ï –ß–ò–¢–ê–ï–ú–´–• –ù–ê–ó–í–ê–ù–ò–ô –ö–ê–¢–ï–ì–û–†–ò–ô
    function getCategoryLabel(category) {
        const labels = {
            'education': '–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ',
            'medical': '–ú–µ–¥–∏—Ü–∏–Ω–∞',
            'shopping': '–¢–æ—Ä–≥–æ–≤–ª—è',
            'transport': '–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç',
            'leisure': '–î–æ—Å—É–≥',
            'finance': '–§–∏–Ω–∞–Ω—Å—ã',
            'sports': '–°–ø–æ—Ä—Ç'
        };
        return labels[category] || category;
    }

    function initializeSecondaryInfrastructureFilter(map) {
        try {
            const toggleBtn = document.getElementById('secondary-infrastructure-toggle');
            const panel = document.getElementById('secondary-infrastructure-panel');
            
            if (!toggleBtn || !panel) {
                console.log('‚ö†Ô∏è Secondary infrastructure filter elements not found');
                return;
            }
            
            console.log('‚úÖ Secondary infrastructure filter elements found');
            
            // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –¥–ª—è –∫–Ω–æ–ø–∫–∏ toggle
            toggleBtn.addEventListener('click', function(e) {
                e.stopPropagation();
                toggleBtn.classList.toggle('active');
                panel.classList.toggle('active');
                console.log('üîò Secondary infrastructure filter toggled');
            });
            
            // ‚úÖ –î–û–ë–ê–í–õ–Ø–ï–ú –§–£–ù–ö–¶–ò–û–ù–ê–õ–¨–ù–û–°–¢–¨ –§–ò–õ–¨–¢–†–ê–¶–ò–ò POI –ú–ê–†–ö–ï–†–û–í
            setupSecondaryPoiFiltering(map, panel);
            
            // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø—Ä–∏ –∫–ª–∏–∫–µ –≤–Ω–µ –ø–∞–Ω–µ–ª–∏
            document.addEventListener('click', function(event) {
                if (!event.target.closest('.infrastructure-filter')) {
                    toggleBtn.classList.remove('active');
                    panel.classList.remove('active');
                }
            });
            
            console.log('‚úÖ Secondary infrastructure filter initialized');
            
        } catch (error) {
            console.error('‚ùå Secondary infrastructure filter error:', error);
        }
    }
    
    // ‚úÖ –§–£–ù–ö–¶–ò–Ø –ù–ê–°–¢–†–û–ô–ö–ò –§–ò–õ–¨–¢–†–ê–¶–ò–ò POI –ú–ê–†–ö–ï–†–û–í
    function setupSecondaryPoiFiltering(map, panel) {
        try {
            // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ —á–µ–∫–±–æ–∫—Å—ã —Ñ–∏–ª—å—Ç—Ä–æ–≤ –≤ –ø–∞–Ω–µ–ª–∏
            const filterCheckboxes = panel.querySelectorAll('input[type="checkbox"]');
            console.log('üîç Found filter checkboxes:', filterCheckboxes.length);
            
            // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –Ω–∞ –∫–∞–∂–¥—ã–π —á–µ–∫–±–æ–∫—Å
            filterCheckboxes.forEach(checkbox => {
                checkbox.addEventListener('change', function() {
                    console.log('üìã Filter checkbox changed:', checkbox.id, checkbox.checked);
                    updateSecondaryPoiVisibility(map);
                });
            });
            
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≤–∏–¥–∏–º–æ—Å—Ç—å POI —Å–æ–≥–ª–∞—Å–Ω–æ —Ç–µ–∫—É—â–∏–º —Ñ–∏–ª—å—Ç—Ä–∞–º
            updateSecondaryPoiVisibility(map);
            
            console.log('‚úÖ Secondary POI filtering setup complete');
            
        } catch (error) {
            console.error('‚ùå Error setting up secondary POI filtering:', error);
        }
    }
    
    // ‚úÖ –§–£–ù–ö–¶–ò–Ø –û–ë–ù–û–í–õ–ï–ù–ò–Ø –í–ò–î–ò–ú–û–°–¢–ò POI –ú–ê–†–ö–ï–†–û–í
    function updateSecondaryPoiVisibility(map) {
        if (!window.allSecondaryPoiPlacemarks || !map) {
            console.log('‚ö†Ô∏è Secondary POI placemarks or map not available yet');
            return;
        }
        
        try {
            // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã –∏–∑ —á–µ–∫–±–æ–∫—Å–æ–≤
            const activeFilters = [];
            const checkboxes = document.querySelectorAll('#secondary-infrastructure-panel input[type="checkbox"]:checked');
            
            checkboxes.forEach(checkbox => {
                // –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–∑ ID —á–µ–∫–±–æ–∫—Å–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, medical-filter -> medical)
                const category = checkbox.id.replace('-filter', '');
                activeFilters.push(category);
            });
            
            console.log('üéØ Active secondary filters:', activeFilters);
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –≤–∏–¥–∏–º–æ—Å—Ç—å –∫–∞–∂–¥–æ–≥–æ POI –º–∞—Ä–∫–µ—Ä–∞
            window.allSecondaryPoiPlacemarks.forEach(placemark => {
                const category = placemark.options.get('category');
                if (activeFilters.length === 0 || activeFilters.includes(category)) {
                    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–∞—Ä–∫–µ—Ä
                    if (map.geoObjects.indexOf(placemark) < 0) {
                        map.geoObjects.add(placemark);
                    }
                } else {
                    // –°–∫—Ä—ã–≤–∞–µ–º –º–∞—Ä–∫–µ—Ä
                    map.geoObjects.remove(placemark);
                }
            });
            
            console.log(`‚úÖ Updated visibility for ${window.allSecondaryPoiPlacemarks.length} secondary POI markers`);
            
        } catch (error) {
            console.error('‚ùå Error updating secondary POI visibility:', error);
        }
    }

    // –ó–∞–ø—É—Å–∫ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
    waitForYandexMaps();
});