// ‚úÖ PROPERTIES AJAX SORTING - VERSION 1761505200
console.log('üî•üî•üî• PROPERTIES-SORTING.JS LOADED - AJAX VERSION üî•üî•üî•');

// –ì–ª–æ–±–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è AJAX-—Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
window.sortProperties = function() {
    console.log('üöÄ sortProperties() –í–´–ó–í–ê–ù - AJAX MODE');
    
    const sortSelect = document.getElementById('sort-select');
    if (!sortSelect) {
        console.error('‚ùå #sort-select element not found!');
        return;
    }
    
    const sortBy = sortSelect.value;
    console.log('üìä Sort type selected:', sortBy);
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
    showLoadingIndicator();
    
    // –§–æ—Ä–º–∏—Ä—É–µ–º URL —Å —Ç–µ–∫—É—â–∏–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –∏ –Ω–æ–≤–æ–π —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–æ–π
    const currentUrl = new URLSearchParams(window.location.search);
    if (sortBy) {
        currentUrl.set('sort', sortBy);
    } else {
        currentUrl.delete('sort');
    }
    
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –Ω–∞ –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
    currentUrl.set('page', '1');
    
    const apiUrl = '/api/properties/list?' + currentUrl.toString();
    console.log('üì° Fetching:', apiUrl);
    
    // AJAX –∑–∞–ø—Ä–æ—Å
    fetch(apiUrl)
        .then(response => {
            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }
            return response.json();
        })
        .then(data => {
            console.log('‚úÖ API Response:', data);
            
            if (data.success && data.properties) {
                // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –æ–±—ä–µ–∫—Ç–æ–≤
                updatePropertiesList(data.properties);
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –ø–∞–≥–∏–Ω–∞—Ü–∏—é
                updatePagination(data.pagination);
                
                // ‚úÖ –ö–†–ò–¢–ò–ß–ù–û: –°–±—Ä–∞—Å—ã–≤–∞–µ–º infinite scroll –î–û –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è view mode
                if (window.infiniteScrollManager && data.pagination) {
                    window.infiniteScrollManager.reset(data.pagination.page, data.pagination.has_next);
                    console.log('‚ôæÔ∏è Infinite scroll reset after sorting to page', data.pagination.page);
                }
                
                // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ—Å–ª–µ AJAX –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
                if (typeof window.currentViewMode !== 'undefined' && window.currentViewMode) {
                    if (window.currentViewMode === 'grid' && typeof window.switchToGridView === 'function') {
                        console.log('üîÑ Applying GRID view after AJAX sort');
                        window.switchToGridView();
                    } else if (typeof window.switchToListView === 'function') {
                        console.log('üîÑ Applying LIST view after AJAX sort');
                        window.switchToListView();
                    }
                } else {
                    // Default to list view if currentViewMode is not set
                    if (typeof window.switchToListView === 'function') {
                        console.log('üîÑ Applying default LIST view after AJAX sort');
                        window.switchToListView();
                    }
                }
                
                // –û–±–Ω–æ–≤–ª—è–µ–º URL –±–µ–∑ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏
                const newUrl = window.location.pathname + '?' + currentUrl.toString();
                window.history.pushState({}, '', newUrl);
                
                // –°–∫—Ä–æ–ª–ª–∏–º –Ω–∞–≤–µ—Ä—Ö —Å–ø–∏—Å–∫–∞
                scrollToPropertiesList();
                
                console.log(`‚úÖ Sorted ${data.properties.length} properties by ${sortBy}`);
            } else{
                console.error('‚ùå API returned error:', data);
                alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
            }
            
            hideLoadingIndicator();
        })
        .catch(error => {
            console.error('‚ùå Fetch error:', error);
            alert('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É.');
            hideLoadingIndicator();
        });
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –∑–∞–≥—Ä—É–∑–∫–∏
function showLoadingIndicator() {
    const listContainer = document.getElementById('properties-list');
    if (listContainer) {
        listContainer.style.opacity = '0.5';
        listContainer.style.pointerEvents = 'none';
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–∏–Ω–Ω–µ—Ä –µ—Å–ª–∏ –µ–≥–æ –µ—â–µ –Ω–µ—Ç
    if (!document.getElementById('loading-spinner')) {
        const spinner = document.createElement('div');
        spinner.id = 'loading-spinner';
        spinner.className = 'fixed top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 z-50';
        spinner.innerHTML = `
            <div class="animate-spin rounded-full h-16 w-16 border-b-4 border-blue-600"></div>
        `;
        document.body.appendChild(spinner);
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–∫—Ä—ã—Ç–∏—è –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –∑–∞–≥—Ä—É–∑–∫–∏
function hideLoadingIndicator() {
    const listContainer = document.getElementById('properties-list');
    if (listContainer) {
        listContainer.style.opacity = '1';
        listContainer.style.pointerEvents = 'auto';
    }
    
    const spinner = document.getElementById('loading-spinner');
    if (spinner) {
        spinner.remove();
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–∫—Ä–æ–ª–ª–∞ –∫ —Å–ø–∏—Å–∫—É –æ–±—ä–µ–∫—Ç–æ–≤
function scrollToPropertiesList() {
    const listContainer = document.getElementById('properties-list');
    if (listContainer) {
        const offset = 100; // –û—Ç—Å—Ç—É–ø —Å–≤–µ—Ä—Ö—É
        const top = listContainer.getBoundingClientRect().top + window.pageYOffset - offset;
        window.scrollTo({ top: top, behavior: 'smooth' });
    }
}

// –ü—Ä–∏–∫—Ä–µ–ø–ª—è–µ–º event listener –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
document.addEventListener('DOMContentLoaded', function() {
    console.log('üìå DOMContentLoaded - attaching AJAX sort listener');
    
    const sortSelect = document.getElementById('sort-select');
    if (sortSelect) {
        sortSelect.addEventListener('change', function() {
            console.log('üîÑ Sort dropdown changed, calling sortProperties() via AJAX');
            window.sortProperties();
        });
        console.log('‚úÖ AJAX sortProperties event listener attached to #sort-select');
    } else {
        console.error('‚ùå #sort-select element not found during DOMContentLoaded!');
    }
});

console.log('‚úÖ properties-sorting.js AJAX initialization complete');
