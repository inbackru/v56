/**
 * –°–∏—Å—Ç–µ–º–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
 * –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å –¥–ª—è —á–µ–º–ø–∏–æ–Ω–æ–≤ üèÜ
 */

class PerformanceOptimizer {
    constructor() {
        this.config = {
            IMAGE_LAZY_THRESHOLD: 100,      // –ü–∏–∫—Å–µ–ª–µ–π –¥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
            PREFETCH_DELAY: 2000,           // –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–æ–π
            RESOURCE_CACHE_TTL: 3600000,    // 1 —á–∞—Å –∫—ç—à –¥–ª—è —Ä–µ—Å—É—Ä—Å–æ–≤
            COMPRESS_IMAGES: true,          // –°–∂–∞—Ç–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
            ENABLE_SERVICE_WORKER: true     // Service Worker –¥–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
        };
        
        this.metrics = {
            pageLoadTime: 0,
            resourcesLoaded: 0,
            cacheHits: 0,
            totalRequests: 0
        };
        
        this.observers = new Map();
        this.resourceCache = new Map();
        
        this.init();
    }
    
    async init() {
        console.log('üöÄ Performance Optimizer v2.0 - Starting...');
        
        // –ò–∑–º–µ—Ä—è–µ–º –≤—Ä–µ–º—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        this.measurePageLoad();
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ª–µ–Ω–∏–≤—É—é –∑–∞–≥—Ä—É–∑–∫—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        this.initLazyLoading();
        
        // –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∂–∞–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Ä–µ—Å—É—Ä—Å—ã
        this.preloadCriticalResources();
        
        // –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        if (this.config.COMPRESS_IMAGES) {
            this.optimizeImages();
        }
        
        // Service Worker –æ—Ç–∫–ª—é—á–µ–Ω –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
        // if (this.config.ENABLE_SERVICE_WORKER) {
        //     await this.registerServiceWorker();
        // }
        
        // –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        this.startPerformanceMonitoring();
        
        console.log('‚úÖ Performance Optimizer initialized');
    }
    
    measurePageLoad() {
        const startTime = performance.mark('page-start');
        
        window.addEventListener('load', () => {
            const loadTime = performance.now();
            this.metrics.pageLoadTime = loadTime;
            
            console.log(`üìä Page Load Time: ${Math.round(loadTime)}ms`);
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏
            this.sendMetrics({
                type: 'page_load',
                duration: loadTime,
                url: window.location.pathname
            });
        });
        
        // –ò–∑–º–µ—Ä—è–µ–º –ø–µ—Ä–≤—ã–π contentful paint
        if ('PerformanceObserver' in window) {
            const observer = new PerformanceObserver((list) => {
                const entries = list.getEntries();
                entries.forEach(entry => {
                    if (entry.name === 'first-contentful-paint') {
                        console.log(`üé® First Contentful Paint: ${Math.round(entry.startTime)}ms`);
                    }
                });
            });
            observer.observe({ entryTypes: ['paint'] });
        }
    }
    
    initLazyLoading() {
        // Intersection Observer –¥–ª—è –ª–µ–Ω–∏–≤–æ–π –∑–∞–≥—Ä—É–∑–∫–∏
        const imageObserver = new IntersectionObserver((entries) => {
            entries.forEach(entry => {
                if (entry.isIntersecting) {
                    const img = entry.target;
                    this.loadImage(img);
                    imageObserver.unobserve(img);
                }
            });
        }, {
            rootMargin: `${this.config.IMAGE_LAZY_THRESHOLD}px`
        });
        
        // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å data-src
        const lazyImages = document.querySelectorAll('img[data-src]');
        lazyImages.forEach(img => {
            imageObserver.observe(img);
        });
        
        this.observers.set('images', imageObserver);
        
        console.log(`üñºÔ∏è Lazy loading initialized for ${lazyImages.length} images`);
    }
    
    async loadImage(img) {
        const src = img.dataset.src;
        if (!src) return;
        
        try {
            // –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            const image = new Image();
            image.onload = () => {
                img.src = src;
                img.classList.add('loaded');
                img.removeAttribute('data-src');
                this.metrics.resourcesLoaded++;
            };
            image.onerror = () => {
                img.classList.add('error');
                console.warn(`Failed to load image: ${src}`);
            };
            image.src = src;
            
        } catch (error) {
            console.warn('Image loading error:', error);
        }
    }
    
    preloadCriticalResources() {
        // –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∂–∞–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Ä–µ—Å—É—Ä—Å—ã
        const criticalResources = [
            '/static/css/styles.css',
            '/static/js/super_search.js',
            '/static/js/main.js'
        ];
        
        setTimeout(() => {
            criticalResources.forEach(url => {
                this.preloadResource(url);
            });
        }, this.config.PREFETCH_DELAY);
    }
    
    preloadResource(url) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
        if (this.resourceCache.has(url)) {
            this.metrics.cacheHits++;
            return Promise.resolve(this.resourceCache.get(url));
        }
        
        return fetch(url, {
            method: 'GET',
            cache: 'force-cache'
        }).then(response => {
            if (response.ok) {
                this.resourceCache.set(url, response.clone());
                console.log(`üì¶ Preloaded: ${url}`);
                return response;
            }
        }).catch(error => {
            console.warn(`Failed to preload: ${url}`, error);
        });
    }
    
    optimizeImages() {
        // WebP –ø–æ–¥–¥–µ—Ä–∂–∫–∞
        const supportsWebP = this.checkWebPSupport();
        
        if (supportsWebP) {
            // –ó–∞–º–µ–Ω—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è –Ω–∞ WebP –≥–¥–µ –≤–æ–∑–º–æ–∂–Ω–æ
            const images = document.querySelectorAll('img[src*=".jpg"], img[src*=".png"], img[data-src*=".jpg"], img[data-src*=".png"]');
            images.forEach(img => {
                const src = img.src || img.dataset.src;
                if (src) {
                    const webpSrc = src.replace(/\.(jpg|png)$/, '.webp');
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ WebP –≤–µ—Ä—Å–∏–∏
                    this.checkImageExists(webpSrc).then(exists => {
                        if (exists) {
                            if (img.dataset.src) {
                                img.dataset.src = webpSrc;
                            } else {
                                img.src = webpSrc;
                            }
                        }
                    });
                }
            });
        }
    }
    
    checkWebPSupport() {
        try {
            const canvas = document.createElement('canvas');
            canvas.width = 1;
            canvas.height = 1;
            return canvas.toDataURL('image/webp').indexOf('data:image/webp') === 0;
        } catch (error) {
            return false;
        }
    }
    
    async checkImageExists(url) {
        try {
            // –ù–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤–Ω–µ—à–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å CORS –æ—à–∏–±–æ–∫
            if (url.includes('imgdmclk') || url.includes('external')) {
                return false;
            }
            const response = await fetch(url, { method: 'HEAD' });
            return response.ok;
        } catch {
            return false;
        }
    }
    
    async registerServiceWorker() {
        // Service Worker –æ—Ç–∫–ª—é—á–µ–Ω –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
        console.log('Service Worker registration disabled for stability');
        return;
    }
    
    startPerformanceMonitoring() {
        // –ú–æ–Ω–∏—Ç–æ—Ä–∏–º –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥
        setInterval(() => {
            this.collectMetrics();
        }, 10000);
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏ –ø—Ä–∏ —É—Ö–æ–¥–µ —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        window.addEventListener('beforeunload', () => {
            this.sendMetrics({
                type: 'session_end',
                metrics: this.metrics,
                duration: performance.now()
            });
        });
    }
    
    collectMetrics() {
        const metrics = {
            timestamp: Date.now(),
            memory: this.getMemoryUsage(),
            connectionType: this.getConnectionType(),
            resources: this.metrics.resourcesLoaded,
            cacheHitRate: this.metrics.totalRequests > 0 
                ? (this.metrics.cacheHits / this.metrics.totalRequests) * 100 
                : 0
        };
        
        // –õ–æ–≥–∏—Ä—É–µ–º –≤–∞–∂–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
        if (metrics.memory.used > 50) {
            console.warn(`‚ö†Ô∏è High memory usage: ${metrics.memory.used}MB`);
        }
        
        return metrics;
    }
    
    getMemoryUsage() {
        if ('memory' in performance) {
            const memory = performance.memory;
            return {
                used: Math.round(memory.usedJSHeapSize / 1024 / 1024),
                total: Math.round(memory.totalJSHeapSize / 1024 / 1024),
                limit: Math.round(memory.jsHeapSizeLimit / 1024 / 1024)
            };
        }
        return { used: 0, total: 0, limit: 0 };
    }
    
    getConnectionType() {
        if ('connection' in navigator) {
            return navigator.connection.effectiveType || 'unknown';
        }
        return 'unknown';
    }
    
    sendMetrics(data) {
        // –ú–µ—Ç—Ä–∏–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –≤ –∫–æ–Ω—Å–æ–ª—å –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
        console.log('üìä Performance metrics:', data);
        // –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞ –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–π —Å–µ—Ä–≤–µ—Ä
    }
    
    // –ü—É–±–ª–∏—á–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    prefetchPage(url) {
        // –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–ª—è –º–≥–Ω–æ–≤–µ–Ω–Ω–æ–≥–æ –ø–µ—Ä–µ—Ö–æ–¥–∞
        this.preloadResource(url);
        
        // –¢–∞–∫–∂–µ –º–æ–∂–µ–º –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∏—Ç—å —Ä–µ—Å—É—Ä—Å—ã —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        const link = document.createElement('link');
        link.rel = 'prefetch';
        link.href = url;
        document.head.appendChild(link);
    }
    
    optimizePage() {
        // –ü–æ–ª–Ω–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        this.initLazyLoading();
        this.preloadCriticalResources();
        this.optimizeImages();
    }
    
    getPerformanceReport() {
        return {
            pageLoadTime: this.metrics.pageLoadTime,
            resourcesLoaded: this.metrics.resourcesLoaded,
            cacheHitRate: this.metrics.totalRequests > 0 
                ? Math.round((this.metrics.cacheHits / this.metrics.totalRequests) * 100)
                : 0,
            memoryUsage: this.getMemoryUsage(),
            connectionType: this.getConnectionType()
        };
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä–∞
let performanceOptimizer;

document.addEventListener('DOMContentLoaded', () => {
    performanceOptimizer = new PerformanceOptimizer();
    
    // –î–µ–ª–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–º –≥–ª–æ–±–∞–ª—å–Ω–æ
    window.performanceOptimizer = performanceOptimizer;
});

// –≠–∫—Å–ø–æ—Ä—Ç
if (typeof module !== 'undefined' && module.exports) {
    module.exports = PerformanceOptimizer;
}