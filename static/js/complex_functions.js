/**
 * –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ñ–ö (–∂–∏–ª—ã–º–∏ –∫–æ–º–ø–ª–µ–∫—Å–∞–º–∏)
 * –ò–∑–±—Ä–∞–Ω–Ω–æ–µ –∏ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –ñ–ö –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã /residential-complexes
 */

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –ñ–ö
window.ComplexFavorites = {
    // –ó–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–±—Ä–∞–Ω–Ω—ã–µ –ñ–ö –∏–∑ localStorage
    load: function() {
        try {
            const stored = localStorage.getItem('inback_favorite_complexes');
            return stored ? JSON.parse(stored) : [];
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –ñ–ö:', error);
            return [];
        }
    },
    
    // –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–±—Ä–∞–Ω–Ω—ã–µ –ñ–ö –≤ localStorage
    save: function(favorites) {
        try {
            localStorage.setItem('inback_favorite_complexes', JSON.stringify(favorites));
            console.log('–ò–∑–±—Ä–∞–Ω–Ω—ã–µ –ñ–ö —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã:', favorites);
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –ñ–ö:', error);
        }
    },
    
    // –î–æ–±–∞–≤–∏—Ç—å/—É–¥–∞–ª–∏—Ç—å –ñ–ö –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
    toggle: function(complexId) {
        const favorites = this.load();
        const complexIdStr = String(complexId);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å–ª–∏ —É–∂–µ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º
        const existingIndex = favorites.findIndex(fav => {
            const id = typeof fav === 'object' ? fav.id : fav;
            return String(id) === complexIdStr;
        });
        
        if (existingIndex >= 0) {
            // –£–¥–∞–ª—è–µ–º –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
            favorites.splice(existingIndex, 1);
            this.save(favorites);
            this.updateUI(complexId, false);
            this.showNotification('–ñ–ö —É–¥–∞–ª–µ–Ω –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ', 'info');
            return false;
        } else {
            // –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ
            const favoriteItem = {
                id: complexIdStr,
                addedAt: new Date().toLocaleString('ru-RU')
            };
            favorites.push(favoriteItem);
            this.save(favorites);
            this.updateUI(complexId, true);
            this.showNotification('–ñ–ö –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ!', 'success');
            return true;
        }
    },
    
    // –û–±–Ω–æ–≤–∏—Ç—å UI –∫–Ω–æ–ø–∫–∏ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
    updateUI: function(complexId, isFavorited) {
        const hearts = document.querySelectorAll(`[data-complex-id="${complexId}"]`);
        hearts.forEach(heart => {
            if (isFavorited) {
                heart.classList.add('favorited');
                heart.style.color = '#ef4444';
            } else {
                heart.classList.remove('favorited');
                heart.style.color = '#6b7280';
            }
        });
    },
    
    // –û–±–Ω–æ–≤–∏—Ç—å –≤—Å–µ UI —ç–ª–µ–º–µ–Ω—Ç—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
    updateAllUI: function() {
        const favorites = this.load();
        favorites.forEach(fav => {
            const id = typeof fav === 'object' ? fav.id : fav;
            this.updateUI(id, true);
        });
    },
    
    // –ü–æ–∫–∞–∑–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    showNotification: function(message, type = 'info') {
        const notification = document.createElement('div');
        notification.className = `fixed top-4 right-4 z-50 px-4 py-3 rounded-lg shadow-lg transition-all duration-300 transform translate-x-full`;
        
        if (type === 'success') {
            notification.classList.add('bg-green-500', 'text-white');
            notification.innerHTML = `<i class="fas fa-heart mr-2"></i>${message}`;
        } else {
            notification.classList.add('bg-blue-500', 'text-white');
            notification.innerHTML = `<i class="fas fa-info-circle mr-2"></i>${message}`;
        }
        
        document.body.appendChild(notification);
        
        setTimeout(() => notification.classList.remove('translate-x-full'), 100);
        setTimeout(() => {
            notification.classList.add('translate-x-full');
            setTimeout(() => notification.remove(), 300);
        }, 3000);
    }
};

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –ñ–ö
window.ComplexComparison = {
    // –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–∏–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    isManager: function() {
        return Boolean(window.manager_authenticated);
    },
    
    // –ü–æ–ª—É—á–∏—Ç—å CSRF —Ç–æ–∫–µ–Ω
    getCSRFToken: function() {
        const csrfInput = document.querySelector('input[name="csrf_token"]');
        const csrfMeta = document.querySelector('meta[name="csrf-token"]');
        return (csrfInput && csrfInput.value) || (csrfMeta && csrfMeta.content) || '';
    },
    
    // –ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è (–∏–∑ API –¥–ª—è managers, localStorage –¥–ª—è users)
    load: async function() {
        if (this.isManager()) {
            return await this.loadFromAPI();
        } else {
            return this.loadFromLocalStorage();
        }
    },
    
    // –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑ localStorage (–¥–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)
    loadFromLocalStorage: function() {
        try {
            const stored = localStorage.getItem('comparison-data');
            const data = stored ? JSON.parse(stored) : { properties: [], complexes: [] };
            return data.complexes || [];
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –ñ–ö –∏–∑ localStorage:', error);
            return [];
        }
    },
    
    // –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑ API (–¥–ª—è managers)
    loadFromAPI: async function() {
        try {
            console.log('üè¢ Loading complex comparison from API for manager');
            const response = await fetch('/api/manager/comparison/load');
            const result = await response.json();
            
            if (result.success) {
                const complexes = result.complexes || [];
                console.log('üè¢ Loaded complexes from API:', complexes);
                // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–∏–≤–æ–¥–∏–º –≤—Å–µ ID –∫ strings –¥–ª—è consistency
                return complexes.map(c => String(c.complex_id));
            } else {
                console.error('Failed to load comparison from API:', result.error);
                return this.loadFromLocalStorage(); // Fallback
            }
        } catch (error) {
            console.error('Error loading comparison from API:', error);
            return this.loadFromLocalStorage(); // Fallback
        }
    },
    
    // –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è  
    save: function(complexes) {
        if (this.isManager()) {
            // –î–ª—è managers –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ localStorage, —Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ API
            this.updateCounters();
            return;
        } else {
            this.saveToLocalStorage(complexes);
        }
    },
    
    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ localStorage (–¥–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π) 
    saveToLocalStorage: function(complexes) {
        try {
            console.log('=== COMPLEX COMPARISON SAVE START ===');
            console.log('Complexes to save:', complexes);
            
            const currentData = localStorage.getItem('comparison-data');
            const comparisonData = JSON.parse(currentData || '{"properties": [], "complexes": []}');
            comparisonData.complexes = complexes;
            
            localStorage.setItem('comparison-data', JSON.stringify(comparisonData));
            console.log('Data saved to localStorage');
            console.log('=== COMPLEX COMPARISON SAVE END ===');
            
            // –û–±–Ω–æ–≤–∏—Ç—å —Å—á–µ—Ç—á–∏–∫–∏
            this.updateCounters();
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –ñ–ö:', error);
        }
    },
    
    // –î–æ–±–∞–≤–∏—Ç—å –ñ–ö –≤ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ
    add: async function(complexId) {
        try {
            const complexIdStr = String(complexId);
            
            console.log('=== ADDING COMPLEX TO COMPARISON ===');
            console.log('Complex ID to add:', complexIdStr);
            console.log('Is manager:', this.isManager());
            
            // –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            const complexes = await this.load();
            console.log('Current complexes in comparison:', complexes);
            
            if (complexes.includes(complexIdStr)) {
                this.showNotification('–ñ–ö —É–∂–µ –≤ —Å—Ä–∞–≤–Ω–µ–Ω–∏–∏', 'info');
                return false;
            }
            
            if (complexes.length >= 3) {
                this.showNotification('–ú–æ–∂–Ω–æ —Å—Ä–∞–≤–Ω–∏–≤–∞—Ç—å –º–∞–∫—Å–∏–º—É–º 3 –ñ–ö', 'warning');
                return false;
            }
            
            if (this.isManager()) {
                return await this.addComplexForManager(complexIdStr);
            } else {
                return await this.addComplexForUser(complexIdStr, complexes);
            }
        } catch (error) {
            console.error('Error adding complex to comparison:', error);
            this.showNotification('–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ', 'error');
            return false;
        }
    },
    
    // –î–æ–±–∞–≤–∏—Ç—å –ñ–ö –¥–ª—è manager —á–µ—Ä–µ–∑ API
    addComplexForManager: async function(complexId) {
        try {
            console.log('üè¢ Adding complex via manager API:', complexId);
            
            const response = await fetch('/api/manager/comparison/complex/add', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'X-CSRFToken': this.getCSRFToken()
                },
                body: JSON.stringify({
                    complex_id: complexId,
                    complex_name: '–ñ–ö',
                    developer_name: '',
                    district: '',
                    min_price: 0,
                    max_price: 0,
                    buildings_count: 0
                })
            });
            
            const result = await response.json();
            
            if (result.success) {
                console.log('‚úÖ Complex added via manager API');
                this.updateCounters();
                this.showNotification('–ñ–ö –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ!', 'success');
                return true;
            } else {
                console.error('Failed to add complex via manager API:', result.error);
                // –ò–°–ü–†–ê–í–õ–ï–ù–û: –î–æ–±–∞–≤–ª–µ–Ω fallback –Ω–∞ localStorage
                return await this.addComplexForManagerFallback(complexId, 'API returned error');
            }
        } catch (error) {
            console.error('Error adding complex via manager API:', error);
            // –ò–°–ü–†–ê–í–õ–ï–ù–û: –î–æ–±–∞–≤–ª–µ–Ω fallback –Ω–∞ localStorage  
            return await this.addComplexForManagerFallback(complexId, 'API unavailable');
        }
    },
    
    // –ù–û–í–´–ô: Fallback –¥–ª—è manager add –∫–æ–≥–¥–∞ API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
    addComplexForManagerFallback: async function(complexId, reason) {
        try {
            console.log('üîÑ Manager API fallback - using localStorage:', reason);
            
            const complexes = this.loadFromLocalStorage();
            complexes.push(complexId);
            this.saveToLocalStorage(complexes);
            
            this.updateCounters();
            this.showNotification('–ñ–ö –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ (–ª–æ–∫–∞–ª—å–Ω—ã–π —Ä–µ–∂–∏–º)', 'success');
            
            // –ü–æ–∫–∞–∑–∞—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ä–µ–∂–∏–º–µ fallback
            setTimeout(() => {
                this.showNotification('–î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –ª–æ–∫–∞–ª—å–Ω–æ - —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ –ë–î', 'info');
            }, 2000);
            
            return true;
        } catch (error) {
            console.error('Error in manager fallback:', error);
            this.showNotification('–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ', 'error');
            return false;
        }
    },
    
    // –î–æ–±–∞–≤–∏—Ç—å –ñ–ö –¥–ª—è user —á–µ—Ä–µ–∑ localStorage 
    addComplexForUser: async function(complexId, complexes) {
        try {
            console.log('üë§ Adding complex via localStorage for user:', complexId);
            
            complexes.push(complexId);
            this.saveToLocalStorage(complexes);
            
            // –û–±–Ω–æ–≤–∏—Ç—å —Å—á–µ—Ç—á–∏–∫–∏
            this.updateCounters();
            
            this.showNotification('–ñ–ö –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ!', 'success');
            console.log('=== COMPLEX ADDED SUCCESSFULLY ===');
            return true;
        } catch (error) {
            console.error('Error adding complex via localStorage:', error);
            return false;
        }
    },
    
    // –£–¥–∞–ª–∏—Ç—å –ñ–ö –∏–∑ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
    remove: async function(complexId) {
        try {
            const complexIdStr = String(complexId);
            
            console.log('=== REMOVING COMPLEX FROM COMPARISON ===');
            console.log('Complex ID to remove:', complexIdStr);
            console.log('Is manager:', this.isManager());
            
            if (this.isManager()) {
                return await this.removeComplexForManager(complexIdStr);
            } else {
                return await this.removeComplexForUser(complexIdStr);
            }
        } catch (error) {
            console.error('Error removing complex from comparison:', error);
            this.showNotification('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è', 'error');
            return false;
        }
    },
    
    // –£–¥–∞–ª–∏—Ç—å –ñ–ö –¥–ª—è manager —á–µ—Ä–µ–∑ API
    removeComplexForManager: async function(complexId) {
        try {
            console.log('üè¢ Removing complex via manager API:', complexId);
            
            const response = await fetch(`/api/manager/comparison/remove-complex`, {
                method: 'DELETE',
                headers: {
                    'Content-Type': 'application/json',
                    'X-CSRFToken': this.getCSRFToken()
                },
                body: JSON.stringify({ complex_id: complexId })
            });
            
            const result = await response.json();
            
            if (result.success) {
                console.log('‚úÖ Complex removed via manager API');
                this.updateCounters();
                this.showNotification('–ñ–ö —É–¥–∞–ª–µ–Ω –∏–∑ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è', 'info');
                return true;
            } else {
                console.error('Failed to remove complex via manager API:', result.error);
                this.showNotification('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è', 'error');
                return false;
            }
        } catch (error) {
            console.error('Error removing complex via manager API:', error);
            this.showNotification('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è', 'error');
            return false;
        }
    },
    
    // –£–¥–∞–ª–∏—Ç—å –ñ–ö –¥–ª—è user —á–µ—Ä–µ–∑ localStorage
    removeComplexForUser: async function(complexId) {
        try {
            console.log('üë§ Removing complex via localStorage for user:', complexId);
            
            const complexes = await this.load();
            const filtered = complexes.filter(id => id !== complexId);
            
            this.saveToLocalStorage(filtered);
            this.updateCounters();
            this.showNotification('–ñ–ö —É–¥–∞–ª–µ–Ω –∏–∑ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è', 'info');
            return true;
        } catch (error) {
            console.error('Error removing complex via localStorage:', error);
            return false;
        }
    },
    
    // –û–±–Ω–æ–≤–∏—Ç—å —Å—á–µ—Ç—á–∏–∫–∏
    updateCounters: async function() {
        const complexes = await this.load();
        const count = complexes.length;
        
        console.log('=== UPDATING COMPLEX COMPARISON COUNTERS ===');
        console.log('Complex count:', count);
        console.log('Complexes:', complexes);
        
        // –û–±–Ω–æ–≤–∏—Ç—å –≥–ª–æ–±–∞–ª—å–Ω—ã–π —Å—á–µ—Ç—á–∏–∫ –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
        if (window.ComparisonManager && window.ComparisonManager.updateCounters) {
            console.log('Calling ComparisonManager.updateCounters');
            window.ComparisonManager.updateCounters();
        }
        
        // –û–±–Ω–æ–≤–∏—Ç—å –ª–æ–∫–∞–ª—å–Ω—ã–µ —Å—á–µ—Ç—á–∏–∫–∏
        const counters = document.querySelectorAll('[data-comparison-counter]');
        console.log('Found local counters:', counters.length);
        counters.forEach(counter => {
            counter.textContent = count;
            counter.style.display = count > 0 ? 'inline' : 'none';
        });
        
        // –û–±–Ω–æ–≤–∏—Ç—å —Å—á–µ—Ç—á–∏–∫–∏ –¥–∞—à–±–æ—Ä–¥–∞ –µ—Å–ª–∏ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ (–±–µ–∑–æ–ø–∞—Å–Ω–æ)
        console.log('Dashboard counter function available:', typeof window.updateDashboardCounters);
        if (typeof window.updateDashboardCounters === 'function') {
            console.log('Calling dashboard counter update');
            window.updateDashboardCounters();
        } else {
            console.log('updateDashboardCounters not available yet, scheduling retry');
            // –ü–æ–ø—Ä–æ–±—É–µ–º –ø–æ–∑–∂–µ, –∫–æ–≥–¥–∞ –¥–∞—à–±–æ—Ä–¥ –∑–∞–≥—Ä—É–∑–∏—Ç—Å—è
            setTimeout(() => {
                if (typeof window.updateDashboardCounters === 'function') {
                    window.updateDashboardCounters();
                }
            }, 1000);
        }
        
        console.log('=== COUNTERS UPDATE COMPLETE ===');
    },
    
    // –ü–æ–∫–∞–∑–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    showNotification: function(message, type = 'info') {
        const notification = document.createElement('div');
        notification.className = `fixed top-4 right-4 z-50 px-4 py-3 rounded-lg shadow-lg transition-all duration-300 transform translate-x-full`;
        
        switch (type) {
            case 'success':
                notification.classList.add('bg-green-500', 'text-white');
                break;
            case 'warning':
                notification.classList.add('bg-yellow-500', 'text-white');
                break;
            default:
                notification.classList.add('bg-blue-500', 'text-white');
        }
        
        notification.textContent = message;
        document.body.appendChild(notification);
        
        setTimeout(() => notification.classList.remove('translate-x-full'), 100);
        setTimeout(() => {
            notification.classList.add('translate-x-full');
            setTimeout(() => notification.remove(), 300);
        }, 3000);
    }
};

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ HTML
window.toggleComplexFavorite = function(complexId) {
    console.log('–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ –¥–ª—è –ñ–ö:', complexId);
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—É—é –≤–µ—Ä—Å–∏—é –∏–∑ favorites.js, –∫–æ—Ç–æ—Ä–∞—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–∏–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if (window.favoritesManager && window.favoritesManager.toggleComplexFavorite) {
        // –ù–∞–π—Ç–∏ —ç–ª–µ–º–µ–Ω—Ç —Å–µ—Ä–¥–µ—á–∫–∞ –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –≤ —Ñ—É–Ω–∫—Ü–∏—é
        const heartElement = document.querySelector(`.favorite-heart[data-complex-id="${complexId}"]`);
        return window.favoritesManager.toggleComplexFavorite(complexId, heartElement);
    } else {
        // Fallback –∫ —Å—Ç–∞—Ä–æ–π –ø—Ä–æ—Å—Ç–æ–π –≤–µ—Ä—Å–∏–∏
        console.warn('FavoritesManager –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç—É—é –≤–µ—Ä—Å–∏—é');
        return window.ComplexFavorites.toggle(complexId);
    }
};

window.addToComplexCompare = function(complexId) {
    console.log('=== GLOBAL FUNCTION: addToComplexCompare START ===');
    console.log('–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ñ–ö –≤ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ:', complexId);
    
    // –ü—Ä–æ–≤–µ—Ä–∏–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
    const beforeData = localStorage.getItem('comparison-data');
    console.log('–î–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è:', beforeData);
    
    const result = window.ComplexComparison.add(complexId);
    
    // –ü—Ä–æ–≤–µ—Ä–∏–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
    const afterData = localStorage.getItem('comparison-data');
    console.log('–ü–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è:', afterData);
    
    console.log('Result from ComplexComparison.add:', result);
    console.log('=== GLOBAL FUNCTION: addToComplexCompare END ===');
    
    return result;
};

window.removeComplexFromComparison = function(complexId) {
    console.log('–£–¥–∞–ª–µ–Ω–∏–µ –ñ–ö –∏–∑ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è:', complexId);
    return window.ComplexComparison.remove(complexId);
};

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', function() {
    console.log('Complex functions initialized');
    
    // –û–±–Ω–æ–≤–∏—Ç—å UI –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ—Ç favoritesManager (—á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤)
    if (!window.favoritesManager) {
        window.ComplexFavorites.updateAllUI();
    }
    
    // –û–±–Ω–æ–≤–∏—Ç—å —Å—á–µ—Ç—á–∏–∫–∏ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
    window.ComplexComparison.updateCounters();
    
    // –ü—Ä–∏–≤—è–∑–∞—Ç—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫ —Å–µ—Ä–¥–µ—á–∫–∞–º
    document.addEventListener('click', function(e) {
        const heartElement = e.target.closest('.favorite-heart[data-complex-id]');
        if (heartElement) {
            e.preventDefault();
            e.stopPropagation();
            const complexId = heartElement.dataset.complexId;
            window.toggleComplexFavorite(complexId);
        }
    });
});