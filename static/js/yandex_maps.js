/**
 * InBack.ru - –Ø–Ω–¥–µ–∫—Å –∫–∞—Ä—Ç—ã —Å –≥—Ä–∞–Ω–∏—Ü–∞–º–∏ —Ä–∞–π–æ–Ω–æ–≤ –∏ —É–ª–∏—Ü–∞–º–∏
 * –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –ø–æ–ª–∏–≥–æ–Ω–æ–≤ –∏ –ø–æ–ª–∏–ª–∏–Ω–∏–π –∫–∞–∫ –Ω–∞ kayan.ru
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Å—Ç–∞–±–∏–ª—å–Ω—ã–π Yandex Maps API v2.1 —Å —É–ª—É—á—à–µ–Ω–∏—è–º–∏ –∏–∑ v3
 */

class InBackMaps {
    constructor() {
        this.map = null;
        this.districtPolygons = new Map();
        this.streetPolylines = new Map();
        this.isInitialized = false;
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–∞—Ä—Ç—ã —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º–∏ —Å—Ç–∏–ª—è–º–∏
     */
    async initMap(containerId, centerCoords = [45.035180, 38.977414], zoom = 11) {
        return new Promise((resolve, reject) => {
            if (typeof ymaps === 'undefined') {
                reject(new Error('–Ø–Ω–¥–µ–∫—Å.–ö–∞—Ä—Ç—ã API –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω'));
                return;
            }

            ymaps.ready(() => {
                try {
                    // –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç—É —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
                    this.map = new ymaps.Map(containerId, {
                        center: centerCoords,
                        zoom: zoom,
                        controls: ['zoomControl', 'geolocationControl', 'typeSelector', 'fullscreenControl']
                    }, {
                        searchControlProvider: 'yandex#search',
                        suppressMapOpenBlock: true
                    });

                    this.isInitialized = true;
                    console.log('‚úÖ InBack –∫–∞—Ä—Ç–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ (API v2.1)');
                    resolve(this.map);
                } catch (error) {
                    reject(error);
                }
            });
        });
    }

    /**
     * –ó–∞–≥—Ä—É–∂–∞–µ—Ç –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –≥—Ä–∞–Ω–∏—Ü—ã —Ä–∞–π–æ–Ω–∞ —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º–∏ —Å—Ç–∏–ª—è–º–∏
     */
    async loadDistrictBoundaries(districtSlug) {
        if (!this.isInitialized) {
            console.error('‚ùå –ö–∞—Ä—Ç–∞ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
            return false;
        }

        try {
            console.log(`üó∫Ô∏è –ó–∞–≥—Ä—É–∂–∞–µ–º –≥—Ä–∞–Ω–∏—Ü—ã —Ä–∞–π–æ–Ω–∞: ${districtSlug}`);
            
            const response = await fetch(`/api/district/boundaries/${districtSlug}`);
            const data = await response.json();
            
            if (data.success && data.boundaries) {
                const boundaries = data.boundaries;
                
                // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –ø–æ–ª–∏–≥–æ–Ω—ã —Ä–∞–π–æ–Ω–∞ –µ—Å–ª–∏ –µ—Å—Ç—å
                if (this.districtPolygons.has(districtSlug)) {
                    this.map.geoObjects.remove(this.districtPolygons.get(districtSlug));
                }
                
                // –°–æ–∑–¥–∞–µ–º –ø–æ–ª–∏–≥–æ–Ω –∏–∑ GeoJSON –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
                let coordinates;
                
                // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º GeoJSON Feature
                if (boundaries.type === 'Feature') {
                    const geometry = boundaries.geometry;
                    if (geometry.type === 'Polygon') {
                        coordinates = geometry.coordinates;
                    } else if (geometry.type === 'MultiPolygon') {
                        coordinates = geometry.coordinates[0];
                    } else {
                        console.warn('‚ö†Ô∏è –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø –≥–µ–æ–º–µ—Ç—Ä–∏–∏ –≤ Feature:', geometry.type);
                        return false;
                    }
                } else if (boundaries.type === 'Polygon') {
                    coordinates = boundaries.coordinates;
                } else if (boundaries.type === 'MultiPolygon') {
                    // –î–ª—è –º—É–ª—å—Ç–∏–ø–æ–ª–∏–≥–æ–Ω–æ–≤ –±–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π –ø–æ–ª–∏–≥–æ–Ω
                    coordinates = boundaries.coordinates[0];
                } else {
                    console.warn('‚ö†Ô∏è –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø –≥–µ–æ–º–µ—Ç—Ä–∏–∏:', boundaries.type);
                    return false;
                }
                
                // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∏–∑ [lng, lat] –≤ [lat, lng] –¥–ª—è –Ø–Ω–¥–µ–∫—Å –∫–∞—Ä—Ç
                const yandexCoords = coordinates.map(ring => 
                    ring.map(coord => [coord[1], coord[0]])
                );
                
                // –°–æ–∑–¥–∞–µ–º –ø–æ–ª–∏–≥–æ–Ω —Å –∫—Ä–∞—Å–∏–≤—ã–º–∏ —Å—Ç–∏–ª—è–º–∏ –ø–æ –ø—Ä–∏–º–µ—Ä—É –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
                const polygon = new ymaps.Polygon(yandexCoords, {
                    hintContent: `–ì—Ä–∞–Ω–∏—Ü—ã —Ä–∞–π–æ–Ω–∞ ${data.district_name}`,
                    balloonContent: `
                        <div style="padding: 10px;">
                            <strong style="font-size: 16px; color: #1E3A8A;">${data.district_name}</strong><br>
                            <span style="color: #666; font-size: 14px;">–ì—Ä–∞–Ω–∏—Ü—ã —Ä–∞–π–æ–Ω–∞ –Ω–∞ –∫–∞—Ä—Ç–µ</span><br>
                            <span style="color: #888; font-size: 12px;">–ù–∞–∂–º–∏—Ç–µ –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–µ–π</span>
                        </div>
                    `
                }, {
                    // –û—á–µ–Ω—å —è—Ä–∫–∏–µ –∏ –∑–∞–º–µ—Ç–Ω—ã–µ —Å—Ç–∏–ª–∏ –≥—Ä–∞–Ω–∏—Ü —Ä–∞–π–æ–Ω–∞
                    fillColor: '#FF6B35',        // –Ø—Ä–∫–∏–π –æ—Ä–∞–Ω–∂–µ–≤—ã–π
                    fillOpacity: 0.4,            // –£–≤–µ–ª–∏—á–µ–Ω–Ω–∞—è –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å –∑–∞–ª–∏–≤–∫–∏
                    strokeColor: '#DC2626',      // –Ø—Ä–∫–∏–π –∫—Ä–∞—Å–Ω—ã–π –∫–æ–Ω—Ç—É—Ä
                    strokeWidth: 6,              // –£–≤–µ–ª–∏—á–µ–Ω–Ω–∞—è —Ç–æ–ª—â–∏–Ω–∞ –ª–∏–Ω–∏–∏
                    strokeOpacity: 1.0,          // –ü–æ–ª–Ω–∞—è –Ω–µ–ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å
                    strokeStyle: 'solid'
                });
                
                // –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞ –∫–∞—Ä—Ç—É
                this.map.geoObjects.add(polygon);
                this.districtPolygons.set(districtSlug, polygon);
                
                console.log('‚úÖ –ü–æ–ª–∏–≥–æ–Ω –≥—Ä–∞–Ω–∏—Ü —Ä–∞–π–æ–Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω –Ω–∞ –∫–∞—Ä—Ç—É:', districtSlug);
                console.log('–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ø–æ–ª–∏–≥–æ–Ω–∞:', coordinates);
                
                // –ü–æ–¥–≥–æ–Ω—è–µ–º –≤–∏–¥ –∫–∞—Ä—Ç—ã –ø–æ–¥ –≥—Ä–∞–Ω–∏—Ü—ã —Å —É–≤–µ–ª–∏—á–µ–Ω–Ω—ã–º–∏ –æ—Ç—Å—Ç—É–ø–∞–º–∏
                this.map.setBounds(polygon.geometry.getBounds(), {
                    checkZoomRange: true,
                    margin: [80, 80, 80, 80]  // –ë–æ–ª—å—à–µ –æ—Ç—Å—Ç—É–ø—ã –¥–ª—è –ª—É—á—à–µ–≥–æ –æ–±–∑–æ—Ä–∞
                });
                
                // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ: —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∑—É–º –¥–ª—è –≤–∏–¥–∏–º–æ—Å—Ç–∏ –ø–æ–ª–∏–≥–æ–Ω–∞
                setTimeout(() => {
                    if (this.map.getZoom() > 14) {
                        this.map.setZoom(14);
                    }
                }, 500);
                
                console.log(`‚úÖ –ì—Ä–∞–Ω–∏—Ü—ã —Ä–∞–π–æ–Ω–∞ ${data.district_name} –∑–∞–≥—Ä—É–∂–µ–Ω—ã`);
                return true;
                
            } else {
                console.warn(`‚ö†Ô∏è –ì—Ä–∞–Ω–∏—Ü—ã —Ä–∞–π–æ–Ω–∞ ${districtSlug} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã:`, data.error);
                return false;
            }
            
        } catch (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≥—Ä–∞–Ω–∏—Ü —Ä–∞–π–æ–Ω–∞ ${districtSlug}:`, error);
            return false;
        }
    }

    /**
     * –ó–∞–≥—Ä—É–∂–∞–µ—Ç –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –ø–æ–¥—Å–≤–µ—Ç–∫—É —É–ª–∏—Ü—ã —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º–∏ —Å—Ç–∏–ª—è–º–∏
     */
    async loadStreetHighlight(streetSlug) {
        if (!this.isInitialized) {
            console.error('‚ùå –ö–∞—Ä—Ç–∞ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
            return false;
        }

        try {
            console.log(`üõ£Ô∏è –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —É–ª–∏—Ü—ã: ${streetSlug}`);
            
            const response = await fetch(`/api/street/coordinates/${streetSlug}`);
            const data = await response.json();
            
            if (data.success && data.coordinates) {
                const coordinates = data.coordinates;
                
                // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –ø–æ–ª–∏–ª–∏–Ω–∏–∏ —É–ª–∏—Ü—ã –µ—Å–ª–∏ –µ—Å—Ç—å
                if (this.streetPolylines.has(streetSlug)) {
                    this.map.geoObjects.remove(this.streetPolylines.get(streetSlug));
                }
                
                // –°–æ–∑–¥–∞–µ–º –ø–æ–ª–∏–ª–∏–Ω–∏—é –∏–∑ GeoJSON –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
                let lineCoords;
                
                if (coordinates.type === 'LineString') {
                    lineCoords = coordinates.coordinates;
                } else if (coordinates.type === 'MultiLineString') {
                    // –î–ª—è –º—É–ª—å—Ç–∏–ª–∏–Ω–∏–π –±–µ—Ä–µ–º –ø–µ—Ä–≤—É—é –ª–∏–Ω–∏—é
                    lineCoords = coordinates.coordinates[0];
                } else {
                    console.warn('‚ö†Ô∏è –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø –≥–µ–æ–º–µ—Ç—Ä–∏–∏ –¥–ª—è —É–ª–∏—Ü—ã:', coordinates.type);
                    return false;
                }
                
                // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∏–∑ [lng, lat] –≤ [lat, lng] –¥–ª—è –Ø–Ω–¥–µ–∫—Å –∫–∞—Ä—Ç
                const yandexCoords = lineCoords.map(coord => [coord[1], coord[0]]);
                
                // –°–æ–∑–¥–∞–µ–º –ø–æ–ª–∏–ª–∏–Ω–∏—é —Å –∫—Ä–∞—Å–∏–≤—ã–º–∏ —Å—Ç–∏–ª—è–º–∏ –ø–æ –ø—Ä–∏–º–µ—Ä—É –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
                const polyline = new ymaps.Polyline(yandexCoords, {
                    hintContent: `–£–ª–∏—Ü–∞ ${data.street_name}`,
                    balloonContent: `
                        <div style="padding: 10px;">
                            <strong style="font-size: 16px; color: #DC2626;">${data.street_name}</strong><br>
                            <span style="color: #666; font-size: 14px;">–í—ã–¥–µ–ª–µ–Ω–Ω–∞—è —É–ª–∏—Ü–∞ –Ω–∞ –∫–∞—Ä—Ç–µ</span><br>
                            <span style="color: #888; font-size: 12px;">–ú–∞—Ä—à—Ä—É—Ç –ø–æ–¥—Å–≤–µ—á–µ–Ω –∫—Ä–∞—Å–Ω—ã–º</span>
                        </div>
                    `
                }, {
                    // –ö—Ä–∞—Å–∏–≤—ã–µ —Å—Ç–∏–ª–∏ –¥–ª—è —É–ª–∏—Ü –ø–æ –ø—Ä–∏–º–µ—Ä—É –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
                    strokeColor: '#DC2626',
                    strokeWidth: 6,
                    strokeOpacity: 0.8,
                    strokeStyle: 'solid'
                });
                
                // –î–æ–±–∞–≤–ª—è–µ–º –æ–±–≤–æ–¥–∫—É –¥–ª—è –ª—É—á—à–µ–π –≤–∏–¥–∏–º–æ—Å—Ç–∏
                const polylineOutline = new ymaps.Polyline(yandexCoords, {}, {
                    strokeColor: '#FFFFFF',
                    strokeWidth: 8,
                    strokeOpacity: 0.6,
                    strokeStyle: 'solid'
                });
                
                // –î–æ–±–∞–≤–ª—è–µ–º —Å–Ω–∞—á–∞–ª–∞ –æ–±–≤–æ–¥–∫—É, –ø–æ—Ç–æ–º –æ—Å–Ω–æ–≤–Ω—É—é –ª–∏–Ω–∏—é
                this.map.geoObjects.add(polylineOutline);
                this.map.geoObjects.add(polyline);
                
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–µ –ª–∏–Ω–∏–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
                this.streetPolylines.set(streetSlug, {
                    main: polyline,
                    outline: polylineOutline
                });
                
                // –ü–æ–¥–≥–æ–Ω—è–µ–º –≤–∏–¥ –∫–∞—Ä—Ç—ã –ø–æ–¥ —É–ª–∏—Ü—É
                this.map.setBounds(polyline.geometry.getBounds(), {
                    checkZoomRange: true,
                    margin: [100, 100, 100, 100]
                });
                
                console.log(`‚úÖ –£–ª–∏—Ü–∞ ${data.street_name} –ø–æ–¥—Å–≤–µ—á–µ–Ω–∞`);
                return true;
                
            } else {
                console.warn(`‚ö†Ô∏è –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —É–ª–∏—Ü—ã ${streetSlug} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã:`, data.error);
                return false;
            }
            
        } catch (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç —É–ª–∏—Ü—ã ${streetSlug}:`, error);
            return false;
        }
    }

    /**
     * –û—á–∏—â–∞–µ—Ç –≤—Å–µ –ø–æ–ª–∏–≥–æ–Ω—ã –∏ –ø–æ–ª–∏–ª–∏–Ω–∏–∏
     */
    clearAll() {
        // –£–¥–∞–ª—è–µ–º –≤—Å–µ –ø–æ–ª–∏–≥–æ–Ω—ã —Ä–∞–π–æ–Ω–æ–≤
        this.districtPolygons.forEach(polygon => {
            this.map.geoObjects.remove(polygon);
        });
        this.districtPolygons.clear();
        
        // –£–¥–∞–ª—è–µ–º –≤—Å–µ –ø–æ–ª–∏–ª–∏–Ω–∏–∏ —É–ª–∏—Ü (–≤–∫–ª—é—á–∞—è –æ–±–≤–æ–¥–∫–∏)
        this.streetPolylines.forEach(lines => {
            if (lines.main) {
                this.map.geoObjects.remove(lines.main);
            }
            if (lines.outline) {
                this.map.geoObjects.remove(lines.outline);
            }
        });
        this.streetPolylines.clear();
        
        console.log('üßπ –ö–∞—Ä—Ç–∞ –æ—á–∏—â–µ–Ω–∞ –æ—Ç –≤—Å–µ—Ö –ø–æ–ª–∏–≥–æ–Ω–æ–≤ –∏ –ø–æ–ª–∏–ª–∏–Ω–∏–π');
    }

    /**
     * –î–æ–±–∞–≤–ª—è–µ—Ç –º–∞—Ä–∫–µ—Ä –Ω–∞ –∫–∞—Ä—Ç—É —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º–∏ —Å—Ç–∏–ª—è–º–∏
     */
    addMarker(coords, title, content, iconColor = 'blue') {
        if (!this.isInitialized) {
            console.error('‚ùå –ö–∞—Ä—Ç–∞ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
            return null;
        }

        const placemark = new ymaps.Placemark(coords, {
            hintContent: title,
            balloonContent: `
                <div style="padding: 10px; max-width: 250px;">
                    <strong style="font-size: 16px; color: #1E3A8A;">${title}</strong><br>
                    <span style="color: #666; font-size: 14px;">${content}</span>
                </div>
            `
        }, {
            preset: `islands#${iconColor}DotIcon`,
            iconImageSize: [30, 42],
            iconImageOffset: [-15, -42]
        });

        this.map.geoObjects.add(placemark);
        return placemark;
    }

    /**
     * –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ü–µ–Ω—Ç—Ä –∫–∞—Ä—Ç—ã
     */
    setCenter(coords, zoom = null) {
        if (!this.isInitialized) {
            console.error('‚ùå –ö–∞—Ä—Ç–∞ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
            return;
        }

        if (zoom) {
            this.map.setCenter(coords, zoom);
        } else {
            this.map.setCenter(coords);
        }
    }

    /**
     * –ü–æ–ª—É—á–∞–µ—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–∞—Ä—Ç—ã
     */
    getMap() {
        return this.map;
    }
}

// –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–∞—Ä—Ç–∞–º
window.InBackMaps = InBackMaps;

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –µ—Å–ª–∏ –µ—Å—Ç—å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –∫–∞—Ä—Ç—ã
document.addEventListener('DOMContentLoaded', function() {
    const mapContainer = document.getElementById('yandex-map');
    if (mapContainer) {
        console.log('üó∫Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –∫–∞—Ä—Ç—ã, –≥–æ—Ç–æ–≤–∏–º –∫ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏...');
    }
});