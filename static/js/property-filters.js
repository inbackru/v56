// ‚úÖ –§–ò–õ–¨–¢–†–´ –î–õ–Ø –°–¢–†–ê–ù–ò–¶–´ –°–í–û–ô–°–¢–í - AJAX MODE (–∫–∞–∫ –î–æ–º–∫–ª–∏–∫/–¶–∏–∞–Ω)
console.log('üî• property-filters.js –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è - AJAX MODE...');

// ======================
// ABORT CONTROLLER FOR RACE CONDITION PREVENTION
// ======================

// ‚úÖ –ö–†–ò–¢–ò–ß–ù–û: AbortController –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è race conditions
let currentFilterAbortController = null;

// ======================
// LOADING INDICATOR & SCROLL FUNCTIONS
// ======================

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –∑–∞–≥—Ä—É–∑–∫–∏
function showLoadingIndicator() {
    const listContainer = document.getElementById('properties-list');
    if (listContainer) {
        listContainer.style.opacity = '0.5';
        listContainer.style.pointerEvents = 'none';
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–∏–Ω–Ω–µ—Ä –µ—Å–ª–∏ –µ–≥–æ –µ—â–µ –Ω–µ—Ç
    if (!document.getElementById('loading-spinner')) {
        const spinner = document.createElement('div');
        spinner.id = 'loading-spinner';
        spinner.className = 'fixed top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 z-50';
        spinner.innerHTML = `
            <div class="animate-spin rounded-full h-16 w-16 border-b-4 border-blue-600"></div>
        `;
        document.body.appendChild(spinner);
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–∫—Ä—ã—Ç–∏—è –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –∑–∞–≥—Ä—É–∑–∫–∏
function hideLoadingIndicator() {
    const listContainer = document.getElementById('properties-list');
    if (listContainer) {
        listContainer.style.opacity = '1';
        listContainer.style.pointerEvents = 'auto';
    }
    
    const spinner = document.getElementById('loading-spinner');
    if (spinner) {
        spinner.remove();
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–∫—Ä–æ–ª–ª–∞ –∫ —Å–ø–∏—Å–∫—É –æ–±—ä–µ–∫—Ç–æ–≤
function scrollToPropertiesList() {
    const listContainer = document.getElementById('properties-list');
    if (listContainer) {
        const offset = 100; // –û—Ç—Å—Ç—É–ø —Å–≤–µ—Ä—Ö—É
        const top = listContainer.getBoundingClientRect().top + window.pageYOffset - offset;
        window.scrollTo({ top: top, behavior: 'smooth' });
    }
}

// ======================
// DEBOUNCE FUNCTION
// ======================

// Debounce –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –ø–æ–ª–µ–π (300ms –∫–∞–∫ –≤ –î–æ–º–∫–ª–∏–∫/–¶–∏–∞–Ω)
let debounceTimeout = null;
function debounceApplyFilters(delay = 300) {
    if (debounceTimeout) {
        clearTimeout(debounceTimeout);
    }
    debounceTimeout = setTimeout(() => {
        window.applyFilters();
    }, delay);
}

// ======================
// LIVE COUNT UPDATE FUNCTION
// ======================

// Debounce –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—á–µ—Ç—á–∏–∫–∞ (500ms - –±—ã—Å—Ç—Ä–µ–µ —á–µ–º full filter apply)
let countDebounceTimeout = null;
function updateFilteredCount() {
    // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ç–∞–π–º–∞—É—Ç
    if (countDebounceTimeout) {
        clearTimeout(countDebounceTimeout);
    }
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–π —Ç–∞–π–º–∞—É—Ç
    countDebounceTimeout = setTimeout(() => {
        // –°–æ–±–∏—Ä–∞–µ–º —Ç–µ –∂–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ñ–∏–ª—å—Ç—Ä–æ–≤ —á—Ç–æ –∏ –≤ applyFilters
        const params = new URLSearchParams();
        
        // ===== TEXT SEARCH =====
        // –ß–∏—Ç–∞–µ–º –∏–∑ –æ–±–æ–∏—Ö –ø–æ–ª–µ–π (–º–æ–±–∏–ª—å–Ω–æ–≥–æ –∏ –¥–µ—Å–∫—Ç–æ–ø–Ω–æ–≥–æ) - —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã
        const mobileSearch = document.getElementById('property-search');
        const desktopSearch = document.getElementById('property-search-desktop');
        const searchValue = (mobileSearch && mobileSearch.value.trim()) || (desktopSearch && desktopSearch.value.trim());
        
        if (searchValue) {
            params.set('q', searchValue);
        }
        
        // ===== BASIC FILTERS =====
        
        // Room filter
        const checkedRooms = Array.from(document.querySelectorAll('input[data-filter-type="rooms"]:checked')).map(cb => cb.value);
        if (checkedRooms.length > 0) {
            params.set('rooms', checkedRooms.join(','));
        }
        
        // Price filter
        const priceFromEl = document.getElementById('priceFrom') || document.getElementById('price-from');
        const priceToEl = document.getElementById('priceTo') || document.getElementById('price-to');
        const priceFromModalEl = document.getElementById('priceFromModal');
        const priceToModalEl = document.getElementById('priceToModal');
        
        if (priceFromEl && priceFromEl.value) params.set('price_min', priceFromEl.value);
        if (priceToEl && priceToEl.value) params.set('price_max', priceToEl.value);
        if (priceFromModalEl && priceFromModalEl.value) params.set('price_min', priceFromModalEl.value);
        if (priceToModalEl && priceToModalEl.value) params.set('price_max', priceToModalEl.value);
        
        // ===== ADVANCED FILTERS =====
        
        // Developers
        const developers = Array.from(document.querySelectorAll('input[data-filter-type="developer"]:checked'))
            .map(cb => cb.value);
        if (developers.length > 0) {
            params.set('developers', developers.join(','));
        }
        
        // Districts
        const districts = Array.from(document.querySelectorAll('input[data-filter-type="district"]:checked'))
            .map(cb => cb.value);
        if (districts.length > 0) {
            params.set('districts', districts.join(','));
        }
        
        // Completion dates
        const completion = Array.from(document.querySelectorAll('input[data-filter-type="completion"]:checked'))
            .map(cb => cb.value);
        if (completion.length > 0) {
            params.set('completion', completion.join(','));
        }
        
        // Object class
        const objectClass = Array.from(document.querySelectorAll('input[data-filter-type="object_class"]:checked'))
            .map(cb => cb.value);
        if (objectClass.length > 0) {
            params.set('object_class', objectClass.join(','));
        }
        
        // Renovation
        const renovation = Array.from(document.querySelectorAll('input[data-filter-type="renovation"]:checked'))
            .map(cb => cb.value);
        if (renovation.length > 0) {
            params.set('renovation', renovation.join(','));
        }
        
        // Floor options
        const floorOptions = Array.from(document.querySelectorAll('input[data-filter-type="floor_options"]:checked'))
            .map(cb => cb.value);
        if (floorOptions.length > 0) {
            params.set('floor_options', floorOptions.join(','));
        }
        
        // Features
        const features = Array.from(document.querySelectorAll('input[data-filter-type="features"]:checked'))
            .map(cb => cb.value);
        if (features.length > 0) {
            params.set('features', features.join(','));
        }
        
        // Building released
        const buildingReleased = Array.from(document.querySelectorAll('input[data-filter-type="building_released"]:checked'))
            .map(cb => cb.value);
        if (buildingReleased.length > 0) {
            params.set('building_released', buildingReleased.join(','));
        }
        
        // Area range
        const areaFromEl = document.getElementById('areaFrom');
        const areaToEl = document.getElementById('areaTo');
        if (areaFromEl && areaFromEl.value) params.set('area_min', areaFromEl.value);
        if (areaToEl && areaToEl.value) params.set('area_max', areaToEl.value);
        
        // Floor range
        const floorFromEl = document.getElementById('floorFrom');
        const floorToEl = document.getElementById('floorTo');
        if (floorFromEl && floorFromEl.value) params.set('floor_min', floorFromEl.value);
        if (floorToEl && floorToEl.value) params.set('floor_max', floorToEl.value);
        
        // Building floors range
        const maxFloorFromEl = document.getElementById('maxFloorFrom');
        const maxFloorToEl = document.getElementById('maxFloorTo');
        if (maxFloorFromEl && maxFloorFromEl.value) params.set('building_floors_min', maxFloorFromEl.value);
        if (maxFloorToEl && maxFloorToEl.value) params.set('building_floors_max', maxFloorToEl.value);
        
        // Build year range
        const buildYearFromEl = document.getElementById('buildYearFrom');
        const buildYearToEl = document.getElementById('buildYearTo');
        if (buildYearFromEl && buildYearFromEl.value) params.set('build_year_min', buildYearFromEl.value);
        if (buildYearToEl && buildYearToEl.value) params.set('build_year_max', buildYearToEl.value);
        
        // –í—ã–∑—ã–≤–∞–µ–º API –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞
        const apiUrl = '/api/properties/count?' + params.toString();
        console.log('üî¢ Fetching count:', apiUrl);
        
        fetch(apiUrl)
            .then(response => response.json())
            .then(data => {
                if (data.success && typeof data.count !== 'undefined') {
                    const count = data.count;
                    console.log('‚úÖ Count received:', count);
                    
                    // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Å–µ —Å—á–µ—Ç—á–∏–∫–∏
                    const counters = [
                        'filteredResultsCount',
                        'roomsFilteredCount',
                        'priceFilteredCount',
                        'developerFilteredCount'
                    ];
                    
                    counters.forEach(counterId => {
                        const counter = document.getElementById(counterId);
                        if (counter) {
                            counter.textContent = count;
                        }
                    });
                    
                    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω–æ –¥–ª—è –¥—Ä—É–≥–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π
                    window.currentFilteredCount = count;
                } else {
                    console.error('‚ùå Count API error:', data);
                }
            })
            .catch(error => {
                console.error('‚ùå Count fetch error:', error);
            });
    }, 500);
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –≥–ª–æ–±–∞–ª—å–Ω–æ
window.updateFilteredCount = updateFilteredCount;

// ‚úÖ Initialize advanced filters button ("–ï—â–µ" button)
document.addEventListener('DOMContentLoaded', function() {
    console.log('üîß Initializing advanced filters button...');
    
    const advancedButton = document.getElementById('advancedFiltersToggle');
    const advancedPanel = document.getElementById('advancedFiltersPanel');
    const advancedArrow = document.getElementById('advancedFiltersArrow');
    
    if (advancedButton && advancedPanel) {
        advancedButton.addEventListener('click', function(e) {
            e.preventDefault();
            e.stopPropagation();
            
            // Close all dropdowns first
            document.querySelectorAll('.dropdown-menu.open').forEach(menu => {
                menu.classList.remove('open');
            });
            
            // Toggle advanced panel
            const isHidden = advancedPanel.classList.contains('hidden');
            advancedPanel.classList.toggle('hidden');
            
            // –ù–∞ –º–æ–±–∞–π–ª–µ –¥–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω—ã–π —Ä–µ–∂–∏–º
            const isMobile = window.innerWidth <= 640;
            if (isMobile) {
                if (isHidden) {
                    // –û—Ç–∫—Ä—ã–≤–∞–µ–º - –¥–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞—Å—Å
                    advancedPanel.classList.add('mobile-fullscreen');
                    document.body.style.overflow = 'hidden'; // –ë–ª–æ–∫–∏—Ä—É–µ–º —Å–∫—Ä–æ–ª–ª body
                } else {
                    // –ó–∞–∫—Ä—ã–≤–∞–µ–º - —É–±–∏—Ä–∞–µ–º –∫–ª–∞—Å—Å
                    advancedPanel.classList.remove('mobile-fullscreen');
                    document.body.style.overflow = ''; // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–∫—Ä–æ–ª–ª
                }
            }
            
            // Rotate arrow
            if (advancedArrow) {
                if (advancedPanel.classList.contains('hidden')) {
                    advancedArrow.style.transform = 'rotate(0deg)';
                } else {
                    advancedArrow.style.transform = 'rotate(180deg)';
                }
            }
            
            console.log('‚úÖ Advanced filters panel toggled:', !advancedPanel.classList.contains('hidden'), 'Mobile fullscreen:', isMobile);
        });
        console.log('‚úÖ "–ï—â–µ" button handler registered successfully');
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –∑–∞–∫—Ä—ã—Ç–∏—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤
        const closeButton = document.getElementById('closeAdvancedFilters');
        if (closeButton && advancedPanel) {
            closeButton.addEventListener('click', function(e) {
                e.preventDefault();
                e.stopPropagation();
                
                // –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø–∞–Ω–µ–ª—å
                advancedPanel.classList.add('hidden');
                
                // –£–±–∏—Ä–∞–µ–º –ø–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω—ã–π —Ä–µ–∂–∏–º –Ω–∞ –º–æ–±–∞–π–ª–µ
                const isMobile = window.innerWidth <= 640;
                if (isMobile) {
                    advancedPanel.classList.remove('mobile-fullscreen');
                    document.body.style.overflow = ''; // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–∫—Ä–æ–ª–ª
                }
                
                // Rotate arrow back
                if (advancedArrow) {
                    advancedArrow.style.transform = 'rotate(0deg)';
                }
                
                console.log('‚úÖ Advanced filters closed via close button');
            });
            console.log('‚úÖ Close button handler registered');
        }
    } else {
        console.error('‚ùå Advanced filter elements not found:', {advancedButton, advancedPanel, advancedArrow});
    }
    
    // Display active filters on page load (with delay to ensure DOM is ready)
    console.log('üè∑Ô∏è Initializing active filters display...');
    setTimeout(() => {
        if (typeof window.displayActiveFilters === 'function') {
            window.displayActiveFilters();
            console.log('‚úÖ Active filters displayed on page load');
        } else {
            console.log('‚è≥ displayActiveFilters function not yet available, will be loaded later');
        }
    }, 100);
});

// Handle room filter changes - AJAX MODE
window.handleRoomFilterChange = function() {
    const checkedRooms = Array.from(document.querySelectorAll('input[data-filter-type="rooms"]:checked')).map(cb => cb.value);
    console.log('Room filters changed:', checkedRooms);
    
    // Map numeric values to display labels
    const roomLabels = {
        '0': '–°—Ç—É–¥–∏—è',
        '1': '1-–∫–æ–º–Ω',
        '2': '2-–∫–æ–º–Ω',
        '3': '3-–∫–æ–º–Ω',
        '4': '4-–∫–æ–º–Ω'
    };
    
    // Update button text
    const buttonText = document.getElementById('roomsFilterText');
    if (buttonText) {
        if (checkedRooms.length === 0) {
            buttonText.textContent = '–ö–æ–º–Ω–∞—Ç';
        } else if (checkedRooms.length === 1) {
            buttonText.textContent = roomLabels[checkedRooms[0]] || checkedRooms[0];
        } else {
            buttonText.textContent = `${checkedRooms.length} —Ç–∏–ø–æ–≤`;
        }
    }
    
    // ‚úÖ –ö–†–ò–¢–ò–ß–ù–û: –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ñ–∏–ª—å—Ç—Ä–∞
    if (typeof window.updateFilteredCount === 'function') {
        window.updateFilteredCount();
    }
    
    // –ù–ï –ø—Ä–∏–º–µ–Ω—è–µ–º –ø–æ–ª–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ - —Ç–æ–ª—å–∫–æ –æ–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫
    // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –Ω–∞–∂–∞—Ç—å "–ü–æ–∫–∞–∑–∞—Ç—å X –æ–±—ä—è–≤–ª–µ–Ω–∏–π" –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è
    // window.applyFilters(); // ‚ùå –£–ë–†–ê–ù–û - –ø—Ä–∏–º–µ–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –∫–Ω–æ–ø–∫–∏
};

// Apply Filters - AJAX Mode (–∫–∞–∫ –î–æ–º–∫–ª–∏–∫/–¶–∏–∞–Ω)
window.applyFilters = function() {
    console.log('üöÄ applyFilters() CALLED - AJAX MODE');
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º loading indicator
    showLoadingIndicator();
    
    // –°–æ–±–∏—Ä–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ñ–∏–ª—å—Ç—Ä–æ–≤
    const params = new URLSearchParams();
    
    // ===== TEXT SEARCH =====
    
    // Search query (from both mobile and desktop inputs - they are synchronized)
    const mobileSearch = document.getElementById('property-search');
    const desktopSearch = document.getElementById('property-search-desktop');
    const searchValue = (mobileSearch && mobileSearch.value.trim()) || (desktopSearch && desktopSearch.value.trim());
    
    if (searchValue) {
        params.set('q', searchValue);
        console.log('üîç Search query:', searchValue);
    }
    
    // ===== BASIC FILTERS =====
    
    // Room filter (from checkboxes with data-filter-type="rooms")
    const checkedRooms = Array.from(document.querySelectorAll('input[data-filter-type="rooms"]:checked')).map(cb => cb.value);
    if (checkedRooms.length > 0) {
        params.set('rooms', checkedRooms.join(','));
        console.log('üì¶ Rooms collected from checkboxes:', checkedRooms);
    }
    
    // Price filter (values already in millions, no conversion needed)
    const priceFromEl = document.getElementById('priceFrom') || document.getElementById('price-from');
    const priceToEl = document.getElementById('priceTo') || document.getElementById('price-to');
    if (priceFromEl && priceFromEl.value) params.set('price_min', priceFromEl.value);
    if (priceToEl && priceToEl.value) params.set('price_max', priceToEl.value);
    
    // Sort
    const sortSelect = document.getElementById('sort-select');
    if (sortSelect && sortSelect.value) params.set('sort', sortSelect.value);
    
    // ===== ADVANCED FILTERS =====
    
    // Developers (checkboxes with data-filter-type="developer")
    const developers = Array.from(document.querySelectorAll('input[data-filter-type="developer"]:checked'))
        .map(cb => cb.value);
    if (developers.length > 0) {
        params.set('developers', developers.join(','));
    }
    
    // Districts (checkboxes with data-filter-type="district")
    const districts = Array.from(document.querySelectorAll('input[data-filter-type="district"]:checked'))
        .map(cb => cb.value);
    if (districts.length > 0) {
        params.set('districts', districts.join(','));
    }
    
    // Completion dates (checkboxes with data-filter-type="completion")
    const completion = Array.from(document.querySelectorAll('input[data-filter-type="completion"]:checked'))
        .map(cb => cb.value);
    if (completion.length > 0) {
        params.set('completion', completion.join(','));
    }
    
    // Object/Property class (checkboxes with data-filter-type="object_class")
    const objectClass = Array.from(document.querySelectorAll('input[data-filter-type="object_class"]:checked'))
        .map(cb => cb.value);
    if (objectClass.length > 0) {
        params.set('object_class', objectClass.join(','));
    }
    
    // Renovation (checkboxes with data-filter-type="renovation")
    const renovation = Array.from(document.querySelectorAll('input[data-filter-type="renovation"]:checked'))
        .map(cb => cb.value);
    if (renovation.length > 0) {
        params.set('renovation', renovation.join(','));
    }
    
    // Floor options (checkboxes with data-filter-type="floor_options")
    const floorOptions = Array.from(document.querySelectorAll('input[data-filter-type="floor_options"]:checked'))
        .map(cb => cb.value);
    if (floorOptions.length > 0) {
        params.set('floor_options', floorOptions.join(','));
    }
    
    // Features (checkboxes with data-filter-type="features")
    const features = Array.from(document.querySelectorAll('input[data-filter-type="features"]:checked'))
        .map(cb => cb.value);
    if (features.length > 0) {
        params.set('features', features.join(','));
    }
    
    // Building released (checkboxes with data-filter-type="building_released")
    const buildingReleased = Array.from(document.querySelectorAll('input[data-filter-type="building_released"]:checked'))
        .map(cb => cb.value);
    if (buildingReleased.length > 0) {
        params.set('building_released', buildingReleased.join(','));
    }
    
    // Area range (from areaFrom and areaTo inputs)
    const areaFromEl = document.getElementById('areaFrom');
    const areaToEl = document.getElementById('areaTo');
    if (areaFromEl && areaFromEl.value) params.set('area_min', areaFromEl.value);
    if (areaToEl && areaToEl.value) params.set('area_max', areaToEl.value);
    
    // Floor range (from floorFrom and floorTo inputs)
    const floorFromEl = document.getElementById('floorFrom');
    const floorToEl = document.getElementById('floorTo');
    if (floorFromEl && floorFromEl.value) params.set('floor_min', floorFromEl.value);
    if (floorToEl && floorToEl.value) params.set('floor_max', floorToEl.value);
    
    // Building floors range (from maxFloorFrom and maxFloorTo inputs)
    const maxFloorFromEl = document.getElementById('maxFloorFrom');
    const maxFloorToEl = document.getElementById('maxFloorTo');
    if (maxFloorFromEl && maxFloorFromEl.value) params.set('building_floors_min', maxFloorFromEl.value);
    if (maxFloorToEl && maxFloorToEl.value) params.set('building_floors_max', maxFloorToEl.value);
    
    // Build year range (from buildYearFrom and buildYearTo inputs)
    const buildYearFromEl = document.getElementById('buildYearFrom');
    const buildYearToEl = document.getElementById('buildYearTo');
    if (buildYearFromEl && buildYearFromEl.value) params.set('build_year_min', buildYearFromEl.value);
    if (buildYearToEl && buildYearToEl.value) params.set('build_year_max', buildYearToEl.value);
    
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –Ω–∞ –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤
    params.set('page', '1');
    
    // ‚úÖ –ö–†–ò–¢–ò–ß–ù–û: –û—Ç–º–µ–Ω—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –∑–∞–ø—Ä–æ—Å –µ—Å–ª–∏ –æ–Ω –µ—â–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è
    if (currentFilterAbortController) {
        currentFilterAbortController.abort();
        console.log('üö´ Previous filter request aborted');
    }
    currentFilterAbortController = new AbortController();
    
    // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –†–∞–∑–¥–µ–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è fetch –∏ History API
    // –î–ª—è –∑–∞–ø—Ä–æ—Å–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å cache-busting
    const fetchParams = new URLSearchParams(params);
    fetchParams.set('v', Date.now());
    
    const apiUrl = '/api/properties/list?' + fetchParams.toString();
    console.log('üì° AJAX Fetching:', apiUrl);
    
    // AJAX –∑–∞–ø—Ä–æ—Å —Å AbortController
    fetch(apiUrl, { signal: currentFilterAbortController.signal })
        .then(response => {
            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }
            return response.json();
        })
        .then(data => {
            console.log('‚úÖ API Response:', data);
            
            if (data.success && data.properties) {
                // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –æ–±—ä–µ–∫—Ç–æ–≤
                if (typeof window.updatePropertiesList === 'function') {
                    window.updatePropertiesList(data.properties);
                }
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –ø–∞–≥–∏–Ω–∞—Ü–∏—é
                if (typeof window.updatePagination === 'function') {
                    window.updatePagination(data.pagination);
                }
                
                // ‚úÖ –ö–†–ò–¢–ò–ß–ù–û: –°–±—Ä–∞—Å—ã–≤–∞–µ–º infinite scroll –î–û –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è view mode
                if (window.infiniteScrollManager && data.pagination) {
                    window.infiniteScrollManager.reset(data.pagination.page, data.pagination.has_next);
                    console.log('‚ôæÔ∏è Infinite scroll reset after filtering to page', data.pagination.page);
                }
                
                // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ—Å–ª–µ AJAX –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
                if (typeof window.currentViewMode !== 'undefined' && window.currentViewMode) {
                    if (window.currentViewMode === 'grid' && typeof window.switchToGridView === 'function') {
                        console.log('üîÑ Applying GRID view after AJAX filter');
                        window.switchToGridView();
                    } else if (typeof window.switchToListView === 'function') {
                        console.log('üîÑ Applying LIST view after AJAX filter');
                        window.switchToListView();
                    }
                } else {
                    // Default to list view if currentViewMode is not set
                    if (typeof window.switchToListView === 'function') {
                        console.log('üîÑ Applying default LIST view after AJAX filter');
                        window.switchToListView();
                    }
                }
                
                // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –û–±–Ω–æ–≤–ª—è–µ–º URL –ë–ï–ó cache-busting –ø–∞—Ä–∞–º–µ—Ç—Ä–∞
                // params —É–∂–µ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç 'v', —Ç–∞–∫ –∫–∞–∫ –º—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ fetchParams –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
                const newUrl = window.location.pathname + '?' + params.toString();
                window.history.pushState({}, '', newUrl);
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤
                if (typeof window.displayActiveFilters === 'function') {
                    setTimeout(() => window.displayActiveFilters(), 50);
                }
                
                // –°–∫—Ä–æ–ª–ª–∏–º –Ω–∞–≤–µ—Ä—Ö —Å–ø–∏—Å–∫–∞
                scrollToPropertiesList();
                
                console.log(`‚úÖ Filtered ${data.properties.length} properties, total: ${data.pagination.total}`);
            } else {
                console.error('‚ùå API returned error:', data);
                alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
            }
            
            hideLoadingIndicator();
        })
        .catch(error => {
            // ‚úÖ –ö–†–ò–¢–ò–ß–ù–û: –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º AbortError - —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ –ø—Ä–∏ –±—ã—Å—Ç—Ä–æ–π —Å–º–µ–Ω–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤
            if (error.name === 'AbortError') {
                console.log('‚ö†Ô∏è Filter request aborted (user changed filters)');
                hideLoadingIndicator();
                return;
            }
            console.error('‚ùå Fetch error:', error);
            alert('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É.');
            hideLoadingIndicator();
        })
        .finally(() => {
            // ‚úÖ –ö–†–ò–¢–ò–ß–ù–û: –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞
            currentFilterAbortController = null;
        });
};

// Apply price filter - AJAX VERSION (–¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ü—Ä–∏–º–µ–Ω–∏—Ç—å" –≤ –¥—Ä–æ–ø–¥–∞—É–Ω–µ —Ü–µ–Ω—ã)
window.applyPriceFilter = function() {
    const priceFrom = document.getElementById('priceFrom').value;
    const priceTo = document.getElementById('priceTo').value;
    
    console.log('üí∞ Price filter applied:', priceFrom, 'to', priceTo);
    
    // Update button text
    const buttonText = document.getElementById('priceFilterText');
    if (buttonText) {
        if (priceFrom || priceTo) {
            let text = '–¶–µ–Ω–∞ ';
            if (priceFrom) text += `–æ—Ç ${priceFrom}–º–ª–Ω `;
            if (priceTo) text += `–¥–æ ${priceTo}–º–ª–Ω`;
            buttonText.textContent = text.trim();
        } else {
            buttonText.textContent = '–¶–µ–Ω–∞';
        }
    }
    
    // Close dropdown
    const dropdown = document.getElementById('priceDropdown');
    if (dropdown) {
        dropdown.classList.remove('open');
    }
    
    // Apply all filters via AJAX (–º–≥–Ω–æ–≤–µ–Ω–Ω–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è)
    window.applyFilters();
};

// Update advanced filters counter
window.updateAdvancedFiltersCounter = function() {
    const counter = document.getElementById('advancedFiltersCounter');
    if (!counter) return;
    
    let count = 0;
    
    // Count checked filters
    const checkedFilters = document.querySelectorAll('#advancedFiltersPanel input[type="checkbox"]:checked, #advancedFiltersPanel input[type="number"]:valid, #advancedFiltersPanel select:not([value=""])');
    count = checkedFilters.length;
    
    // Update badge
    if (count > 0) {
        counter.textContent = count;
        counter.classList.remove('hidden');
    } else {
        counter.classList.add('hidden');
    }
    
    console.log(`üìä Advanced filters count: ${count}`);
    
    // ‚úÖ –ö–†–ò–¢–ò–ß–ù–û: –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤
    if (typeof window.updateFilteredCount === 'function') {
        window.updateFilteredCount();
    }
};

console.log('‚úÖ property-filters.js loaded successfully');
console.log('‚úÖ Functions registered:', {
    applyFilters: typeof window.applyFilters,
    applyPriceFilter: typeof window.applyPriceFilter,
    handleRoomFilterChange: typeof window.handleRoomFilterChange,
    updateAdvancedFiltersCounter: typeof window.updateAdvancedFiltersCounter
});


// ======================
// FILTER REMOVAL FUNCTIONS
// ======================

// ‚úÖ AJAX VERSION - –º–≥–Ω–æ–≤–µ–Ω–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤
window.removeRoomFilter = function(roomValue) {
    const checkbox = document.querySelector(`input[data-filter-type="rooms"][value="${roomValue}"]`);
    if (checkbox) {
        checkbox.checked = false;
        handleRoomFilterChange(); // –í—ã–∑–æ–≤–µ—Ç applyFilters() –≤–Ω—É—Ç—Ä–∏
    }
};

window.removeDeveloperFilter = function(developerValue) {
    const checkbox = document.querySelector(`input[data-filter-type="developer"][value="${developerValue}"]`);
    if (checkbox) {
        checkbox.checked = false;
        window.applyFilters(); // AJAX —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è
    }
};

window.removePriceFilter = function() {
    const priceFromEl = document.getElementById('priceFrom');
    const priceToEl = document.getElementById('priceTo');
    if (priceFromEl) priceFromEl.value = '';
    if (priceToEl) priceToEl.value = '';
    
    const buttonText = document.getElementById('priceFilterText');
    if (buttonText) buttonText.textContent = '–¶–µ–Ω–∞ –æ—Ç-–¥–æ, ‚ÇΩ';
    
    window.applyFilters(); // AJAX —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è
};

window.removeCompletionFilter = function(completionValue) {
    const checkbox = document.querySelector(`input[data-filter-type="completion"][value="${completionValue}"]`);
    if (checkbox) {
        checkbox.checked = false;
        window.applyFilters(); // AJAX —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è
    }
};

window.removeObjectClassFilter = function(objectClassValue) {
    const checkbox = document.querySelector(`input[data-filter-type="object_class"][value="${objectClassValue}"]`);
    if (checkbox) {
        checkbox.checked = false;
        window.applyFilters(); // AJAX —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è
    }
};

window.removeAreaFilter = function() {
    const areaFromEl = document.getElementById('areaFrom');
    const areaToEl = document.getElementById('areaTo');
    if (areaFromEl) areaFromEl.value = '';
    if (areaToEl) areaToEl.value = '';
    window.applyFilters(); // AJAX —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è
};

window.removeFloorFilter = function() {
    const floorFromEl = document.getElementById('floorFrom');
    const floorToEl = document.getElementById('floorTo');
    if (floorFromEl) floorFromEl.value = '';
    if (floorToEl) floorToEl.value = '';
    window.applyFilters(); // AJAX —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è
};

window.removeBuildingFloorFilter = function() {
    const buildingFloorFromEl = document.getElementById('maxFloorFrom') || document.querySelector('input[name="max_floor_from"]');
    const buildingFloorToEl = document.getElementById('maxFloorTo') || document.querySelector('input[name="max_floor_to"]');
    if (buildingFloorFromEl) buildingFloorFromEl.value = '';
    if (buildingFloorToEl) buildingFloorToEl.value = '';
    window.applyFilters(); // AJAX —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è
};

window.removeRenovationFilter = function(renovationValue) {
    const checkbox = document.querySelector(`input[data-filter-type="renovation"][value="${renovationValue}"]`);
    if (checkbox) {
        checkbox.checked = false;
        window.applyFilters(); // AJAX —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è
    }
};

window.removeBuildingStatusFilter = function(statusValue) {
    const checkbox = document.querySelector(`input[data-filter-type="building_released"][value="${statusValue}"]`);
    if (checkbox) {
        checkbox.checked = false;
        window.applyFilters(); // AJAX —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è
    }
};

// ‚úÖ DISPLAY ACTIVE FILTERS - –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã
window.displayActiveFilters = function() {
    const container = document.getElementById('active-filters-list');
    if (!container) {
        console.log('‚ö†Ô∏è Active filters container not found');
        return;
    }
    
    const parentContainer = document.getElementById('active-filters-container');
    if (!parentContainer) {
        console.log('‚ö†Ô∏è Parent active filters container not found');
        return;
    }
    
    const urlParams = new URLSearchParams(window.location.search);
    const filterTags = [];
    
    // –ú–∞–ø–ø–∏–Ω–≥ –¥–ª—è —á–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º—ã—Ö –Ω–∞–∑–≤–∞–Ω–∏–π
    const filterLabels = {
        '0': '–°—Ç—É–¥–∏—è', '1': '1-–∫–æ–º–Ω', '2': '2-–∫–æ–º–Ω', '3': '3-–∫–æ–º–Ω', '4': '4-–∫–æ–º–Ω',
        'true': '–°–¥–∞–Ω–Ω—ã–π', 'false': '–í —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–µ',
        '–ë–∏–∑–Ω–µ—Å': '–ö–ª–∞—Å—Å: –ë–∏–∑–Ω–µ—Å', '–ö–æ–º—Ñ–æ—Ä—Ç': '–ö–ª–∞—Å—Å: –ö–æ–º—Ñ–æ—Ä—Ç', '–ü—Ä–µ–º–∏—É–º': '–ö–ª–∞—Å—Å: –ü—Ä–µ–º–∏—É–º',
        'no_renovation': '–ë–µ–∑ –æ—Ç–¥–µ–ª–∫–∏', 'with_renovation': '–ß–∏—Å—Ç–æ–≤–∞—è',
        'not_first': '–ù–µ –ø–µ—Ä–≤—ã–π —ç—Ç–∞–∂', 'not_last': '–ù–µ –ø–æ—Å–ª–µ–¥–Ω–∏–π —ç—Ç–∞–∂'
    };
    
    // Rooms
    const rooms = urlParams.get('rooms');
    if (rooms) {
        rooms.split(',').forEach(room => {
            filterTags.push({ label: filterLabels[room] || `${room}-–∫–æ–º–Ω`, param: 'rooms', value: room });
        });
    }
    
    // Price (support both price_min/price_max and priceFrom/priceTo formats)
    const priceMin = urlParams.get('price_min') || urlParams.get('priceFrom');
    const priceMax = urlParams.get('price_max') || urlParams.get('priceTo');
    if (priceMin || priceMax) {
        let label = '–¶–µ–Ω–∞: ';
        label += priceMin && priceMax ? `${priceMin}-${priceMax} –º–ª–Ω ‚ÇΩ` : (priceMin ? `–æ—Ç ${priceMin} –º–ª–Ω ‚ÇΩ` : `–¥–æ ${priceMax} –º–ª–Ω ‚ÇΩ`);
        filterTags.push({ label, param: 'price', value: null });
    }
    
    // Area
    const areaMin = urlParams.get('area_min');
    const areaMax = urlParams.get('area_max');
    if (areaMin || areaMax) {
        let label = '–ü–ª–æ—â–∞–¥—å: ';
        label += areaMin && areaMax ? `${areaMin}-${areaMax} –º¬≤` : (areaMin ? `–æ—Ç ${areaMin} –º¬≤` : `–¥–æ ${areaMax} –º¬≤`);
        filterTags.push({ label, param: 'area', value: null });
    }
    
    // Floor
    const floorMin = urlParams.get('floor_min');
    const floorMax = urlParams.get('floor_max');
    if (floorMin || floorMax) {
        let label = '–≠—Ç–∞–∂: ';
        label += floorMin && floorMax ? `${floorMin}-${floorMax}` : (floorMin ? `–æ—Ç ${floorMin}` : `–¥–æ ${floorMax}`);
        filterTags.push({ label, param: 'floor', value: null });
    }
    
    // Building floors
    const buildingFloorsMin = urlParams.get('building_floors_min');
    const buildingFloorsMax = urlParams.get('building_floors_max');
    if (buildingFloorsMin || buildingFloorsMax) {
        let label = '–≠—Ç–∞–∂–Ω–æ—Å—Ç—å: ';
        label += buildingFloorsMin && buildingFloorsMax ? `${buildingFloorsMin}-${buildingFloorsMax}` : (buildingFloorsMin ? `–æ—Ç ${buildingFloorsMin}` : `–¥–æ ${buildingFloorsMax}`);
        filterTags.push({ label, param: 'building_floors', value: null });
    }
    
    // Build year
    const buildYearMin = urlParams.get('build_year_min');
    const buildYearMax = urlParams.get('build_year_max');
    if (buildYearMin || buildYearMax) {
        let label = '–ì–æ–¥ —Å–¥–∞—á–∏: ';
        label += buildYearMin && buildYearMax ? `${buildYearMin}-${buildYearMax}` : (buildYearMin ? `–æ—Ç ${buildYearMin}` : `–¥–æ ${buildYearMax}`);
        filterTags.push({ label, param: 'build_year', value: null });
    }
    
    // Developers - use ID ‚Üí Name mapping
    const developers = urlParams.get('developers');
    if (developers) {
        console.log('üèóÔ∏è Developer IDs from URL:', developers);
        console.log('üó∫Ô∏è Available developersMap:', window.developersMap);
        developers.split(',').forEach(dev => {
            // Try to get developer name from mapping (dev is now an ID)
            const developerName = window.developersMap && window.developersMap[dev] 
                ? window.developersMap[dev]
                : decodeURIComponent(dev); // Fallback for old URLs with names
            console.log(`üîç Developer ID=${dev} ‚Üí Name="${developerName}"`);
            filterTags.push({ label: developerName, param: 'developers', value: dev });
        });
    }
    
    // Districts
    const districts = urlParams.get('districts');
    if (districts) {
        districts.split(',').forEach(dist => {
            filterTags.push({ label: decodeURIComponent(dist), param: 'districts', value: dist });
        });
    }
    
    // Building released
    const buildingReleased = urlParams.get('building_released');
    if (buildingReleased) {
        buildingReleased.split(',').forEach(status => {
            filterTags.push({ label: filterLabels[status] || status, param: 'building_released', value: status });
        });
    }
    
    // Object class
    const objectClass = urlParams.get('object_class');
    if (objectClass) {
        objectClass.split(',').forEach(cls => {
            const decoded = decodeURIComponent(cls);
            filterTags.push({ label: filterLabels[decoded] || `–ö–ª–∞—Å—Å: ${decoded}`, param: 'object_class', value: cls });
        });
    }
    
    // Renovation
    const renovation = urlParams.get('renovation');
    if (renovation) {
        renovation.split(',').forEach(ren => {
            filterTags.push({ label: filterLabels[ren] || ren, param: 'renovation', value: ren });
        });
    }
    
    // Floor options
    const floorOptions = urlParams.get('floor_options');
    if (floorOptions) {
        floorOptions.split(',').forEach(opt => {
            filterTags.push({ label: filterLabels[opt] || opt, param: 'floor_options', value: opt });
        });
    }
    
    // Completion
    const completion = urlParams.get('completion');
    if (completion) {
        completion.split(',').forEach(year => {
            filterTags.push({ label: `–°–¥–∞—á–∞: ${decodeURIComponent(year)}`, param: 'completion', value: year });
        });
    }
    
    // Cashback only
    if (urlParams.get('cashback_only') === 'true') {
        filterTags.push({ label: '–¢–æ–ª—å–∫–æ —Å –∫—ç—à–±–µ–∫–æ–º', param: 'cashback_only', value: 'true' });
    }
    
    // Render
    if (filterTags.length > 0) {
        container.innerHTML = filterTags.map(tag => `
            <span class="inline-flex items-center gap-1 bg-blue-100 text-blue-800 px-3 py-1 rounded-full text-sm">
                ${tag.label}
                <button onclick="removeFilter('${tag.param}', ${tag.value ? `'${tag.value}'` : 'null'})" 
                        class="text-blue-600 hover:text-blue-800 font-bold ml-1">√ó</button>
            </span>
        `).join('');
        parentContainer.classList.remove('hidden');
        console.log('‚úÖ Displayed', filterTags.length, 'active filters');
    } else {
        parentContainer.classList.add('hidden');
        console.log('‚ÑπÔ∏è No active filters to display');
    }
};

// Remove individual filter - AJAX VERSION
window.removeFilter = function(param, value) {
    console.log('üóëÔ∏è Removing filter:', param, value);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º UI —ç–ª–µ–º–µ–Ω—Ç—ã (—Å–Ω–∏–º–∞–µ–º —á–µ–∫–±–æ–∫—Å—ã –∏–ª–∏ –æ—á–∏—â–∞–µ–º –ø–æ–ª—è)
    if (value === null) {
        // –î–ª—è range —Ñ–∏–ª—å—Ç—Ä–æ–≤ (—Ü–µ–Ω–∞, –ø–ª–æ—â–∞–¥—å, —ç—Ç–∞–∂ –∏ —Ç.–¥.)
        if (param === 'price') {
            const priceFromEl = document.getElementById('priceFrom');
            const priceToEl = document.getElementById('priceTo');
            if (priceFromEl) priceFromEl.value = '';
            if (priceToEl) priceToEl.value = '';
            const buttonText = document.getElementById('priceFilterText');
            if (buttonText) buttonText.textContent = '–¶–µ–Ω–∞ –æ—Ç-–¥–æ, ‚ÇΩ';
        }
        else if (param === 'area') {
            const areaFromEl = document.getElementById('areaFrom');
            const areaToEl = document.getElementById('areaTo');
            if (areaFromEl) areaFromEl.value = '';
            if (areaToEl) areaToEl.value = '';
        }
        else if (param === 'floor') {
            const floorFromEl = document.getElementById('floorFrom');
            const floorToEl = document.getElementById('floorTo');
            if (floorFromEl) floorFromEl.value = '';
            if (floorToEl) floorToEl.value = '';
        }
        else if (param === 'building_floors') {
            const maxFloorFromEl = document.getElementById('maxFloorFrom');
            const maxFloorToEl = document.getElementById('maxFloorTo');
            if (maxFloorFromEl) maxFloorFromEl.value = '';
            if (maxFloorToEl) maxFloorToEl.value = '';
        }
        else if (param === 'build_year') {
            const buildYearFromEl = document.getElementById('buildYearFrom');
            const buildYearToEl = document.getElementById('buildYearTo');
            if (buildYearFromEl) buildYearFromEl.value = '';
            if (buildYearToEl) buildYearToEl.value = '';
        }
    } else {
        // –î–ª—è —á–µ–∫–±–æ–∫—Å–æ–≤
        const checkbox = document.querySelector(`input[data-filter-type="${param}"][value="${value}"]`);
        if (checkbox) {
            checkbox.checked = false;
        }
    }
    
    // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã —á–µ—Ä–µ–∑ AJAX
    window.applyFilters();
};

console.log('‚úÖ Active filters display functions loaded');
console.log('üöÄüöÄüöÄ PROPERTY-FILTERS.JS - AJAX MODE ACTIVATED üöÄüöÄüöÄ');
console.log('‚úÖ Functions registered:', {
    applyFilters: typeof window.applyFilters,
    applyPriceFilter: typeof window.applyPriceFilter,
    handleRoomFilterChange: typeof window.handleRoomFilterChange,
    updateAdvancedFiltersCounter: typeof window.updateAdvancedFiltersCounter,
    removeFilter: typeof window.removeFilter,
    debounceApplyFilters: typeof debounceApplyFilters
});
