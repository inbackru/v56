"""
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–æ–≥–∞—â–µ–Ω–∏–µ –∞–¥—Ä–µ—Å–æ–≤ –¥–ª—è –Ω–æ–≤—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏
–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç 3 —Ä–µ–∂–∏–º–∞:
1. –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π - –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–∞–∂–¥–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞ (—á–µ—Ä–µ–∑ SQLAlchemy events)
2. Batch - –º–∞—Å—Å–æ–≤–æ–µ –æ–±–æ–≥–∞—â–µ–Ω–∏–µ –ø–∞–∫–µ—Ç–∞–º–∏ (–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞)
3. –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π - —Ñ–æ–Ω–æ–≤–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –±–µ–∑ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ (–¥–ª—è —Ç—ã—Å—è—á –æ–±—ä–µ–∫—Ç–æ–≤)
"""

from sqlalchemy import event
from services.geocoding import get_geocoding_service
from services.dadata_client import get_dadata_client
import logging

logger = logging.getLogger(__name__)


class AutoGeocodingService:
    """–°–µ—Ä–≤–∏—Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–æ–≥–∞—â–µ–Ω–∏—è –∞–¥—Ä–µ—Å–æ–≤"""
    
    def __init__(self):
        self.geocoding_service = get_geocoding_service()  # Yandex (–¥–ª—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç)
        self.dadata_client = get_dadata_client()  # DaData (–¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–π —Ä–∞–∑–±–∏–≤–∫–∏ –∞–¥—Ä–µ—Å–∞)
        self.batch_mode = False  # –§–ª–∞–≥ –¥–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–æ–≥–∞—â–µ–Ω–∏—è
        self.stats = {
            'total_processed': 0,
            'total_enriched': 0,
            'total_errors': 0,
            'total_skipped': 0
        }
    
    def enable_batch_mode(self):
        """–í–∫–ª—é—á–∏—Ç—å batch —Ä–µ–∂–∏–º (–æ—Ç–∫–ª—é—á–∞–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–æ–≥–∞—â–µ–Ω–∏–µ)"""
        self.batch_mode = True
        logger.info("üîÑ Batch mode enabled - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–æ–≥–∞—â–µ–Ω–∏–µ –æ—Ç–∫–ª—é—á–µ–Ω–æ")
    
    def disable_batch_mode(self):
        """–í—ã–∫–ª—é—á–∏—Ç—å batch —Ä–µ–∂–∏–º (–≤–∫–ª—é—á–∞–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–æ–≥–∞—â–µ–Ω–∏–µ)"""
        self.batch_mode = False
        logger.info("‚úÖ Batch mode disabled - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–æ–≥–∞—â–µ–Ω–∏–µ –≤–∫–ª—é—á–µ–Ω–æ")
    
    def enrich_property(self, property_obj):
        """
        –û–±–æ–≥–∞—Ç–∏—Ç—å –æ–¥–∏–Ω –æ–±—ä–µ–∫—Ç –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ –∏—Å–ø–æ–ª—å–∑—É—è DaData
        
        Args:
            property_obj: Property model instance
            
        Returns:
            bool: True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ –æ–±–æ–≥–∞—â—ë–Ω
        """
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –µ—Å–ª–∏ batch mode –≤–∫–ª—é—á—ë–Ω
        if self.batch_mode:
            return False
        
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –µ—Å–ª–∏ —É–∂–µ –æ–±–æ–≥–∞—â—ë–Ω (–ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã–µ –ø–æ–ª—è)
        if property_obj.parsed_city and property_obj.parsed_area:
            self.stats['total_skipped'] += 1
            return False
        
        # –ù—É–∂–µ–Ω –∞–¥—Ä–µ—Å –¥–ª—è DaData
        if not property_obj.address:
            self.stats['total_skipped'] += 1
            return False
        
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º DaData –¥–ª—è –ø–æ–ª–Ω–æ–π —Ä–∞–∑–±–∏–≤–∫–∏ –∞–¥—Ä–µ—Å–∞
            enriched_data = self.dadata_client.enrich_property_address(property_obj.address)
            
            if enriched_data:
                # –ó–∞–ø–æ–ª–Ω—è–µ–º –≤—Å–µ –∞–¥—Ä–µ—Å–Ω—ã–µ –ø–æ–ª—è
                property_obj.parsed_city = enriched_data.get('parsed_city', '')
                property_obj.parsed_district = enriched_data.get('parsed_district', '')  # Legacy: area + settlement
                property_obj.parsed_street = enriched_data.get('parsed_street', '')
                property_obj.parsed_area = enriched_data.get('parsed_area', '')
                property_obj.parsed_settlement = enriched_data.get('parsed_settlement', '')
                property_obj.parsed_house = enriched_data.get('parsed_house', '')
                property_obj.parsed_block = enriched_data.get('parsed_block', '')
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –µ—Å–ª–∏ –∏—Ö –Ω–µ –±—ã–ª–æ
                if not property_obj.latitude and enriched_data.get('latitude'):
                    property_obj.latitude = enriched_data.get('latitude')
                    property_obj.longitude = enriched_data.get('longitude')
                
                self.stats['total_enriched'] += 1
                logger.info(f"‚úÖ –û–±–æ–≥–∞—â—ë–Ω: {property_obj.title[:50]} ‚Üí {property_obj.parsed_city}, {property_obj.parsed_street} {property_obj.parsed_house}")
                return True
            else:
                self.stats['total_errors'] += 1
                return False
                
        except Exception as e:
            self.stats['total_errors'] += 1
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–æ–≥–∞—â–µ–Ω–∏—è {property_obj.id}: {e}")
            return False
        finally:
            self.stats['total_processed'] += 1
    
    def enrich_batch(self, properties, batch_size=50, dry_run=False):
        """
        –ú–∞—Å—Å–æ–≤–æ–µ –æ–±–æ–≥–∞—â–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–æ–≤ –ø–∞–∫–µ—Ç–∞–º–∏
        –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ —Ç—ã—Å—è—á –æ–±—ä–µ–∫—Ç–æ–≤
        
        Args:
            properties: List of Property objects
            batch_size: –†–∞–∑–º–µ—Ä –ø–∞–∫–µ—Ç–∞ –¥–ª—è –∫–æ–º–º–∏—Ç–∞ –≤ –ë–î
            dry_run: –ï—Å–ª–∏ True, –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –ë–î (—Ç–æ–ª—å–∫–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ)
            
        Returns:
            dict: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        """
        from app import db
        
        total = len(properties)
        logger.info(f"\n{'='*80}")
        logger.info(f"üöÄ –ú–ê–°–°–û–í–û–ï –û–ë–û–ì–ê–©–ï–ù–ò–ï: {total} –æ–±—ä–µ–∫—Ç–æ–≤")
        logger.info(f"   –†–∞–∑–º–µ—Ä –ø–∞–∫–µ—Ç–∞: {batch_size}")
        if dry_run:
            logger.warning(f"   ‚ö†Ô∏è  DRY RUN MODE - –∏–∑–º–µ–Ω–µ–Ω–∏—è –ù–ï –±—É–¥—É—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!")
        logger.info(f"{'='*80}\n")
        
        enriched = 0
        errors = 0
        skipped = 0
        
        for i, prop in enumerate(properties, 1):
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –µ—Å–ª–∏ —É–∂–µ –æ–±–æ–≥–∞—â—ë–Ω (–ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã–µ –ø–æ–ª—è)
            if prop.parsed_city and prop.parsed_area:
                skipped += 1
                continue
            
            # –ù—É–∂–µ–Ω –∞–¥—Ä–µ—Å –¥–ª—è DaData
            if not prop.address:
                skipped += 1
                continue
            
            try:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º DaData –¥–ª—è –ø–æ–ª–Ω–æ–π —Ä–∞–∑–±–∏–≤–∫–∏ –∞–¥—Ä–µ—Å–∞
                enriched_data = self.dadata_client.enrich_property_address(prop.address)
                
                if enriched_data:
                    prop.parsed_city = enriched_data.get('parsed_city', '')
                    prop.parsed_district = enriched_data.get('parsed_district', '')
                    prop.parsed_street = enriched_data.get('parsed_street', '')
                    prop.parsed_area = enriched_data.get('parsed_area', '')
                    prop.parsed_settlement = enriched_data.get('parsed_settlement', '')
                    prop.parsed_house = enriched_data.get('parsed_house', '')
                    prop.parsed_block = enriched_data.get('parsed_block', '')
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –µ—Å–ª–∏ –∏—Ö –Ω–µ –±—ã–ª–æ
                    if not prop.latitude and enriched_data.get('latitude'):
                        prop.latitude = enriched_data.get('latitude')
                        prop.longitude = enriched_data.get('longitude')
                    
                    enriched += 1
                    
                    # –õ–æ–≥–∏—Ä—É–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 10 –æ–±—ä–µ–∫—Ç–æ–≤
                    if i % 10 == 0:
                        logger.info(f"[{i}/{total}] –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {enriched} –æ–±–æ–≥–∞—â–µ–Ω–æ, {errors} –æ—à–∏–±–æ–∫, {skipped} –ø—Ä–æ–ø—É—â–µ–Ω–æ")
                else:
                    errors += 1
                    
            except Exception as e:
                errors += 1
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ [{i}/{total}]: {e}")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î –∫–∞–∂–¥—ã–µ batch_size –æ–±—ä–µ–∫—Ç–æ–≤ (–ø—Ä–æ–ø—É—Å–∫–∞–µ–º –≤ dry_run —Ä–µ–∂–∏–º–µ)
            if i % batch_size == 0:
                if dry_run:
                    logger.info(f"üîç [DRY RUN] –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ {i} –æ–±—ä–µ–∫—Ç–æ–≤")
                else:
                    try:
                        db.session.commit()
                        logger.info(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {i} –æ–±—ä–µ–∫—Ç–æ–≤ –≤ –ë–î")
                    except Exception as e:
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î: {e}")
                        db.session.rollback()
        
        # –§–∏–Ω–∞–ª—å–Ω—ã–π –∫–æ–º–º–∏—Ç (–ø—Ä–æ–ø—É—Å–∫–∞–µ–º –≤ dry_run —Ä–µ–∂–∏–º–µ)
        if dry_run:
            logger.info(f"üîç [DRY RUN] –û—Ç–∫–∞—Ç—ã–≤–∞–µ–º –≤—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è")
            db.session.rollback()
        else:
            try:
                db.session.commit()
                logger.info(f"‚úÖ –§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ë–î")
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")
                db.session.rollback()
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        stats = {
            'total': total,
            'enriched': enriched,
            'errors': errors,
            'skipped': skipped,
            'cache_stats': self.geocoding_service.get_stats()
        }
        
        logger.info(f"\n{'='*80}")
        logger.info(f"üìä –ò–¢–û–ì–ò –û–ë–û–ì–ê–©–ï–ù–ò–Ø")
        logger.info(f"   –í—Å–µ–≥–æ –æ–±—ä–µ–∫—Ç–æ–≤: {total}")
        logger.info(f"   ‚úÖ –û–±–æ–≥–∞—â–µ–Ω–æ: {enriched}")
        logger.info(f"   ‚ùå –û—à–∏–±–æ–∫: {errors}")
        logger.info(f"   ‚è≠Ô∏è  –ü—Ä–æ–ø—É—â–µ–Ω–æ: {skipped}")
        logger.info(f"   üì° API –∑–∞–ø—Ä–æ—Å–æ–≤: {stats['cache_stats']['api_requests']}")
        logger.info(f"   üíæ Cache hit rate: {stats['cache_stats']['cache_hit_rate']}%")
        logger.info(f"{'='*80}\n")
        
        return stats
    
    def get_stats(self):
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
        return self.stats
    
    def reset_stats(self):
        """–°–±—Ä–æ—Å–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
        self.stats = {
            'total_processed': 0,
            'total_enriched': 0,
            'total_errors': 0,
            'total_skipped': 0
        }


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
_auto_geocoding_service = None

def get_auto_geocoding_service():
    """–ü–æ–ª—É—á–∏—Ç—å singleton —ç–∫–∑–µ–º–ø–ª—è—Ä AutoGeocodingService"""
    global _auto_geocoding_service
    if _auto_geocoding_service is None:
        _auto_geocoding_service = AutoGeocodingService()
    return _auto_geocoding_service


def setup_auto_geocoding(db):
    """
    –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–æ–≥–∞—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ SQLAlchemy events
    –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –æ–¥–∏–Ω —Ä–∞–∑ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    
    Args:
        db: SQLAlchemy database instance
    """
    from models import Property
    
    auto_service = get_auto_geocoding_service()
    
    @event.listens_for(Property, 'before_insert')
    def enrich_before_insert(mapper, connection, target):
        """–û–±–æ–≥–∞—â–∞–µ–º –∞–¥—Ä–µ—Å –ø–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º –æ–±—ä–µ–∫—Ç–∞"""
        # –¢–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∏ –µ—â—ë –Ω–µ –æ–±–æ–≥–∞—â—ë–Ω
        if target.latitude and target.longitude and not target.parsed_city:
            logger.debug(f"üîç Auto-geocoding: {target.title[:50]}")
            auto_service.enrich_property(target)
    
    @event.listens_for(Property, 'before_update')
    def enrich_before_update(mapper, connection, target):
        """–û–±–æ–≥–∞—â–∞–µ–º –∞–¥—Ä–µ—Å –µ—Å–ª–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∏–∑–º–µ–Ω–∏–ª–∏—Å—å"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∏–∑–º–µ–Ω–∏–ª–∏—Å—å
        state = db.inspect(target)
        lat_changed = state.attrs.latitude.history.has_changes()
        lon_changed = state.attrs.longitude.history.has_changes()
        
        if (lat_changed or lon_changed) and target.latitude and target.longitude:
            logger.debug(f"üîÑ Coordinates changed, re-geocoding: {target.title[:50]}")
            auto_service.enrich_property(target)
    
    logger.info("‚úÖ Auto-geocoding events registered for Property model")
