import os
import sys
import smtplib
import asyncio
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
from flask import render_template, url_for, request
from datetime import datetime

# SendGrid integration - from blueprint:python_sendgrid
try:
    from sendgrid import SendGridAPIClient
    from sendgrid.helpers.mail import Mail, Email, To, Content
    sendgrid_available = True
except ImportError:
    # Fallback classes for LSP compatibility
    class SendGridAPIClient:
        def __init__(self, *args): pass
        def send(self, *args): pass
    class Mail:
        def __init__(self, *args, **kwargs): pass
    class Email:
        def __init__(self, *args): pass
    class To:
        def __init__(self, *args): pass
    class Content:
        def __init__(self, *args): pass
    sendgrid_available = False
    print("SendGrid not available - falling back to SMTP")

# Email configuration - using standard SMTP
EMAIL_HOST = 'smtp.gmail.com'  # Gmail SMTP –¥–ª—è —Ä–µ–∞–ª—å–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
EMAIL_PORT = 587
EMAIL_USER = os.environ.get('EMAIL_USER', 'test.inback@gmail.com')  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π email
EMAIL_PASSWORD = os.environ.get('EMAIL_PASSWORD', '')  # App Password –æ—Ç Gmail

# Telegram configuration - using working token
TELEGRAM_BOT_TOKEN = os.environ.get('TELEGRAM_BOT_TOKEN')
TELEGRAM_CHAT_ID = os.environ.get('TELEGRAM_CHAT_ID')
# For manager notifications (insurance applications, etc.)
MANAGER_TELEGRAM_IDS = os.environ.get('MANAGER_TELEGRAM_IDS', '')

try:
    from telegram.ext import Application
    from telegram import Bot
    if TELEGRAM_BOT_TOKEN:
        telegram_bot = Bot(token=TELEGRAM_BOT_TOKEN)
        print("‚úÖ Telegram bot initialized successfully")
    else:
        telegram_bot = None
        print("TELEGRAM_BOT_TOKEN not found")
except ImportError:
    print("Telegram bot setup failed: ImportError with telegram package")
    telegram_bot = None
except Exception as e:
    telegram_bot = None
    print(f"Telegram bot setup failed: {e}")

def send_email_sendgrid(to_email, subject, template_name, **template_data):
    """
    Send email using SendGrid with HTML template
    
    Args:
        to_email: Recipient email address
        subject: Email subject
        template_name: HTML template file name (e.g., 'emails/welcome.html')
        **template_data: Data to pass to the template
    
    Returns:
        bool: True if email sent successfully, False otherwise
    """
    if not sendgrid_available:
        return send_email_smtp(to_email, subject, template_name, **template_data)
    
    try:
        sendgrid_key = os.environ.get('SENDGRID_API_KEY')
        if not sendgrid_key:
            print("SendGrid API key not found - falling back to SMTP")
            return send_email_smtp(to_email, subject, template_name, **template_data)
        
        # Render HTML template
        html_content = render_template(template_name, **template_data)
        
        # Create SendGrid message
        sg = SendGridAPIClient(sendgrid_key)
        
        message = Mail(
            from_email=Email("testing@sendgrid.net", "InBack"),
            to_emails=To(to_email),
            subject=subject,
            html_content=Content("text/html", html_content)
        )
        
        # Send email
        response = sg.send(message)
        if response.status_code in [200, 201, 202]:
            print(f"‚úÖ Email sent to {to_email}: {subject}")
            return True
        else:
            print(f"‚ùå SendGrid error: {response.status_code}")
            return False
        
    except Exception as e:
        print(f"SendGrid error: {e}")
        # Fallback to SMTP
        return send_email_smtp(to_email, subject, template_name, **template_data)

def send_email_smtp(to_email, subject, template_name, **template_data):
    """
    Send email using standard SMTP with HTML template
    
    Args:
        to_email: Recipient email address
        subject: Email subject
        template_name: HTML template file name (e.g., 'emails/welcome.html')
        **template_data: Data to pass to the template
    
    Returns:
        bool: True if email sent successfully, False otherwise
    """
    try:
        # Render HTML template
        html_content = render_template(template_name, **template_data)
        
        # Create message
        message = MIMEMultipart('alternative')
        message['Subject'] = subject
        message['From'] = f"InBack <{EMAIL_USER}>"
        message['To'] = to_email
        
        # Add HTML content
        html_part = MIMEText(html_content, 'html', 'utf-8')
        message.attach(html_part)
        
        # Send email via SMTP
        if EMAIL_PASSWORD:
            with smtplib.SMTP(EMAIL_HOST, EMAIL_PORT) as server:
                server.starttls()
                server.login(EMAIL_USER, EMAIL_PASSWORD)
                server.send_message(message)
            return True
        else:
            print(f"Email would be sent to {to_email}: {subject}")
            print(f"Content preview: {html_content[:200]}...")
            return True  # Return True for demo purposes
        
    except Exception as e:
        print(f"SMTP error: {e}")
        return False

def send_email(to_email, subject, template_name, **template_data):
    """
    Unified email sending function - tries SendGrid first, falls back to SMTP
    """
    return send_email_sendgrid(to_email, subject, template_name, **template_data)

def send_recommendation_email(user, data):
    """
    Send recommendation email to user
    
    Args:
        user: User object 
        data: Dict with recommendation data
    
    Returns:
        bool: True if email sent successfully
    """
    try:
        template_data = {
            'user': user,
            'title': data.get('title', '–ù–æ–≤–∞—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è'),
            'item_name': data.get('item_name', ''),
            'description': data.get('description', ''),
            'manager_name': data.get('manager_name', '–í–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä'),
            'priority_text': data.get('priority_text', '–û–±—ã—á–Ω—ã–π'),
            'base_url': request.url_root if request else 'https://inback.ru'
        }
        
        subject = f"–ù–æ–≤–∞—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –æ—Ç {data.get('manager_name', 'InBack')}"
        
        return send_email(
            to_email=user.email,
            subject=subject,
            template_name="emails/recommendation.html",
            **template_data
        )
    except Exception as e:
        print(f"Error sending recommendation email: {e}")
        return False

def send_saved_search_results_email(user, data):
    """
    Send saved search results email to user
    
    Args:
        user: User object
        data: Dict with search data
    
    Returns:
        bool: True if email sent successfully  
    """
    try:
        template_data = {
            'user': user,
            'search_name': data.get('search_name', '–í–∞—à –ø–æ–∏—Å–∫'),
            'properties_count': data.get('properties_count', 0),
            'properties_list': data.get('properties_list', ''),
            'search_url': data.get('search_url', ''),
            'base_url': request.url_root if request else 'https://inback.ru'
        }
        
        subject = f"–ù–æ–≤—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞: {data.get('search_name', '–í–∞—à –ø–æ–∏—Å–∫')}"
        
        return send_email(
            to_email=user.email,
            subject=subject,
            template_name="emails/saved_search_results.html",
            **template_data
        )
    except Exception as e:
        print(f"Error sending saved search results email: {e}")
        return False

def send_verification_email(user, base_url=None):
    """Send email verification link to new user"""
    if not base_url:
        try:
            base_url = request.url_root.rstrip('/')
        except:
            base_url = 'https://inback.ru'
    
    verification_url = f"{base_url}/confirm/{user.verification_token}"
    
    return send_email(
        to_email=user.email,
        subject="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –≤–∞—à email | inback üè†",
        template_name="emails/verification.html",
        user=user,
        verification_url=verification_url,
        base_url=base_url
    )

def send_welcome_email(user, base_url=None):
    """Send welcome email to new user"""
    if not base_url:
        try:
            base_url = request.url_root.rstrip('/')
        except:
            base_url = 'https://inback.ru'
    
    return send_email(
        to_email=user.email,
        subject="–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ inback! üè†",
        template_name="emails/welcome.html",
        user=user,
        base_url=base_url
    )

def send_password_reset_email(user, reset_token):
    """Send password reset email"""
    base_url = request.url_root.rstrip('/')
    reset_url = f"{base_url}/reset-password/{reset_token}"
    
    return send_email(
        to_email=user.email,
        subject="–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è | inback",
        template_name="emails/password_reset.html",
        user=user,
        reset_url=reset_url,
        base_url=base_url
    )

def send_application_confirmation_email(user, application):
    """Send application confirmation email"""
    base_url = request.url_root.rstrip('/')
    
    return send_email(
        to_email=user.email,
        subject="–ó–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞ | inback",
        template_name="emails/application_confirmation.html",
        user=user,
        application=application,
        base_url=base_url
    )

def send_cashback_notification_email(user, cashback_record):
    """Send cashback notification email"""
    base_url = request.url_root.rstrip('/')
    
    return send_email(
        to_email=user.email,
        subject="–ö–µ—à–±–µ–∫ –æ–¥–æ–±—Ä–µ–Ω! üí∞ | inback",
        template_name="emails/cashback_notification.html",
        user=user,
        cashback_record=cashback_record,
        base_url=base_url
    )




# Telegram notification functions
async def send_telegram_message(chat_id, message, parse_mode='HTML'):
    """
    Send message to Telegram chat
    
    Args:
        chat_id: Telegram chat ID (—á–∏—Å–ª–æ–≤–æ–π ID –∏–ª–∏ @username)
        message: Message text
        parse_mode: Message format (HTML, Markdown, etc.)
    
    Returns:
        bool: True if message sent successfully
    """
    # Use simple HTTP API instead of telegram_bot
    from telegram_bot import send_telegram_message
    return send_telegram_message(chat_id, message)
    
    try:
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º chat_id –≤ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
        if isinstance(chat_id, str) and chat_id.startswith('@'):
            # Username —Ñ–æ—Ä–º–∞—Ç - –ø–æ–ø—Ä–æ–±—É–µ–º –∫–∞–∫ –µ—Å—Ç—å
            actual_chat_id = chat_id
        else:
            # –ß–∏—Å–ª–æ–≤–æ–π ID
            actual_chat_id = int(chat_id) if str(chat_id).isdigit() else chat_id
        
        await telegram_bot.send_message(
            chat_id=actual_chat_id,
            text=message,
            parse_mode=parse_mode
        )
        print(f"‚úì Telegram message sent to {actual_chat_id}")
        return True
    except Exception as e:
        print(f"‚úó Telegram error: {e}")
        if "unauthorized" in str(e).lower():
            print("üì± –†–µ—à–µ–Ω–∏–µ: –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –≤ @BotFather")
        elif "chat not found" in str(e).lower() or "user not found" in str(e).lower():
            print(f"üì± –†–µ—à–µ–Ω–∏–µ: –ü–æ–ª—É—á–∏—Ç–µ chat_id —á–µ—Ä–µ–∑ get_telegram_chat_id.py")
            print(f"üì± –¢–µ–∫—É—â–∏–π ID: {chat_id} (–≤–æ–∑–º–æ–∂–Ω–æ –Ω–µ–≤–µ—Ä–Ω—ã–π)")
        return False

def send_telegram_notification(user, notification_type, **data):
    """
    Send Telegram notification to user
    
    Args:
        user: User object with telegram_id
        notification_type: Type of notification
        **data: Additional data for the message
    """
    
    if not hasattr(user, 'telegram_id') or not user.telegram_id:
        return False
    
    # Ensure base_url is set
    if 'base_url' not in data or not data['base_url']:
        data['base_url'] = 'https://inback.ru'
    
    messages = {
        'welcome': f"""
üè† <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ InBack!</b>

–ü—Ä–∏–≤–µ—Ç, {getattr(user, 'first_name', None) or (user.full_name.split()[0] if hasattr(user, 'full_name') and user.full_name else '–ö–ª–∏–µ–Ω—Ç')}! 
–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –æ–±—ä–µ–∫—Ç–∞—Ö –∏ –≤–∞–∂–Ω—ã—Ö —Å–æ–±—ã—Ç–∏—è—Ö –ø—Ä—è–º–æ –≤ Telegram.

üîî –ù–∞—Å—Ç—Ä–æ–π—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ –ª–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ
üí∞ –û—Ç—Å–ª–µ–∂–∏–≤–∞–π—Ç–µ —Å—Ç–∞—Ç—É—Å –∫—ç—à–±–µ–∫–∞
üèòÔ∏è –ü–æ–ª—É—á–∞–π—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–æ–≤—ã—Ö –ñ–ö

<a href="{data.get('base_url', '')}/dashboard">–ü–µ—Ä–µ–π—Ç–∏ –≤ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç</a>
        """,
        
        'password_reset': f"""
üîê <b>–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è</b>

{getattr(user, 'first_name', None) or (user.full_name.split()[0] if hasattr(user, 'full_name') and user.full_name else '–ö–ª–∏–µ–Ω—Ç')}, –ø–æ—Å—Ç—É–ø–∏–ª –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è –¥–ª—è –≤–∞—à–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞.

üîó <a href="{data.get('reset_url', '')}">–í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–∞—Ä–æ–ª—å</a>

–ï—Å–ª–∏ —ç—Ç–æ –±—ã–ª–∏ –Ω–µ –≤—ã, –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä—É–π—Ç–µ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ.
        """,
        
        'application_confirmation': f"""
‚úÖ <b>–ó–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞!</b>

{getattr(user, 'first_name', None) or (user.full_name.split()[0] if hasattr(user, 'full_name') and user.full_name else '–ö–ª–∏–µ–Ω—Ç')}, –≤–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –æ–±—ä–µ–∫—Ç "{data.get('property_name', '')}" –ø—Ä–∏–Ω—è—Ç–∞.

üìã –ù–æ–º–µ—Ä –∑–∞—è–≤–∫–∏: #{data.get('application_id', '')}
üè† –û–±—ä–µ–∫—Ç: {data.get('property_name', '')}
üí∞ –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –∫—ç—à–±–µ–∫: {data.get('cashback_amount', 0):,} ‚ÇΩ

–ù–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.
        """,
        
        'cashback_approved': f"""
üí∞ <b>–ö—ç—à–±–µ–∫ –æ–¥–æ–±—Ä–µ–Ω!</b>

–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º, {getattr(user, 'first_name', None) or (user.full_name.split()[0] if hasattr(user, 'full_name') and user.full_name else '–ö–ª–∏–µ–Ω—Ç')}! 

‚úÖ –í–∞—à –∫—ç—à–±–µ–∫ –æ–¥–æ–±—Ä–µ–Ω: {data.get('amount', 0):,} ‚ÇΩ
üè† –û–±—ä–µ–∫—Ç: {data.get('property_name', '')}
üìÖ –î–∞—Ç–∞ –æ–¥–æ–±—Ä–µ–Ω–∏—è: {datetime.now().strftime('%d.%m.%Y')}

–°—Ä–µ–¥—Å—Ç–≤–∞ –±—É–¥—É—Ç –ø–µ—Ä–µ–≤–µ–¥–µ–Ω—ã –≤ —Ç–µ—á–µ–Ω–∏–µ 5 —Ä–∞–±–æ—á–∏—Ö –¥–Ω–µ–π.
        """,
        
        'new_favorites': f"""
üîî <b>–ù–æ–≤—ã–µ –æ–±—ä–µ–∫—Ç—ã –ø–æ –≤–∞—à–∏–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º!</b>

{getattr(user, 'first_name', None) or (user.full_name.split()[0] if hasattr(user, 'full_name') and user.full_name else '–ö–ª–∏–µ–Ω—Ç')}, –ø–æ—è–≤–∏–ª–∏—Å—å –Ω–æ–≤—ã–µ –æ–±—ä–µ–∫—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –≤–∞—Å –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞—Ç—å:

{data.get('properties_list', '')}

<a href="{data.get('base_url', '')}/properties">–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –æ–±—ä–µ–∫—Ç—ã</a>
        """,
        
        'recommendation': f"""
üè† <b>–ù–æ–≤–∞—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –æ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–∞</b>

{getattr(user, 'first_name', None) or (user.full_name.split()[0] if hasattr(user, 'full_name') and user.full_name else '–ö–ª–∏–µ–Ω—Ç')}, –≤–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä {data.get('manager_name', 'InBack')} —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç:

üìã <b>{data.get('title', '')}</b>
üè¢ {data.get('item_name', '')}

{data.get('description', '')}

üí° <i>–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç:</i> {data.get('priority_text', '–û–±—ã—á–Ω—ã–π')}

üîó <a href="{data.get('base_url', '')}/{('complex' if data.get('recommendation_type') == 'complex' else 'object')}/{data.get('item_id', '')}">–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ–±—ä–µ–∫—Ç</a>
üíº <a href="{data.get('base_url', '')}/dashboard">–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç</a>
        """,
        
        'saved_search_results': f"""
üîç <b>–ù–æ–≤—ã–µ –æ–±—ä–µ–∫—Ç—ã –ø–æ –≤–∞—à–µ–º—É –ø–æ–∏—Å–∫—É</b>

{getattr(user, 'first_name', None) or (user.full_name.split()[0] if hasattr(user, 'full_name') and user.full_name else '–ö–ª–∏–µ–Ω—Ç')}, –ø–æ –≤–∞—à–µ–º—É —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–º—É –ø–æ–∏—Å–∫—É "{data.get('search_name', '')}" –Ω–∞–π–¥–µ–Ω—ã –Ω–æ–≤—ã–µ –æ–±—ä–µ–∫—Ç—ã:

{data.get('properties_list', '')}

üìä –í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ: {data.get('properties_count', 0)} –æ–±—ä–µ–∫—Ç–æ–≤

<a href="{data.get('search_url', '')}/properties">–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã</a>
        """
    }
    
    message = messages.get(notification_type, f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç InBack: {notification_type}")
    
    try:
        asyncio.run(send_telegram_message(user.telegram_id, message))
        return True
    except Exception as e:
        print(f"Error sending Telegram notification: {e}")
        return False

# Enhanced unified notification system
def send_notification(recipient_email, subject, message, notification_type, user_id=None, manager_id=None, **extra_data):
    """
    Enhanced notification system that handles different recipients and methods
    
    Args:
        recipient_email: Email address of recipient
        subject: Subject/title of notification  
        message: Message content
        notification_type: Type of notification
        user_id: Optional user ID for database lookups
        manager_id: Optional manager ID
        **extra_data: Additional data for templates
    """
    from models import User
    
    # Try to get user object for enhanced notifications
    user = None
    if user_id:
        try:
            user = User.query.get(user_id)
        except:
            pass
    
    # If no user object but we have email, create basic user object for compatibility
    if not user and recipient_email:
        class BasicUser:
            def __init__(self, email):
                self.email = email
                self.full_name = email.split('@')[0].title()
                self.first_name = self.full_name
                self.preferred_contact = 'email'
                self.telegram_id = None
                self.phone = None
                
        user = BasicUser(recipient_email)
    
    results = {
        'email': False,
        'telegram': False
    }
    
    # Send email if user prefers email or has no preference
    if user and (not hasattr(user, 'preferred_contact') or 
                user.preferred_contact in ['email', 'both', None]):
        try:
            if notification_type == 'recommendation':
                results['email'] = send_recommendation_email(user, extra_data)
            elif notification_type == 'saved_search_results':
                results['email'] = send_saved_search_results_email(user, extra_data)
            else:
                # Fallback to basic email
                results['email'] = send_email(
                    to_email=recipient_email,
                    subject=subject,
                    template_name="emails/general_notification.html",
                    user=user,
                    message=message,
                    **extra_data
                )
        except Exception as e:
            print(f"Email notification failed: {e}")
    
    # Send Telegram if user has telegram_id (regardless of preference for now, since we're testing)
    if user and hasattr(user, 'telegram_id') and user.telegram_id:
        try:
            results['telegram'] = send_telegram_notification(user, notification_type, **extra_data)
        except Exception as e:
            print(f"Telegram notification failed: {e}")
    
    # Send WhatsApp if user has phone and prefers it
    if (user and hasattr(user, 'phone') and user.phone and
        hasattr(user, 'preferred_contact') and user.preferred_contact in ['whatsapp', 'both']):
        try:
            from whatsapp_integration import send_whatsapp_notification
            results['whatsapp'] = send_whatsapp_notification(user, notification_type, **extra_data)
        except Exception as e:
            print(f"WhatsApp notification failed: {e}")
    
    return results

def send_telegram_insurance_notification(name, phone, bank, credit_amount, birth_date, gender, comment, current_time):
    """
    Send insurance application notification to Telegram managers
    
    Args:
        name: –ö–ª–∏–µ–Ω—Ç –∏–º—è
        phone: –¢–µ–ª–µ—Ñ–æ–Ω –∫–ª–∏–µ–Ω—Ç–∞
        bank: –ë–∞–Ω–∫
        credit_amount: –°—É–º–º–∞ –∫—Ä–µ–¥–∏—Ç–∞
        birth_date: –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è
        gender: –ü–æ–ª
        comment: –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
        current_time: –í—Ä–µ–º—è –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–∫–∏
    
    Returns:
        bool: True if message sent successfully, False otherwise
    """
    try:
        # Check if Telegram is configured
        if not TELEGRAM_BOT_TOKEN:
            print("‚ùå Telegram not configured: missing TELEGRAM_BOT_TOKEN")
            return False
        
        if not telegram_bot:
            print("‚ùå Telegram bot not initialized")
            return False
        
        # Get manager chat IDs (try MANAGER_TELEGRAM_IDS first, fallback to TELEGRAM_CHAT_ID)
        manager_ids = MANAGER_TELEGRAM_IDS if MANAGER_TELEGRAM_IDS else TELEGRAM_CHAT_ID
        if not manager_ids:
            print("‚ùå No manager Telegram IDs configured")
            return False
        
        # Parse manager IDs (can be comma-separated)
        chat_ids = [id.strip() for id in str(manager_ids).split(',') if id.strip()]
        
        # Format the message
        message = f"""üõ° –ù–û–í–ê–Ø –ó–ê–Ø–í–ö–ê –ù–ê –°–¢–†–ê–•–û–í–ê–ù–ò–ï

üë§ –ö–ª–∏–µ–Ω—Ç: {name}
üìû –¢–µ–ª–µ—Ñ–æ–Ω: {phone}
üè¶ –ë–∞–Ω–∫: {bank}
üí∞ –°—É–º–º–∞ –∫—Ä–µ–¥–∏—Ç–∞: {credit_amount}
üìÖ –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {birth_date}
‚ö§ –ü–æ–ª: {gender}
üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {comment if comment else '–ù–µ —É–∫–∞–∑–∞–Ω'}

‚è∞ –í—Ä–µ–º—è –ø–æ–¥–∞—á–∏: {current_time}"""
        
        # Send message using requests API (more reliable than async in this context)
        import requests
        
        # Send to all manager chat IDs
        success_count = 0
        for chat_id in chat_ids:
            try:
                # Use Telegram HTTP API directly
                telegram_url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendMessage"
                payload = {
                    'chat_id': chat_id,
                    'text': message,
                    'parse_mode': 'HTML'
                }
                
                response = requests.post(telegram_url, data=payload, timeout=30)
                
                if response.status_code == 200:
                    result = response.json()
                    if result.get('ok'):
                        print(f"‚úÖ Telegram insurance notification sent to {chat_id}")
                        success_count += 1
                    else:
                        print(f"‚ùå Telegram API error for {chat_id}: {result.get('description', 'Unknown error')}")
                else:
                    print(f"‚ùå Telegram HTTP error for {chat_id}: {response.status_code}")
            except Exception as e:
                print(f"‚ùå Error sending to {chat_id}: {e}")
                continue
        
        # Return True if at least one message was sent successfully
        return success_count > 0
            
    except Exception as e:
        print(f"‚ùå Error sending Telegram insurance notification: {e}")
        return False

# Legacy function for backward compatibility
def send_notification_legacy(user, notification_type, **data):
    """
    Send notification via user's preferred method (legacy version)
    
    Args:
        user: User object
        notification_type: Type of notification
        **data: Additional data
    """
    results = {
        'email': False,
        'telegram': False
    }
    
    # Map notification types to email functions
    email_functions = {
        'welcome': send_welcome_email,
        'password_reset': lambda u, **d: send_password_reset_email(u, d.get('reset_token')),
        'application_confirmation': lambda u, **d: send_application_confirmation_email(u, d.get('application')),
        'cashback_approved': lambda u, **d: send_cashback_notification_email(u, d.get('cashback_record')),
        'recommendation': lambda u, **d: send_recommendation_email(u, d),
        'saved_search_results': lambda u, **d: send_saved_search_results_email(u, d)
    }
    
    # Send email notification
    if user.preferred_contact in ['email', 'both'] or not hasattr(user, 'preferred_contact'):
        email_func = email_functions.get(notification_type)
        if email_func:
            results['email'] = email_func(user, **data)
    
    # Send Telegram notification
    if hasattr(user, 'preferred_contact') and user.preferred_contact in ['telegram', 'both']:
        results['telegram'] = send_telegram_notification(user, notification_type, **data)
    
    return results