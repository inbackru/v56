#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è backfill –¥–µ—Ç–∞–ª—å–Ω—ã—Ö –∞–¥—Ä–µ—Å–Ω—ã—Ö –ø–æ–ª–µ–π —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–µ–π
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç DaData API –¥–ª—è –æ–±–æ–≥–∞—â–µ–Ω–∏—è parsed_area, parsed_settlement, parsed_house, parsed_block
"""

import os
import sys
import logging
from app import app, db
from models import Property
from services.auto_geocoding import get_auto_geocoding_service

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)


def backfill_address_fields(batch_size=50, limit=None, dry_run=False):
    """
    –û–±–Ω–æ–≤–∏—Ç—å –¥–µ—Ç–∞–ª—å–Ω—ã–µ –∞–¥—Ä–µ—Å–Ω—ã–µ –ø–æ–ª—è –¥–ª—è –≤—Å–µ—Ö —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–µ–π
    
    Args:
        batch_size: –†–∞–∑–º–µ—Ä –ø–∞–∫–µ—Ç–∞ –¥–ª—è –∫–æ–º–º–∏—Ç–∞ –≤ –ë–î
        limit: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—ä–µ–∫—Ç–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ (None = –≤—Å–µ)
        dry_run: –ï—Å–ª–∏ True, –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –ë–î
    """
    with app.app_context():
        # –ü–æ–ª—É—á–∞–µ–º —Å–µ—Ä–≤–∏—Å –∞–≤—Ç–æ–æ–±–æ–≥–∞—â–µ–Ω–∏—è
        auto_service = get_auto_geocoding_service()
        auto_service.enable_batch_mode()  # –û—Ç–∫–ª—é—á–∞–µ–º event listeners
        
        logger.info("=" * 80)
        logger.info("üöÄ BACKFILL –î–ï–¢–ê–õ–¨–ù–´–• –ê–î–†–ï–°–ù–´–• –ü–û–õ–ï–ô")
        logger.info("=" * 80)
        
        # –ù–∞—Ö–æ–¥–∏–º –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –æ–±–æ–≥–∞—Ç–∏—Ç—å
        # –ö—Ä–∏—Ç–µ—Ä–∏–π: –µ—Å—Ç—å address, –Ω–æ –Ω–µ—Ç parsed_area (–Ω–æ–≤–æ–µ –ø–æ–ª–µ)
        query = Property.query.filter(
            Property.address.isnot(None),
            Property.address != '',
            Property.parsed_area.is_(None)  # –ù–æ–≤–æ–µ –ø–æ–ª–µ –ø—É—Å—Ç–æ–µ
        )
        
        if limit:
            query = query.limit(limit)
        
        properties = query.all()
        total = len(properties)
        
        if total == 0:
            logger.info("‚úÖ –ù–µ—Ç –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–µ–π –¥–ª—è –æ–±–æ–≥–∞—â–µ–Ω–∏—è. –í—Å–µ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã!")
            return
        
        logger.info(f"üìç –ù–∞–π–¥–µ–Ω–æ {total} –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–µ–π –¥–ª—è –æ–±–æ–≥–∞—â–µ–Ω–∏—è")
        logger.info(f"üì¶ –†–∞–∑–º–µ—Ä –ø–∞–∫–µ—Ç–∞: {batch_size}")
        logger.info(f"üîë DaData API –ª–∏–º–∏—Ç: 10,000 –∑–∞–ø—Ä–æ—Å–æ–≤/–¥–µ–Ω—å")
        logger.info("-" * 80)
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–µ—Ç–æ–¥ enrich_batch –∏–∑ AutoGeocodingService
        stats = auto_service.enrich_batch(properties, batch_size=batch_size, dry_run=dry_run)
        
        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–æ–≥–∞—â–µ–Ω–∏–µ
        auto_service.disable_batch_mode()
        
        logger.info("=" * 80)
        logger.info("‚úÖ BACKFILL –ó–ê–í–ï–†–®–Å–ù")
        logger.info(f"   –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {stats['total']}")
        logger.info(f"   –£—Å–ø–µ—à–Ω–æ –æ–±–æ–≥–∞—â–µ–Ω–æ: {stats['enriched']}")
        logger.info(f"   –û—à–∏–±–æ–∫: {stats['errors']}")
        logger.info(f"   –ü—Ä–æ–ø—É—â–µ–Ω–æ: {stats['skipped']}")
        logger.info("=" * 80)
        
        return stats


if __name__ == "__main__":
    import argparse
    
    parser = argparse.ArgumentParser(description='Backfill –¥–µ—Ç–∞–ª—å–Ω—ã—Ö –∞–¥—Ä–µ—Å–Ω—ã—Ö –ø–æ–ª–µ–π')
    parser.add_argument('--batch-size', type=int, default=50, help='–†–∞–∑–º–µ—Ä –ø–∞–∫–µ—Ç–∞ –¥–ª—è –∫–æ–º–º–∏—Ç–∞ (default: 50)')
    parser.add_argument('--limit', type=int, default=None, help='–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ (default: –≤—Å–µ)')
    parser.add_argument('--dry-run', action='store_true', help='–¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—É—Å–∫ –±–µ–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î')
    
    args = parser.parse_args()
    
    if args.dry_run:
        logger.warning("‚ö†Ô∏è  DRY RUN MODE - –∏–∑–º–µ–Ω–µ–Ω–∏—è –ù–ï –±—É–¥—É—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –ë–î")
    
    logger.info(f"–ó–∞–ø—É—Å–∫ backfill —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏:")
    logger.info(f"  - Batch size: {args.batch_size}")
    logger.info(f"  - Limit: {args.limit or '–≤—Å–µ'}")
    logger.info(f"  - Dry run: {args.dry_run}")
    logger.info("")
    
    try:
        stats = backfill_address_fields(
            batch_size=args.batch_size,
            limit=args.limit,
            dry_run=args.dry_run
        )
        
        logger.info("\n‚úÖ –°–∫—Ä–∏–ø—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
        sys.exit(0)
        
    except Exception as e:
        logger.error(f"\n‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å–∫—Ä–∏–ø—Ç–∞: {e}", exc_info=True)
        sys.exit(1)
