#!/usr/bin/env python3
"""
Test Address Hierarchy Parsing
Shows how addresses are parsed into: Region ‚Üí City ‚Üí District ‚Üí Street ‚Üí House
"""

from services.geocoding import get_geocoding_service
from app import app, db
from models import Property
import json


def test_address_hierarchy():
    """Test geocoding with real properties from database"""
    
    with app.app_context():
        service = get_geocoding_service()
        
        print("=" * 80)
        print("–¢–ï–°–¢ –ò–ï–†–ê–†–•–ò–ò –ê–î–†–ï–°–û–í")
        print("=" * 80)
        
        # Get sample properties with coordinates
        properties = Property.query.filter(
            Property.latitude.isnot(None),
            Property.longitude.isnot(None)
        ).limit(5).all()
        
        if not properties:
            print("‚ùå –ù–µ—Ç –æ–±—ä–µ–∫—Ç–æ–≤ —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
            return
        
        print(f"\n–ù–∞–π–¥–µ–Ω–æ –æ–±—ä–µ–∫—Ç–æ–≤: {len(properties)}\n")
        
        for i, prop in enumerate(properties, 1):
            print(f"\n{'='*80}")
            print(f"–û–ë–™–ï–ö–¢ #{i}: {prop.title}")
            print(f"{'='*80}")
            print(f"ID –æ–±—ä–µ–∫—Ç–∞: {prop.id}")
            print(f"–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: {prop.latitude}, {prop.longitude}")
            print(f"–ê–¥—Ä–µ—Å –≤ –ë–î: {prop.address or '–Ω–µ —É–∫–∞–∑–∞–Ω'}")
            
            # Get address components via geocoding
            print("\nüîç –ì–ï–û–ö–û–î–ò–†–û–í–ê–ù–ò–ï...")
            result = service.reverse_geocode(prop.latitude, prop.longitude)
            
            if result:
                print("\n‚úÖ –£–°–ü–ï–®–ù–û –†–ê–°–ü–ê–†–°–ï–ù–û:")
                print("-" * 80)
                print(f"üìç –ü–û–õ–ù–´–ô –ê–î–†–ï–°: {result.get('formatted_address', 'N/A')}")
                print("\nüèõÔ∏è  –ò–ï–†–ê–†–•–ò–Ø –ê–î–†–ï–°–ê:")
                print(f"   ‚îú‚îÄ –°—Ç—Ä–∞–Ω–∞:          {result.get('country', '–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞')}")
                print(f"   ‚îú‚îÄ –†–µ–≥–∏–æ–Ω:          {result.get('region', '–Ω–µ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω')}")
                print(f"   ‚îú‚îÄ –ì–æ—Ä–æ–¥:           {result.get('city', '–Ω–µ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω')}")
                print(f"   ‚îú‚îÄ –û–∫—Ä—É–≥/–†–∞–π–æ–Ω:     {result.get('district', '–Ω–µ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω') or '–Ω–µ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω'}")
                print(f"   ‚îú‚îÄ –£–ª–∏—Ü–∞:           {result.get('street', '–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞')}")
                print(f"   ‚îú‚îÄ –î–æ–º:             {result.get('house', '–Ω–µ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω')}")
                print(f"   ‚îî‚îÄ –ò–Ω–¥–µ–∫—Å:          {result.get('postal_code', '–Ω–µ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω') or '–Ω–µ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω'}")
                
                print("\nüìä –ú–ï–¢–ê–î–ê–ù–ù–´–ï:")
                print(f"   ‚îú‚îÄ –¢–∏–ø –æ–±—ä–µ–∫—Ç–∞:     {result.get('kind', 'unknown')}")
                print(f"   ‚îî‚îÄ –¢–æ—á–Ω–æ—Å—Ç—å:        {result.get('precision', 'unknown')}")
                
                # Show what will be saved to database
                print("\nüíæ –î–ê–ù–ù–´–ï –î–õ–Ø –ë–ê–ó–´:")
                print(f"   ‚îú‚îÄ parsed_city:     '{result.get('city', '')}'")
                print(f"   ‚îú‚îÄ parsed_district: '{result.get('district', '')}'")
                print(f"   ‚îî‚îÄ parsed_street:   '{result.get('street', '')}'")
                
            else:
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∞–¥—Ä–µ—Å")
        
        # Show service statistics
        print(f"\n{'='*80}")
        print("–°–¢–ê–¢–ò–°–¢–ò–ö–ê –°–ï–†–í–ò–°–ê")
        print(f"{'='*80}")
        stats = service.get_stats()
        print(f"API –∑–∞–ø—Ä–æ—Å–æ–≤: {stats['api_requests']}")
        print(f"–ü–æ–ø–∞–¥–∞–Ω–∏–π –≤ –∫—ç—à: {stats['cache_hits']}")
        print(f"–†–∞–∑–º–µ—Ä –∫—ç—à–∞: {stats['cache_size']}")
        print(f"–ü—Ä–æ—Ü–µ–Ω—Ç –ø–æ–ø–∞–¥–∞–Ω–∏–π: {stats['cache_hit_rate']}")
        
        print(f"\n{'='*80}")
        print("–¢–ï–°–¢ –ó–ê–í–ï–†–®–Å–ù")
        print(f"{'='*80}\n")


if __name__ == "__main__":
    test_address_hierarchy()
