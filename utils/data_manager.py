"""
–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã–º–∏ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ –º–∏—Ä–æ–≤–æ–≥–æ —É—Ä–æ–≤–Ω—è
–ü—Ä–æ—Å—Ç–æ–π Python —Å–∫—Ä–∏–ø—Ç –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞—Å—Ç—Ä–æ–π—â–∏–∫–æ–≤, –ñ–ö –∏ –∫–≤–∞—Ä—Ç–∏—Ä
"""

import os
import sys

# Add parent directory to path
sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from app import app, db
from models import Developer, ResidentialComplex, Property
import re
import unicodedata

def slugify(text):
    """Convert text to URL-friendly slug"""
    # Transliterate Cyrillic to Latin
    translit_map = {
        '–∞': 'a', '–±': 'b', '–≤': 'v', '–≥': 'g', '–¥': 'd', '–µ': 'e', '—ë': 'yo', 
        '–∂': 'zh', '–∑': 'z', '–∏': 'i', '–π': 'y', '–∫': 'k', '–ª': 'l', '–º': 'm', 
        '–Ω': 'n', '–æ': 'o', '–ø': 'p', '—Ä': 'r', '—Å': 's', '—Ç': 't', '—É': 'u', 
        '—Ñ': 'f', '—Ö': 'h', '—Ü': 'ts', '—á': 'ch', '—à': 'sh', '—â': 'sch', 
        '—ä': '', '—ã': 'y', '—å': '', '—ç': 'e', '—é': 'yu', '—è': 'ya'
    }
    
    text = text.lower()
    result = ''
    for char in text:
        result += translit_map.get(char, char)
    
    # Remove non-alphanumeric characters
    result = re.sub(r'[^a-z0-9]+', '-', result)
    return result.strip('-')


class DataManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å normalized —Ç–∞–±–ª–∏—Ü–∞–º–∏"""
    
    def __init__(self):
        self.app = app
    
    def add_developer(self, name, phone=None, website=None, **kwargs):
        """
        –î–æ–±–∞–≤–∏—Ç—å –∑–∞—Å—Ç—Ä–æ–π—â–∏–∫–∞
        
        –ü—Ä–∏–º–µ—Ä:
            dm.add_developer(
                name="–ù–æ–≤—ã–π –ó–∞—Å—Ç—Ä–æ–π—â–∏–∫",
                phone="+7 (999) 123-45-67",
                website="https://developer.ru"
            )
        """
        with self.app.app_context():
            # Check if already exists
            existing = Developer.query.filter_by(name=name).first()
            if existing:
                print(f"‚ö†Ô∏è  –ó–∞—Å—Ç—Ä–æ–π—â–∏–∫ '{name}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç (ID: {existing.id})")
                return existing
            
            developer = Developer(
                name=name,
                slug=kwargs.get('slug', slugify(name)),
                phone=phone,
                website=website,
                **kwargs
            )
            
            db.session.add(developer)
            db.session.commit()
            
            print(f"‚úÖ –ó–∞—Å—Ç—Ä–æ–π—â–∏–∫ '{name}' –¥–æ–±–∞–≤–ª–µ–Ω (ID: {developer.id})")
            return developer
    
    def add_residential_complex(self, name, developer_name, cashback_rate=5.0, **kwargs):
        """
        –î–æ–±–∞–≤–∏—Ç—å –∂–∏–ª–æ–π –∫–æ–º–ø–ª–µ–∫—Å
        
        –ü—Ä–∏–º–µ—Ä:
            dm.add_residential_complex(
                name="–ñ–ö –°–æ–ª–Ω–µ—á–Ω—ã–π",
                developer_name="–ù–æ–≤—ã–π –ó–∞—Å—Ç—Ä–æ–π—â–∏–∫",
                cashback_rate=5.5,
                sales_phone="+7 (999) 111-22-33",
                address="—É–ª. –ö—Ä–∞—Å–Ω–∞—è, 100",
                latitude=45.123456,
                longitude=38.987654
            )
        """
        with self.app.app_context():
            # Find developer
            developer = Developer.query.filter_by(name=developer_name).first()
            if not developer:
                print(f"‚ùå –ó–∞—Å—Ç—Ä–æ–π—â–∏–∫ '{developer_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ –∑–∞—Å—Ç—Ä–æ–π—â–∏–∫–∞!")
                return None
            
            # Check if complex already exists
            existing = ResidentialComplex.query.filter_by(name=name).first()
            if existing:
                print(f"‚ö†Ô∏è  –ñ–ö '{name}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç (ID: {existing.id})")
                return existing
            
            complex_obj = ResidentialComplex(
                name=name,
                slug=kwargs.get('slug', slugify(name)),
                developer_id=developer.id,
                cashback_rate=cashback_rate,
                **kwargs
            )
            
            db.session.add(complex_obj)
            db.session.commit()
            
            print(f"‚úÖ –ñ–ö '{name}' –¥–æ–±–∞–≤–ª–µ–Ω (ID: {complex_obj.id}, –ó–∞—Å—Ç—Ä–æ–π—â–∏–∫: {developer_name})")
            return complex_obj
    
    def add_property(self, complex_name, title, price, area, rooms, **kwargs):
        """
        –î–æ–±–∞–≤–∏—Ç—å –∫–≤–∞—Ä—Ç–∏—Ä—É
        
        –ü—Ä–∏–º–µ—Ä:
            dm.add_property(
                complex_name="–ñ–ö –°–æ–ª–Ω–µ—á–Ω—ã–π",
                title="2-–∫–æ–º–Ω, 65 –º¬≤",
                price=7500000,
                area=65.0,
                rooms=2,
                floor=5,
                total_floors=15,
                latitude=45.123456,
                longitude=38.987654
            )
        """
        with self.app.app_context():
            # Find complex
            complex_obj = ResidentialComplex.query.filter_by(name=complex_name).first()
            if not complex_obj:
                print(f"‚ùå –ñ–ö '{complex_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ –ñ–ö!")
                return None
            
            # Calculate price per sqm if not provided
            price_per_sqm = kwargs.get('price_per_sqm')
            if not price_per_sqm and price and area:
                price_per_sqm = int(price / area)
            
            property_obj = Property(
                title=title,
                slug=kwargs.get('slug', slugify(title)),
                complex_id=complex_obj.id,
                developer_id=complex_obj.developer_id,
                price=price,
                area=area,
                rooms=rooms,
                price_per_sqm=price_per_sqm,
                is_active=True,
                **kwargs
            )
            
            db.session.add(property_obj)
            db.session.commit()
            
            print(f"‚úÖ –ö–≤–∞—Ä—Ç–∏—Ä–∞ '{title}' –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ '{complex_name}' (ID: {property_obj.id}, –¶–µ–Ω–∞: {property_obj.formatted_price})")
            return property_obj
    
    def list_developers(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ—Ö –∑–∞—Å—Ç—Ä–æ–π—â–∏–∫–æ–≤"""
        with self.app.app_context():
            developers = Developer.query.filter_by(is_active=True).all()
            print(f"\nüìä –í—Å–µ–≥–æ –∑–∞—Å—Ç—Ä–æ–π—â–∏–∫–æ–≤: {len(developers)}")
            for dev in developers:
                complexes_count = len(dev.complexes)
                properties_count = Property.query.filter_by(developer_id=dev.id).count()
                print(f"  ‚Ä¢ {dev.name} (ID: {dev.id}) - –ñ–ö: {complexes_count}, –ö–≤–∞—Ä—Ç–∏—Ä: {properties_count}")
    
    def list_complexes(self, developer_name=None):
        """–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –ñ–ö (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ —Ñ–∏–ª—å—Ç—Ä –ø–æ –∑–∞—Å—Ç—Ä–æ–π—â–∏–∫—É)"""
        with self.app.app_context():
            query = ResidentialComplex.query.filter_by(is_active=True)
            
            if developer_name:
                developer = Developer.query.filter_by(name=developer_name).first()
                if developer:
                    query = query.filter_by(developer_id=developer.id)
                else:
                    print(f"‚ùå –ó–∞—Å—Ç—Ä–æ–π—â–∏–∫ '{developer_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω")
                    return
            
            complexes = query.all()
            print(f"\nüìä –í—Å–µ–≥–æ –ñ–ö: {len(complexes)}")
            for cx in complexes:
                properties_count = len(cx.properties)
                dev_name = cx.developer.name if cx.developer else "–ù–µ —É–∫–∞–∑–∞–Ω"
                print(f"  ‚Ä¢ {cx.name} (ID: {cx.id}) - –ó–∞—Å—Ç—Ä–æ–π—â–∏–∫: {dev_name}, –ö–≤–∞—Ä—Ç–∏—Ä: {properties_count}, –ö—ç—à–±–µ–∫: {cx.cashback_rate}%")
    
    def list_properties(self, complex_name=None, limit=20):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∫–≤–∞—Ä—Ç–∏—Ä—ã (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ —Ñ–∏–ª—å—Ç—Ä –ø–æ –ñ–ö)"""
        with self.app.app_context():
            query = Property.query.filter_by(is_active=True)
            
            if complex_name:
                complex_obj = ResidentialComplex.query.filter_by(name=complex_name).first()
                if complex_obj:
                    query = query.filter_by(complex_id=complex_obj.id)
                else:
                    print(f"‚ùå –ñ–ö '{complex_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω")
                    return
            
            properties = query.limit(limit).all()
            total = query.count()
            
            print(f"\nüìä –ü–æ–∫–∞–∑–∞–Ω–æ: {len(properties)} –∏–∑ {total} –∫–≤–∞—Ä—Ç–∏—Ä")
            for prop in properties:
                cx_name = prop.residential_complex.name if prop.residential_complex else "–ù–µ —É–∫–∞–∑–∞–Ω"
                print(f"  ‚Ä¢ {prop.title} - {prop.formatted_price} ({cx_name})")


# ============================================
# –ü–†–ò–ú–ï–†–´ –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Ø
# ============================================

def example_usage():
    """–ü—Ä–∏–º–µ—Ä—ã –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å DataManager"""
    
    dm = DataManager()
    
    # 1. –î–æ–±–∞–≤–∏—Ç—å –∑–∞—Å—Ç—Ä–æ–π—â–∏–∫–∞
    print("\n=== –ü—Ä–∏–º–µ—Ä 1: –î–æ–±–∞–≤–∏—Ç—å –∑–∞—Å—Ç—Ä–æ–π—â–∏–∫–∞ ===")
    developer = dm.add_developer(
        name="–ü—Ä–µ–º–∏—É–º–°—Ç—Ä–æ–π",
        phone="+7 (861) 123-45-67",
        website="https://premium-stroy.ru",
        description="–ö—Ä—É–ø–Ω—ã–π –¥–µ–≤–µ–ª–æ–ø–µ—Ä –ö—Ä–∞—Å–Ω–æ–¥–∞—Ä–∞",
        inn="2312345678"
    )
    
    # 2. –î–æ–±–∞–≤–∏—Ç—å –ñ–ö
    print("\n=== –ü—Ä–∏–º–µ—Ä 2: –î–æ–±–∞–≤–∏—Ç—å –ñ–ö ===")
    complex_obj = dm.add_residential_complex(
        name="–ñ–ö –ü—Ä–µ–º–∏—É–º –ü–∞—Ä–∫",
        developer_name="–ü—Ä–µ–º–∏—É–º–°—Ç—Ä–æ–π",
        cashback_rate=5.5,
        sales_phone="+7 (861) 999-88-77",
        address="—É–ª. –ö—Ä–∞—Å–Ω–∞—è, 200, –ö—Ä–∞—Å–Ω–æ–¥–∞—Ä",
        latitude=45.0401,
        longitude=38.9760,
        description="–≠–ª–∏—Ç–Ω—ã–π –∂–∏–ª–æ–π –∫–æ–º–ø–ª–µ–∫—Å –≤ —Ü–µ–Ω—Ç—Ä–µ –≥–æ—Ä–æ–¥–∞",
        start_build_year=2024,
        end_build_year=2026
    )
    
    # 3. –î–æ–±–∞–≤–∏—Ç—å –∫–≤–∞—Ä—Ç–∏—Ä—É
    print("\n=== –ü—Ä–∏–º–µ—Ä 3: –î–æ–±–∞–≤–∏—Ç—å –∫–≤–∞—Ä—Ç–∏—Ä—É ===")
    property_obj = dm.add_property(
        complex_name="–ñ–ö –ü—Ä–µ–º–∏—É–º –ü–∞—Ä–∫",
        title="2-–∫–æ–º–Ω, 65 –º¬≤, 8/15 —ç—Ç.",
        price=8500000,
        area=65.0,
        rooms=2,
        floor=8,
        total_floors=15,
        latitude=45.0401,
        longitude=38.9760,
        description="–ü—Ä–æ—Å—Ç–æ—Ä–Ω–∞—è –¥–≤—É—Ö–∫–æ–º–Ω–∞—Ç–Ω–∞—è –∫–≤–∞—Ä—Ç–∏—Ä–∞ —Å –≤–∏–¥–æ–º –Ω–∞ –ø–∞—Ä–∫",
        deal_type="–ü–µ—Ä–≤–∏—á–∫–∞"
    )
    
    # 4. –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —á—Ç–æ –¥–æ–±–∞–≤–∏–ª–∏
    print("\n=== –ü—Ä–∏–º–µ—Ä 4: –ü—Ä–æ—Å–º–æ—Ç—Ä –¥–∞–Ω–Ω—ã—Ö ===")
    dm.list_developers()
    dm.list_complexes()
    dm.list_properties(limit=10)


if __name__ == '__main__':
    import argparse
    
    parser = argparse.ArgumentParser(description='–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã–º–∏ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏')
    parser.add_argument('command', choices=['example', 'list-developers', 'list-complexes', 'list-properties'],
                       help='–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è')
    
    args = parser.parse_args()
    
    dm = DataManager()
    
    if args.command == 'example':
        example_usage()
    elif args.command == 'list-developers':
        dm.list_developers()
    elif args.command == 'list-complexes':
        dm.list_complexes()
    elif args.command == 'list-properties':
        dm.list_properties()
